{
    "smithy": "2.0",
    "metadata": {
        "suppressions": [
            {
                "id": "HttpMethodSemantics",
                "namespace": "com.amazonaws.glacier"
            },
            {
                "id": "UnreferencedShape",
                "namespace": "aws.protocoltests.config",
                "reason": "These shapes are intended to be used to validate vendorParams in\nprotocol tests, so they naturally will not be connected to a service.\n"
            },
            {
                "id": "HttpMethodSemantics",
                "namespace": "com.amazonaws.s3"
            },
            {
                "id": "EnumTrait",
                "namespace": "com.amazonaws.s3"
            },
            {
                "id": "DeprecatedTrait",
                "namespace": "*",
                "reason": "Some of the AWS protocols make use of deprecated traits, and some are\nthemselves deprecated traits. As this package is intended to test those\nprotocols, the warnings should be suppressed."
            }
        ]
    },
    "shapes": {
        "aws.api#ArnNamespace": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "A string representing a service's ARN namespace.",
                "smithy.api#pattern": "^[a-z0-9.\\-]{1,63}$",
                "smithy.api#private": {}
            }
        },
        "aws.api#CloudFormationName": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "A string representing a CloudFormation service name.",
                "smithy.api#pattern": "^[A-Z][A-Za-z0-9]+$",
                "smithy.api#private": {}
            }
        },
        "aws.api#TagOperationReference": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Points to an operation designated for a tagging APi",
                "smithy.api#idRef": {
                    "failWhenMissing": true,
                    "selector": "resource > operation"
                }
            }
        },
        "aws.api#TaggableApiConfig": {
            "type": "structure",
            "members": {
                "tagApi": {
                    "target": "aws.api#TagOperationReference",
                    "traits": {
                        "smithy.api#documentation": "The `tagApi` property is a string value that references a non-instance\nor create operation that creates or updates tags on the resource.",
                        "smithy.api#required": {}
                    }
                },
                "untagApi": {
                    "target": "aws.api#TagOperationReference",
                    "traits": {
                        "smithy.api#documentation": "The `untagApi` property is a string value that references a non-instance\noperation that removes tags on the resource.",
                        "smithy.api#required": {}
                    }
                },
                "listTagsApi": {
                    "target": "aws.api#TagOperationReference",
                    "traits": {
                        "smithy.api#documentation": "The `listTagsApi` property is a string value that references a non-\ninstance operation which gets the current tags on the resource.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Structure representing the configuration of resource specific tagging APIs"
            }
        },
        "aws.api#arn": {
            "type": "structure",
            "members": {
                "template": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines the ARN template. The provided string contains URI-template\nstyle label placeholders that contain the name of one of the identifiers\ndefined in the `identifiers` property of the resource. These labels can\nbe substituted at runtime with the actual identifiers of the resource.\nEvery identifier name of the resource MUST have corresponding label of\nthe same name. Note that percent-encoding **is not** performed on these\nplaceholder values; they are to be replaced literally. For relative ARN\ntemplates that have not set `absolute` to `true`, the template string\ncontains only the resource part of the ARN (for example,\n`foo/{MyResourceId}`). Relative ARNs MUST NOT start with \"/\".",
                        "smithy.api#required": {}
                    }
                },
                "absolute": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Set to true to indicate that the ARN template contains a fully-formed\nARN that does not need to be merged with the service. This type of ARN\nMUST be used when the identifier of a resource is an ARN or is based on\nthe ARN identifier of a parent resource."
                    }
                },
                "noRegion": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Set to true to specify that the ARN does not contain a region. If not\nset, or if set to false, the resolved ARN will contain a placeholder\nfor the region. This can only be set to true if `absolute` is not set\nor is false."
                    }
                },
                "noAccount": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Set to true to specify that the ARN does not contain an account ID. If\nnot set, or if set to false, the resolved ARN will contain a placeholder\nfor the customer account ID. This can only be set to true if absolute\nis not set or is false."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Specifies an ARN template for the resource.",
                "smithy.api#externalDocumentation": {
                    "Reference": "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
                },
                "smithy.api#trait": {
                    "selector": "resource"
                }
            }
        },
        "aws.api#arnReference": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The AWS CloudFormation resource type contained in the ARN."
                    }
                },
                "resource": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "An absolute shape ID that references the Smithy resource type contained\nin the ARN (e.g., `com.foo#SomeResource`). The targeted resource is not\nrequired to be found in the model, allowing for external shapes to be\nreferenced without needing to take on an additional dependency. If the\nshape is found in the model, it MUST target a resource shape, and the\nresource MUST be found within the closure of the referenced service\nshape."
                    }
                },
                "service": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The Smithy service absolute shape ID that is referenced by the ARN. The\ntargeted service is not required to be found in the model, allowing for\nexternal shapes to be referenced without needing to take on an\nadditional dependency."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Marks a string as containing an ARN.",
                "smithy.api#trait": {
                    "selector": "string"
                }
            }
        },
        "aws.api#clientDiscoveredEndpoint": {
            "type": "structure",
            "members": {
                "required": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "This field denotes whether or not this operation requires the use of a\nspecific endpoint. If this field is false, the standard regional\nendpoint for a service can handle this request. The client will start\nsending requests to the standard regional endpoint while working to\ndiscover a more specific endpoint.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates that the target operation should use the client's endpoint\ndiscovery logic.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.api#clientEndpointDiscovery": {
            "type": "structure",
            "members": {
                "operation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Indicates the operation that clients should use to discover endpoints\nfor the service.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true,
                            "selector": "operation"
                        },
                        "smithy.api#required": {}
                    }
                },
                "error": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Indicates the error that tells clients that the endpoint they are using\nis no longer valid. This error MUST be bound to any operation bound to\nthe service which is marked with the aws.api#clientDiscoveredEndpoint\ntrait.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true,
                            "selector": "structure[trait|error]"
                        },
                        "smithy.api#recommended": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Configures endpoint discovery for the service.",
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.api#clientEndpointDiscoveryId": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates members of the operation input which should be use to discover\nendpoints.",
                "smithy.api#trait": {
                    "selector": "operation[trait|aws.api#clientDiscoveredEndpoint] -[input]->\nstructure > :test(member[trait|required] > string)"
                }
            }
        },
        "aws.api#controlPlane": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Defines a service, resource, or operation as operating on the control plane.",
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)",
                    "conflicts": [
                        "aws.api#dataPlane"
                    ]
                }
            }
        },
        "aws.api#data": {
            "type": "enum",
            "members": {
                "CUSTOMER_CONTENT": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Customer content means any software (including machine images), data,\ntext, audio, video or images that customers or any customer end user\ntransfers to AWS for processing, storage or hosting by AWS services in\nconnection with the customer’s accounts and any computational results\nthat customers or any customer end user derive from the foregoing\nthrough their use of AWS services.",
                        "smithy.api#enumValue": "content"
                    }
                },
                "CUSTOMER_ACCOUNT_INFORMATION": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Account information means information about customers that customers\nprovide to AWS in connection with the creation or administration of\ncustomers’ accounts.",
                        "smithy.api#enumValue": "account"
                    }
                },
                "SERVICE_ATTRIBUTES": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Service Attributes means service usage data related to a customer’s\naccount, such as resource identifiers, metadata tags, security and\naccess roles, rules, usage policies, permissions, usage statistics,\nlogging data, and analytics.",
                        "smithy.api#enumValue": "usage"
                    }
                },
                "TAG_DATA": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Designates metadata tags applied to AWS resources.",
                        "smithy.api#enumValue": "tagging"
                    }
                },
                "PERMISSIONS_DATA": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Designates security and access roles, rules, usage policies, and\npermissions.",
                        "smithy.api#enumValue": "permissions"
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Designates the target as containing data of a known classification level.",
                "smithy.api#trait": {
                    "selector": ":test(simpleType, list, structure, union, member)"
                }
            }
        },
        "aws.api#dataPlane": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Defines a service, resource, or operation as operating on the data plane.",
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)",
                    "conflicts": [
                        "aws.api#controlPlane"
                    ]
                }
            }
        },
        "aws.api#service": {
            "type": "structure",
            "members": {
                "sdkId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The `sdkId` property is a required string value that specifies the AWS\nSDK service ID (e.g., \"API Gateway\"). This value is used for generating\nclient names in SDKs and for linking between services.",
                        "smithy.api#required": {}
                    }
                },
                "arnNamespace": {
                    "target": "aws.api#ArnNamespace",
                    "traits": {
                        "smithy.api#documentation": "The `arnNamespace` property is a string value that defines the ARN service\nnamespace of the service (e.g., \"apigateway\"). This value is used in\nARNs assigned to resources in the service. If not set, this value\ndefaults to the lowercase name of the service shape."
                    }
                },
                "cloudFormationName": {
                    "target": "aws.api#CloudFormationName",
                    "traits": {
                        "smithy.api#documentation": "The `cloudFormationName` property is a string value that specifies the\nAWS CloudFormation service name (e.g., `ApiGateway`). When not set,\nthis value defaults to the name of the service shape. This value is\npart of the CloudFormation resource type name that is automatically\nassigned to resources in the service (e.g., `AWS::<NAME>::resourceName`)."
                    }
                },
                "cloudTrailEventSource": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The `cloudTrailEventSource` property is a string value that defines the\nAWS customer-facing eventSource property contained in CloudTrail event\nrecords emitted by the service. If not specified, this value defaults\nto the `arnNamespace` plus `.amazonaws.com`."
                    }
                },
                "docId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The `docId` property is a string value that defines the identifier\nused to implemention linking between service and SDK documentation for\nAWS services. If not specified, this value defaults to the `sdkId` in\nlower case plus the service `version` property, separated by dashes."
                    }
                },
                "endpointPrefix": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The `endpointPrefix` property is a string value that identifies which\nendpoint in a given region should be used to connect to the service.\nFor example, most services in the AWS standard partition have endpoints\nwhich follow the format: `{endpointPrefix}.{region}.amazonaws.com`. A\nservice with the endpoint prefix example in the region us-west-2 might\nhave the endpoint example.us-west-2.amazonaws.com.\n\nThis value is not unique across services and is subject to change.\nTherefore, it MUST NOT be used for client naming or for any other\npurpose that requires a static, unique identifier. sdkId should be used\nfor those purposes. Additionally, this value can be used to attempt to\nresolve endpoints."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "An AWS service is defined using the `aws.api#service` trait. This trait\nprovides information about the service like the name used to generate AWS\nSDK client classes and the namespace used in ARNs.",
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.api#tagEnabled": {
            "type": "structure",
            "members": {
                "disableDefaultOperations": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "The `disableDefaultOperations` property is a boolean value that specifies\nif the service does not have the standard tag operations supporting all\nresources on the service. Default value is `false`"
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Annotates a service as having tagging on 1 or more resources and associated\nAPIs to perform CRUD operations on those tags",
                "smithy.api#trait": {
                    "selector": "service"
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.api#taggable": {
            "type": "structure",
            "members": {
                "property": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The `property` property is a string value that identifies which\nresource property represents tags for the resource."
                    }
                },
                "apiConfig": {
                    "target": "aws.api#TaggableApiConfig",
                    "traits": {
                        "smithy.api#documentation": "Specifies configuration for resource specific tagging APIs if the\nresource has them."
                    }
                },
                "disableSystemTags": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Flag indicating if the resource is not able to carry AWS system level.\nUsed by service principals. Default value is `false`"
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates a resource supports CRUD operations for tags. Either through\nresource lifecycle or instance operations or tagging operations on the\nservice.",
                "smithy.api#trait": {
                    "selector": "resource"
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.auth#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.auth#cognitoUserPools": {
            "type": "structure",
            "members": {
                "providerArns": {
                    "target": "aws.auth#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of the Amazon Cognito user pool ARNs. Each element is of this\nformat: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#authDefinition": {},
                "smithy.api#documentation": "Configures an Amazon Cognito User Pools auth scheme.",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.auth#sigv4": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The signature version 4 service signing name to use in the credential\nscope when signing requests. This value SHOULD match the `arnNamespace`\nproperty of the `aws.api#service` trait if present and the `name`\nproperty of the `aws.api#sigv4a` trait if present.",
                        "smithy.api#externalDocumentation": {
                            "Reference": "https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html"
                        },
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#authDefinition": {
                    "traits": [
                        "aws.auth#unsignedPayload"
                    ]
                },
                "smithy.api#documentation": "[Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)\nis the process to add authentication information to AWS requests sent by HTTP. For\nsecurity, most requests to AWS must be signed with an access key, which consists\nof an access key ID and secret access key. These two keys are commonly referred to\nas your security credentials.",
                "smithy.api#externalDocumentation": {
                    "Reference": "https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.auth#sigv4a": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The signature version 4a service signing name to use in the credential\nscope when signing requests. This value SHOULD match the `arnNamespace`\nproperty of the `aws.api#service` trait if present and the `name`\nproperty of the `aws.api#sigv4` trait.",
                        "smithy.api#externalDocumentation": {
                            "Reference": "https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html"
                        },
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#authDefinition": {
                    "traits": [
                        "aws.auth#unsignedPayload"
                    ]
                },
                "smithy.api#documentation": "Signature Version 4 Asymmetric (SigV4A), an extension of Signature Version 4 (SigV4), is the\nprocess to add authentication information to AWS requests sent by HTTP. SigV4A is nearly\nidentical to SigV4, but also uses public-private keys and asymmetric cryptographic signatures\nfor every request. Most notably, SigV4A supports signatures for multi-region API requests.",
                "smithy.api#externalDocumentation": {
                    "Reference": "https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html",
                    "Examples": "https://github.com/aws-samples/sigv4a-signing-examples"
                },
                "smithy.api#trait": {
                    "selector": "service[trait|aws.auth#sigv4]"
                }
            }
        },
        "aws.auth#unsignedPayload": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates that the request payload of a signed request is not to be used\nas part of the signature.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.customizations#s3UnwrappedXmlOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates the response body from S3 is not wrapped in the\naws-restxml-protocol operation-level XML node. Intended to only be used by\nAWS S3.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.protocols#ChecksumAlgorithm": {
            "type": "enum",
            "members": {
                "CRC32C": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "CRC32C",
                        "smithy.api#enumValue": "CRC32C"
                    }
                },
                "CRC32": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "CRC32",
                        "smithy.api#enumValue": "CRC32"
                    }
                },
                "SHA1": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "SHA1",
                        "smithy.api#enumValue": "SHA1"
                    }
                },
                "SHA256": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "SHA256",
                        "smithy.api#enumValue": "SHA256"
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocols#ChecksumAlgorithmSet": {
            "type": "list",
            "member": {
                "target": "aws.protocols#ChecksumAlgorithm"
            },
            "traits": {
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#private": {},
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocols#HttpConfiguration": {
            "type": "structure",
            "members": {
                "http": {
                    "target": "aws.protocols#StringList",
                    "traits": {
                        "smithy.api#documentation": "The priority ordered list of supported HTTP protocol versions."
                    }
                },
                "eventStreamHttp": {
                    "target": "aws.protocols#StringList",
                    "traits": {
                        "smithy.api#documentation": "The priority ordered list of supported HTTP protocol versions that\nare required when using event streams with the service. If not set,\nthis value defaults to the value of the `http` member. Any entry in\n`eventStreamHttp` MUST also appear in `http`."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Contains HTTP protocol configuration for HTTP-based protocols.",
                "smithy.api#mixin": {
                    "localTraits": [
                        "smithy.api#private"
                    ]
                },
                "smithy.api#private": {}
            }
        },
        "aws.protocols#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocols#awsJson1_0": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocols#HttpConfiguration"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#documentation": "An RPC-based protocol that sends JSON payloads. This protocol does not use\nHTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#awsJson1_1": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocols#HttpConfiguration"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#documentation": "An RPC-based protocol that sends JSON payloads. This protocol does not use\nHTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#awsQuery": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#deprecated": {},
                "smithy.api#documentation": "An RPC-based protocol that sends 'POST' requests in the body as\n`x-www-form-urlencoded` strings and responses in XML documents. This\nprotocol does not use HTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel",
                        "aws.protocols#awsQueryError",
                        "smithy.api#xmlAttribute",
                        "smithy.api#xmlFlattened",
                        "smithy.api#xmlName",
                        "smithy.api#xmlNamespace"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service [trait|xmlNamespace]"
                },
                "smithy.api#traitValidators": {
                    "UnsupportedProtocolDocument": {
                        "selector": "~> member :test(> document)",
                        "message": "Document types are not supported with awsQuery"
                    }
                }
            }
        },
        "aws.protocols#awsQueryCompatible": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Enable backward compatibility when migrating from awsQuery to awsJson protocol",
                "smithy.api#trait": {
                    "selector": "service [trait|aws.protocols#awsJson1_0]"
                }
            }
        },
        "aws.protocols#awsQueryError": {
            "type": "structure",
            "members": {
                "code": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The value used to distinguish this error shape during serialization.",
                        "smithy.api#required": {}
                    }
                },
                "httpResponseCode": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "The HTTP response code used on a response containing this error shape.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Provides the value in the 'Code' distinguishing field and HTTP response\ncode for an operation error.",
                "smithy.api#trait": {
                    "selector": "structure [trait|error]",
                    "breakingChanges": [
                        {
                            "change": "any"
                        }
                    ]
                }
            }
        },
        "aws.protocols#ec2Query": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#deprecated": {},
                "smithy.api#documentation": "An RPC-based protocol that sends 'POST' requests in the body as Amazon EC2\nformatted `x-www-form-urlencoded` strings and responses in XML documents.\nThis protocol does not use HTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel",
                        "aws.protocols#ec2QueryName",
                        "smithy.api#xmlAttribute",
                        "smithy.api#xmlFlattened",
                        "smithy.api#xmlName",
                        "smithy.api#xmlNamespace"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service [trait|xmlNamespace]"
                },
                "smithy.api#traitValidators": {
                    "UnsupportedProtocolDocument": {
                        "selector": "~> member :test(> document)",
                        "message": "Document types are not supported with ec2Query"
                    }
                }
            }
        },
        "aws.protocols#ec2QueryName": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Indicates the serialized name of a structure member when that structure is\nserialized for the input of an EC2 operation.",
                "smithy.api#pattern": "^[a-zA-Z_][a-zA-Z_0-9-]*$",
                "smithy.api#trait": {
                    "selector": "structure > member"
                }
            }
        },
        "aws.protocols#httpChecksum": {
            "type": "structure",
            "members": {
                "requestAlgorithmMember": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines a top-level operation input member that is used to configure\nrequest checksum behavior."
                    }
                },
                "requestChecksumRequired": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Indicates an operation requires a checksum in its HTTP request."
                    }
                },
                "requestValidationModeMember": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines a top-level operation input member used to opt-in to response\nchecksum validation."
                    }
                },
                "responseAlgorithms": {
                    "target": "aws.protocols#ChecksumAlgorithmSet",
                    "traits": {
                        "smithy.api#documentation": "Defines the checksum algorithms clients should look for when performing\nHTTP response checksum validation."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates that an operation supports checksum validation.",
                "smithy.api#trait": {
                    "selector": "operation"
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.protocols#restJson1": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocols#HttpConfiguration"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#documentation": "A RESTful protocol that sends JSON in structured payloads.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel",
                        "smithy.api#http",
                        "smithy.api#httpError",
                        "smithy.api#httpHeader",
                        "smithy.api#httpLabel",
                        "smithy.api#httpPayload",
                        "smithy.api#httpPrefixHeaders",
                        "smithy.api#httpQuery",
                        "smithy.api#httpQueryParams",
                        "smithy.api#httpResponseCode",
                        "smithy.api#httpChecksumRequired",
                        "smithy.api#jsonName"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#restXml": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocols#HttpConfiguration"
                }
            ],
            "members": {
                "noErrorWrapping": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#deprecated": {},
                        "smithy.api#documentation": "Disables the serialization wrapping of error properties in an 'Error'\nXML element."
                    }
                }
            },
            "traits": {
                "smithy.api#deprecated": {},
                "smithy.api#documentation": "A RESTful protocol that sends XML in structured payloads.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel",
                        "smithy.api#http",
                        "smithy.api#httpError",
                        "smithy.api#httpHeader",
                        "smithy.api#httpLabel",
                        "smithy.api#httpPayload",
                        "smithy.api#httpPrefixHeaders",
                        "smithy.api#httpQuery",
                        "smithy.api#httpQueryParams",
                        "smithy.api#httpResponseCode",
                        "smithy.api#httpChecksumRequired",
                        "smithy.api#xmlAttribute",
                        "smithy.api#xmlFlattened",
                        "smithy.api#xmlName",
                        "smithy.api#xmlNamespace"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                },
                "smithy.api#traitValidators": {
                    "UnsupportedProtocolDocument": {
                        "selector": "~> member :test(> document)",
                        "message": "Document types are not supported with restXml"
                    }
                }
            }
        },
        "aws.protocoltests.config#AwsConfig": {
            "type": "structure",
            "members": {
                "clockTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#documentation": "This is the time that should be set during the course of the test.\nThis is important for things like signing where the clock time impacts\nthe result."
                    }
                },
                "scopedConfig": {
                    "target": "aws.protocoltests.config#ScopedConfig"
                }
            }
        },
        "aws.protocoltests.config#ClientConfig": {
            "type": "structure",
            "members": {
                "aws_access_key_id": {
                    "target": "smithy.api#String"
                },
                "aws_secret_access_key": {
                    "target": "smithy.api#String"
                },
                "aws_session_token": {
                    "target": "smithy.api#String"
                },
                "region": {
                    "target": "smithy.api#String"
                },
                "s3": {
                    "target": "aws.protocoltests.config#S3Config"
                },
                "retry_config": {
                    "target": "aws.protocoltests.config#RetryConfig"
                },
                "aws_profile": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration that is set on the constructed client."
            }
        },
        "aws.protocoltests.config#ConfigFile": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#documentation": "The top level key in a config file is the \"profile\", which is a string.\nIf a profile is not explicitly set, then implementations should check the\nprofile named \"default\"."
                }
            },
            "value": {
                "target": "aws.protocoltests.config#FileConfigSettings",
                "traits": {
                    "smithy.api#documentation": "The value is a collection of settings."
                }
            },
            "traits": {
                "smithy.api#documentation": "A shape representing a parsed config file, which is a map of profile names\nto configuration sets."
            }
        },
        "aws.protocoltests.config#EnvironmentConfig": {
            "type": "structure",
            "members": {
                "AWS_ACCESS_KEY_ID": {
                    "target": "smithy.api#String"
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "target": "smithy.api#String"
                },
                "AWS_DEFAULT_REGION": {
                    "target": "smithy.api#String"
                },
                "AWS_RETRY_MODE": {
                    "target": "aws.protocoltests.config#RetryMode"
                },
                "AWS_SESSION_TOKEN": {
                    "target": "smithy.api#String"
                },
                "AWS_PROFILE": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "Config settings that can be set as environment variables."
            }
        },
        "aws.protocoltests.config#FileConfigSettings": {
            "type": "structure",
            "members": {
                "aws_access_key_id": {
                    "target": "smithy.api#String"
                },
                "aws_secret_access_key": {
                    "target": "smithy.api#String"
                },
                "aws_session_token": {
                    "target": "smithy.api#String"
                },
                "region": {
                    "target": "smithy.api#String"
                },
                "s3": {
                    "target": "aws.protocoltests.config#S3Config"
                },
                "retry_mode": {
                    "target": "aws.protocoltests.config#RetryMode"
                },
                "max_attempts": {
                    "target": "smithy.api#Short"
                }
            },
            "traits": {
                "smithy.api#documentation": "Config settings that can be set in the AWS config / credentials file as\npart of a profile."
            }
        },
        "aws.protocoltests.config#OperationConfig": {
            "type": "structure",
            "members": {
                "s3": {
                    "target": "aws.protocoltests.config#S3Config"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration that is set for the scope of a single operation."
            }
        },
        "aws.protocoltests.config#RetryConfig": {
            "type": "structure",
            "members": {
                "mode": {
                    "target": "aws.protocoltests.config#RetryMode"
                },
                "max_attempts": {
                    "target": "smithy.api#Short"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration specific to retries."
            }
        },
        "aws.protocoltests.config#RetryMode": {
            "type": "enum",
            "members": {
                "LEGACY": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "legacy"
                    }
                },
                "STANDARD": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "standard"
                    }
                },
                "ADAPTIVE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "adaptive"
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Controls the strategy used for retries."
            }
        },
        "aws.protocoltests.config#S3AddressingStyle": {
            "type": "enum",
            "members": {
                "AUTO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "auto"
                    }
                },
                "PATH": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "path"
                    }
                },
                "VIRTUAL": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "virtual"
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Controls the S3 addressing bucket style."
            }
        },
        "aws.protocoltests.config#S3Config": {
            "type": "structure",
            "members": {
                "addressing_style": {
                    "target": "aws.protocoltests.config#S3AddressingStyle"
                },
                "use_accelerate_endpoint": {
                    "target": "smithy.api#Boolean"
                },
                "use_dualstack_endpoint": {
                    "target": "smithy.api#Boolean"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration specific to S3."
            }
        },
        "aws.protocoltests.config#ScopedConfig": {
            "type": "structure",
            "members": {
                "environment": {
                    "target": "aws.protocoltests.config#EnvironmentConfig"
                },
                "configFile": {
                    "target": "aws.protocoltests.config#ConfigFile"
                },
                "credentialsFile": {
                    "target": "aws.protocoltests.config#ConfigFile"
                },
                "client": {
                    "target": "aws.protocoltests.config#ClientConfig"
                },
                "operation": {
                    "target": "aws.protocoltests.config#OperationConfig"
                }
            },
            "traits": {
                "smithy.api#documentation": "Config settings that are scoped to different sources, such as environment\nvariables or the AWS config file."
            }
        },
        "aws.protocoltests.ec2#AwsEc2": {
            "type": "service",
            "version": "2020-01-08",
            "operations": [
                {
                    "target": "aws.protocoltests.ec2#DatetimeOffsets"
                },
                {
                    "target": "aws.protocoltests.ec2#EmptyInputAndEmptyOutput"
                },
                {
                    "target": "aws.protocoltests.ec2#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.ec2#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.ec2#FractionalSeconds"
                },
                {
                    "target": "aws.protocoltests.ec2#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.ec2#HostWithPathOperation"
                },
                {
                    "target": "aws.protocoltests.ec2#IgnoresWrappingXmlName"
                },
                {
                    "target": "aws.protocoltests.ec2#NestedStructures"
                },
                {
                    "target": "aws.protocoltests.ec2#NoInputAndOutput"
                },
                {
                    "target": "aws.protocoltests.ec2#PutWithContentEncoding"
                },
                {
                    "target": "aws.protocoltests.ec2#QueryIdempotencyTokenAutoFill"
                },
                {
                    "target": "aws.protocoltests.ec2#QueryLists"
                },
                {
                    "target": "aws.protocoltests.ec2#QueryTimestamps"
                },
                {
                    "target": "aws.protocoltests.ec2#RecursiveXmlShapes"
                },
                {
                    "target": "aws.protocoltests.ec2#SimpleInputParams"
                },
                {
                    "target": "aws.protocoltests.ec2#SimpleScalarXmlProperties"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlBlobs"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlEmptyBlobs"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlEmptyLists"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlEnums"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlIntEnums"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlLists"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlNamespaces"
                },
                {
                    "target": "aws.protocoltests.ec2#XmlTimestamps"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "EC2 Protocol"
                },
                "aws.auth#sigv4": {
                    "name": "ec2query"
                },
                "aws.protocols#ec2Query": {},
                "smithy.api#documentation": "An EC2 query service that sends query requests and XML responses.",
                "smithy.api#suppress": [
                    "SigV4Traits"
                ],
                "smithy.api#title": "Sample Ec2 Protocol Service",
                "smithy.api#xmlNamespace": {
                    "uri": "https://example.com/"
                }
            }
        },
        "aws.protocoltests.ec2#ComplexError": {
            "type": "structure",
            "members": {
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.ec2#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2ComplexError",
                        "protocol": "aws.protocols#ec2Query",
                        "params": {
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "body": "<Response>\n    <Errors>\n        <Error>\n            <Code>ComplexError</Code>\n            <Message>Hi</Message>\n            <TopLevel>Top level</TopLevel>\n            <Nested>\n                <Foo>bar</Foo>\n            </Nested>\n        </Error>\n    </Errors>\n    <RequestId>foo-id</RequestId>\n</Response>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.ec2#DatetimeOffsets": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#DatetimeOffsetsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2QueryDateTimeWithNegativeOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<DatetimeOffsetsResponse xmlns=\"https://example.com/\">\n    <datetime>2019-12-16T22:48:18-01:00</datetime>\n    <RequestId>requestid</RequestId>\n</DatetimeOffsetsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "datetime": 1576540098
                        }
                    },
                    {
                        "id": "Ec2QueryDateTimeWithPositiveOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<DatetimeOffsetsResponse xmlns=\"https://example.com/\">\n    <datetime>2019-12-17T00:48:18+01:00</datetime>\n    <RequestId>requestid</RequestId>\n</DatetimeOffsetsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "datetime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#DatetimeOffsetsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.ec2#EmptyInputAndEmptyOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#EmptyInputAndEmptyOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.ec2#EmptyInputAndEmptyOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response members.\n\nWhile this should be rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2QueryEmptyInputAndEmptyOutput",
                        "documentation": "Empty input serializes no extra query params",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=EmptyInputAndEmptyOutput&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2QueryEmptyInputAndEmptyOutput",
                        "documentation": "Empty output",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "body": "<EmptyInputAndEmptyOutputResponse xmlns=\"https://example.com/\">\n    <RequestId>requestid</RequestId>\n</EmptyInputAndEmptyOutputResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#EmptyInputAndEmptyOutputInput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.ec2#EmptyInputAndEmptyOutputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.ec2#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2QueryEndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=EndpointOperation&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#HostLabelInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2QueryEndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=EndpointWithHostLabelOperation&Version=2020-01-08&Label=bar",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#FractionalSeconds": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#FractionalSecondsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2QueryDateTimeWithFractionalSeconds",
                        "documentation": "Ensures that clients can correctly parse datetime timestamps with fractional seconds",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<FractionalSecondsResponse xmlns=\"https://example.com/\">\n    <datetime>2000-01-02T20:34:56.123Z</datetime>\n    <RequestId>requestid</RequestId>\n</FractionalSecondsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "datetime": 9.46845296123E8
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#FractionalSecondsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.ec2#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.ec2#ComplexError"
                },
                {
                    "target": "aws.protocoltests.ec2#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has three possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A BadRequest error.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2GreetingWithErrors",
                        "documentation": "Ensures that operations with errors successfully know how to deserialize the successful response",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "body": "<GreetingWithErrorsResponse xmlns=\"https://example.com/\">\n    <greeting>Hello</greeting>\n    <RequestId>requestid</RequestId>\n</GreetingWithErrorsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "params": {
                            "greeting": "Hello"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.ec2#HostLabelInput": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.ec2#HostWithPathOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2QueryHostWithPath",
                        "documentation": "Custom endpoints supplied by users can have paths",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/custom/",
                        "body": "Action=HostWithPathOperation&Version=2020-01-08",
                        "host": "example.com/custom",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#IgnoresWrappingXmlName": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#IgnoresWrappingXmlNameOutput"
            },
            "traits": {
                "smithy.api#documentation": "The xmlName trait on the output structure is ignored in AWS Query.\n\nThe wrapping element is always operation name + \"Response\".",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2IgnoresWrappingXmlName",
                        "documentation": "The xmlName trait on the output structure is ignored in the ec2 protocol",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<IgnoresWrappingXmlNameResponse xmlns=\"https://example.com/\">\n    <foo>bar</foo>\n    <RequestId>requestid</RequestId>\n</IgnoresWrappingXmlNameResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "foo": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#IgnoresWrappingXmlNameOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#xmlName": "IgnoreMe"
            }
        },
        "aws.protocoltests.ec2#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2InvalidGreetingError",
                        "documentation": "Parses simple XML errors",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 400,
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "body": "<Response>\n    <Errors>\n        <Error>\n            <Code>InvalidGreeting</Code>\n            <Message>Hi</Message>\n        </Error>\n    </Errors>\n    <RequestId>foo-id</RequestId>\n</Response>\n",
                        "bodyMediaType": "application/xml",
                        "params": {
                            "Message": "Hi"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#ListWithMemberNamespace": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlNamespace": {
                        "uri": "https://xml-member.example.com"
                    }
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "https://xml-list.example.com"
                }
            }
        },
        "aws.protocoltests.ec2#ListWithNamespace": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "https://xml-list.example.com"
                }
            }
        },
        "aws.protocoltests.ec2#ListWithXmlName": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.ec2#NestedStructWithList": {
            "type": "structure",
            "members": {
                "ListArg": {
                    "target": "aws.protocoltests.shared#StringList"
                }
            }
        },
        "aws.protocoltests.ec2#NestedStructures": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#NestedStructuresInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes nested and recursive structure members.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2NestedStructures",
                        "documentation": "Serializes nested structures using dots",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=NestedStructures&Version=2020-01-08&Nested.StringArg=foo&Nested.OtherArg=true&Nested.RecursiveArg.StringArg=baz",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Nested": {
                                "StringArg": "foo",
                                "OtherArg": true,
                                "RecursiveArg": {
                                    "StringArg": "baz"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#NestedStructuresInput": {
            "type": "structure",
            "members": {
                "Nested": {
                    "target": "aws.protocoltests.ec2#StructArg"
                }
            }
        },
        "aws.protocoltests.ec2#NoInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#NoInputAndOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request payload or response members.\n\nWhile this should be rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2QueryNoInputAndOutput",
                        "documentation": "No input serializes no payload",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=NoInputAndOutput&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2QueryNoInputAndOutput",
                        "documentation": "Empty output",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "body": "<NoInputAndOutputResponse xmlns=\"https://example.com/\">\n    <RequestId>requestid</RequestId>\n</NoInputAndOutputResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#NoInputAndOutputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.ec2#PutWithContentEncoding": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#PutWithContentEncodingInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#requestCompression": {
                    "encodings": [
                        "gzip"
                    ]
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SDKAppliedContentEncoding_ec2Query",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header.",
                        "protocol": "aws.protocols#ec2Query",
                        "params": {
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    },
                    {
                        "id": "SDKAppendsGzipAndIgnoresHttpProvidedEncoding_ec2Query",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header, and the\nuser-provided content-encoding is NOT in the Content-Encoding header since HTTP binding\ntraits are ignored in the ec2Query protocol.\n",
                        "protocol": "aws.protocols#ec2Query",
                        "params": {
                            "encoding": "custom",
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#PutWithContentEncodingInput": {
            "type": "structure",
            "members": {
                "encoding": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Encoding"
                    }
                },
                "data": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.ec2#QueryIdempotencyTokenAutoFill": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#QueryIdempotencyTokenAutoFillInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Automatically adds idempotency tokens.",
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2ProtocolIdempotencyTokenAutoFill",
                        "documentation": "Automatically adds idempotency token when not set",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=QueryIdempotencyTokenAutoFill&Version=2020-01-08&Token=00000000-0000-4000-8000-000000000000",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "appliesTo": "client"
                    },
                    {
                        "id": "Ec2ProtocolIdempotencyTokenAutoFillIsSet",
                        "documentation": "Uses the given idempotency token as-is",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=QueryIdempotencyTokenAutoFill&Version=2020-01-08&Token=00000000-0000-4000-8000-000000000123",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "token": "00000000-0000-4000-8000-000000000123"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#QueryIdempotencyTokenAutoFillInput": {
            "type": "structure",
            "members": {
                "token": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#idempotencyToken": {}
                    }
                }
            }
        },
        "aws.protocoltests.ec2#QueryLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#QueryListsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes simple and complex lists.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2Lists",
                        "documentation": "Serializes query lists. All EC2 lists are flattened.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&ListArg.1=foo&ListArg.2=bar&ListArg.3=baz&ComplexListArg.1.Hi=hello&ComplexListArg.2.Hi=hola",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArg": [
                                "foo",
                                "bar",
                                "baz"
                            ],
                            "ComplexListArg": [
                                {
                                    "hi": "hello"
                                },
                                {
                                    "hi": "hola"
                                }
                            ]
                        }
                    },
                    {
                        "id": "Ec2EmptyQueryLists",
                        "documentation": "Serializes empty query lists",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&ListArg=",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArg": []
                        }
                    },
                    {
                        "id": "Ec2ListArgWithXmlNameMember",
                        "documentation": "An xmlName trait in the member of a list has no effect on the list serialization.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&ListArgWithXmlNameMember.1=A&ListArgWithXmlNameMember.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArgWithXmlNameMember": [
                                "A",
                                "B"
                            ]
                        }
                    },
                    {
                        "id": "Ec2ListMemberWithXmlName",
                        "documentation": "Changes the name of the list using the xmlName trait",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&Hi.1=A&Hi.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArgWithXmlName": [
                                "A",
                                "B"
                            ]
                        }
                    },
                    {
                        "id": "Ec2ListNestedStructWithList",
                        "documentation": "Nested structure with a list member",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&NestedWithList.ListArg.1=A&NestedWithList.ListArg.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "NestedWithList": {
                                "ListArg": [
                                    "A",
                                    "B"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#QueryListsInput": {
            "type": "structure",
            "members": {
                "ListArg": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "ComplexListArg": {
                    "target": "aws.protocoltests.shared#GreetingList"
                },
                "ListArgWithXmlNameMember": {
                    "target": "aws.protocoltests.ec2#ListWithXmlName"
                },
                "ListArgWithXmlName": {
                    "target": "aws.protocoltests.ec2#ListWithXmlName",
                    "traits": {
                        "smithy.api#xmlName": "Hi"
                    }
                },
                "NestedWithList": {
                    "target": "aws.protocoltests.ec2#NestedStructWithList"
                }
            }
        },
        "aws.protocoltests.ec2#QueryTimestamps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#QueryTimestampsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes timestamps.\n\n1. Timestamps are serialized as RFC 3339 date-time values by default.\n2. A timestampFormat trait on a member changes the format.\n3. A timestampFormat trait on the shape targeted by the member changes the format.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2TimestampsInput",
                        "documentation": "Serializes timestamps",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=QueryTimestamps&Version=2020-01-08&NormalFormat=2015-01-25T08%3A00%3A00Z&EpochMember=1422172800&EpochTarget=1422172800",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "normalFormat": 1422172800,
                            "epochMember": 1422172800,
                            "epochTarget": 1422172800
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#QueryTimestampsInput": {
            "type": "structure",
            "members": {
                "normalFormat": {
                    "target": "smithy.api#Timestamp"
                },
                "epochMember": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "epochTarget": {
                    "target": "aws.protocoltests.shared#EpochSeconds"
                }
            }
        },
        "aws.protocoltests.ec2#RecursiveXmlShapes": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#RecursiveXmlShapesOutput"
            },
            "traits": {
                "smithy.api#documentation": "Recursive shapes",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2RecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<RecursiveXmlShapesResponse xmlns=\"https://example.com/\">\n    <nested>\n        <foo>Foo1</foo>\n        <nested>\n            <bar>Bar1</bar>\n            <recursiveMember>\n                <foo>Foo2</foo>\n                <nested>\n                    <bar>Bar2</bar>\n                </nested>\n            </recursiveMember>\n        </nested>\n    </nested>\n    <RequestId>requestid</RequestId>\n</RecursiveXmlShapesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#RecursiveXmlShapesOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.ec2#RecursiveXmlShapesOutputNested1"
                }
            }
        },
        "aws.protocoltests.ec2#RecursiveXmlShapesOutputNested1": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                },
                "nested": {
                    "target": "aws.protocoltests.ec2#RecursiveXmlShapesOutputNested2"
                }
            }
        },
        "aws.protocoltests.ec2#RecursiveXmlShapesOutputNested2": {
            "type": "structure",
            "members": {
                "bar": {
                    "target": "smithy.api#String"
                },
                "recursiveMember": {
                    "target": "aws.protocoltests.ec2#RecursiveXmlShapesOutputNested1"
                }
            }
        },
        "aws.protocoltests.ec2#RenamedListMembers": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.ec2#SimpleInputParams": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.ec2#SimpleInputParamsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes strings, numbers, and boolean values.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "Ec2SimpleInputParamsStrings",
                        "documentation": "Serializes strings",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Foo=val1&Bar=val2",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Foo": "val1",
                            "Bar": "val2"
                        }
                    },
                    {
                        "id": "Ec2SimpleInputParamsStringAndBooleanTrue",
                        "documentation": "Serializes booleans that are true",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Foo=val1&Baz=true",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Foo": "val1",
                            "Baz": true
                        }
                    },
                    {
                        "id": "Ec2SimpleInputParamsStringsAndBooleanFalse",
                        "documentation": "Serializes booleans that are false",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Baz=false",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Baz": false
                        }
                    },
                    {
                        "id": "Ec2SimpleInputParamsInteger",
                        "documentation": "Serializes integers",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Bam=10",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Bam": 10
                        }
                    },
                    {
                        "id": "Ec2SimpleInputParamsFloat",
                        "documentation": "Serializes floats",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Boo=10.8",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Boo": 10.8
                        }
                    },
                    {
                        "id": "Ec2SimpleInputParamsBlob",
                        "documentation": "Blobs are base64 encoded in the query string",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Qux=dmFsdWU%3D",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Qux": "value"
                        }
                    },
                    {
                        "id": "Ec2Enums",
                        "documentation": "Serializes enums in the query string",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FooEnum=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "FooEnum": "Foo"
                        }
                    },
                    {
                        "id": "Ec2Query",
                        "documentation": "Serializes query using ec2QueryName trait.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&HasQueryName=Hi",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "HasQueryName": "Hi"
                        }
                    },
                    {
                        "id": "Ec2QueryIsPreferred",
                        "documentation": "ec2QueryName trait is preferred over xmlName.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&HasQueryAndXmlName=Hi",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "HasQueryAndXmlName": "Hi"
                        }
                    },
                    {
                        "id": "Ec2XmlNameIsUppercased",
                        "documentation": "xmlName is used with the ec2 protocol, but the first character is uppercased",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&UsesXmlName=Hi",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "UsesXmlName": "Hi"
                        }
                    },
                    {
                        "id": "Ec2QuerySupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FloatValue=NaN&Boo=NaN",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "FloatValue": "NaN",
                            "Boo": "NaN"
                        }
                    },
                    {
                        "id": "Ec2QuerySupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FloatValue=Infinity&Boo=Infinity",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "FloatValue": "Infinity",
                            "Boo": "Infinity"
                        }
                    },
                    {
                        "id": "Ec2QuerySupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#ec2Query",
                        "method": "POST",
                        "uri": "/",
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FloatValue=-Infinity&Boo=-Infinity",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "FloatValue": "-Infinity",
                            "Boo": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#SimpleInputParamsInput": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String"
                },
                "Bar": {
                    "target": "smithy.api#String"
                },
                "Baz": {
                    "target": "smithy.api#Boolean"
                },
                "Bam": {
                    "target": "smithy.api#Integer"
                },
                "FloatValue": {
                    "target": "smithy.api#Float"
                },
                "Boo": {
                    "target": "smithy.api#Double"
                },
                "Qux": {
                    "target": "smithy.api#Blob"
                },
                "FooEnum": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "HasQueryName": {
                    "target": "smithy.api#String",
                    "traits": {
                        "aws.protocols#ec2QueryName": "HasQueryName"
                    }
                },
                "HasQueryAndXmlName": {
                    "target": "smithy.api#String",
                    "traits": {
                        "aws.protocols#ec2QueryName": "HasQueryAndXmlName",
                        "smithy.api#xmlName": "hasQueryAndXmlName"
                    }
                },
                "UsesXmlName": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "usesXmlName"
                    }
                }
            }
        },
        "aws.protocoltests.ec2#SimpleScalarXmlProperties": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#SimpleScalarXmlPropertiesOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2SimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <stringValue>string</stringValue>\n    <emptyStringValue/>\n    <trueBooleanValue>true</trueBooleanValue>\n    <falseBooleanValue>false</falseBooleanValue>\n    <byteValue>1</byteValue>\n    <shortValue>2</shortValue>\n    <integerValue>3</integerValue>\n    <longValue>4</longValue>\n    <floatValue>5.5</floatValue>\n    <DoubleDribble>6.5</DoubleDribble>\n    <RequestId>requestid</RequestId>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "stringValue": "string",
                            "emptyStringValue": "",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "Ec2QuerySupportsNaNFloatOutputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <floatValue>NaN</floatValue>\n    <DoubleDribble>NaN</DoubleDribble>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "Ec2QuerySupportsInfinityFloatOutputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <floatValue>Infinity</floatValue>\n    <DoubleDribble>Infinity</DoubleDribble>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "Ec2QuerySupportsNegativeInfinityFloatOutputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <floatValue>-Infinity</floatValue>\n    <DoubleDribble>-Infinity</DoubleDribble>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#SimpleScalarXmlPropertiesOutput": {
            "type": "structure",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String",
                    "traits": {
                        "aws.protocols#ec2QueryName": "IgnoreMe"
                    }
                },
                "emptyStringValue": {
                    "target": "smithy.api#String"
                },
                "trueBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "falseBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#xmlName": "DoubleDribble"
                    }
                }
            }
        },
        "aws.protocoltests.ec2#StructArg": {
            "type": "structure",
            "members": {
                "StringArg": {
                    "target": "smithy.api#String"
                },
                "OtherArg": {
                    "target": "smithy.api#Boolean"
                },
                "RecursiveArg": {
                    "target": "aws.protocoltests.ec2#StructArg"
                }
            }
        },
        "aws.protocoltests.ec2#StructureList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.ec2#StructureListMember",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.ec2#StructureListMember": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "value"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "other"
                    }
                }
            }
        },
        "aws.protocoltests.ec2#XmlBlobs": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlBlobsOutput"
            },
            "traits": {
                "smithy.api#documentation": "Blobs are base64 encoded",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlBlobsResponse xmlns=\"https://example.com/\">\n    <data>dmFsdWU=</data>\n    <RequestId>requestid</RequestId>\n</XmlBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlBlobsOutput": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            }
        },
        "aws.protocoltests.ec2#XmlEmptyBlobs": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlBlobsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlEmptyBlobs",
                        "documentation": "Empty blobs are deserialized as empty string",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlEmptyBlobsResponse xmlns=\"https://example.com/\">\n    <data></data>\n    <RequestId>requestid</RequestId>\n</XmlEmptyBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "data": ""
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "Ec2XmlEmptySelfClosedBlobs",
                        "documentation": "Empty self closed blobs are deserialized as empty string",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlEmptyBlobsResponse xmlns=\"https://example.com/\">\n    <data/>\n    <RequestId>requestid</RequestId>\n</XmlEmptyBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "data": ""
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlEmptyLists": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlListsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlEmptyLists",
                        "documentation": "Deserializes empty XML lists",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlEmptyListsResponse xmlns=\"https://example.com/\">\n  <stringList/>\n  <stringSet></stringSet>\n</XmlEmptyListsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "stringList": [],
                            "stringSet": []
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlEnums": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlEnumsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlEnumsResponse xmlns=\"https://example.com/\">\n    <fooEnum1>Foo</fooEnum1>\n    <fooEnum2>0</fooEnum2>\n    <fooEnum3>1</fooEnum3>\n    <fooEnumList>\n        <member>Foo</member>\n        <member>0</member>\n    </fooEnumList>\n    <fooEnumSet>\n        <member>Foo</member>\n        <member>0</member>\n    </fooEnumSet>\n    <fooEnumMap>\n        <entry>\n            <key>hi</key>\n            <value>Foo</value>\n        </entry>\n        <entry>\n            <key>zero</key>\n            <value>0</value>\n        </entry>\n    </fooEnumMap>\n    <RequestId>requestid</RequestId>\n</XmlEnumsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlEnumsOutput": {
            "type": "structure",
            "members": {
                "fooEnum1": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum2": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum3": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "fooEnumSet": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "fooEnumMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap"
                }
            }
        },
        "aws.protocoltests.ec2#XmlIntEnums": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlIntEnumsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes intEnums as top level properties, in lists, sets, and maps.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlIntEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlIntEnumsResponse xmlns=\"https://example.com/\">\n    <intEnum1>1</intEnum1>\n    <intEnum2>2</intEnum2>\n    <intEnum3>3</intEnum3>\n    <intEnumList>\n        <member>1</member>\n        <member>2</member>\n    </intEnumList>\n    <intEnumSet>\n        <member>1</member>\n        <member>2</member>\n    </intEnumSet>\n    <intEnumMap>\n        <entry>\n            <key>a</key>\n            <value>1</value>\n        </entry>\n        <entry>\n            <key>b</key>\n            <value>2</value>\n        </entry>\n    </intEnumMap>\n    <RequestId>requestid</RequestId>\n</XmlIntEnumsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "intEnum1": 1,
                            "intEnum2": 2,
                            "intEnum3": 3,
                            "intEnumList": [
                                1,
                                2
                            ],
                            "intEnumSet": [
                                1,
                                2
                            ],
                            "intEnumMap": {
                                "a": 1,
                                "b": 2
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlIntEnumsOutput": {
            "type": "structure",
            "members": {
                "intEnum1": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum2": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum3": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "intEnumSet": {
                    "target": "aws.protocoltests.shared#IntegerEnumSet"
                },
                "intEnumMap": {
                    "target": "aws.protocoltests.shared#IntegerEnumMap"
                }
            }
        },
        "aws.protocoltests.ec2#XmlLists": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlListsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This test case serializes XML lists for the following cases for both\ninput and output:\n\n1. Normal XML lists.\n2. Normal XML sets.\n3. XML lists of lists.\n4. XML lists with @xmlName on its members\n5. Flattened XML lists.\n6. Flattened XML lists with @xmlName.\n7. Flattened XML lists with @xmlNamespace.\n8. Lists of structures.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlLists",
                        "documentation": "Tests for XML list serialization",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlListsResponse xmlns=\"https://example.com/\">\n    <stringList>\n        <member>foo</member>\n        <member>bar</member>\n    </stringList>\n    <stringSet>\n        <member>foo</member>\n        <member>bar</member>\n    </stringSet>\n    <integerList>\n        <member>1</member>\n        <member>2</member>\n    </integerList>\n    <booleanList>\n        <member>true</member>\n        <member>false</member>\n    </booleanList>\n    <timestampList>\n        <member>2014-04-29T18:30:38Z</member>\n        <member>2014-04-29T18:30:38Z</member>\n    </timestampList>\n    <enumList>\n        <member>Foo</member>\n        <member>0</member>\n    </enumList>\n    <intEnumList>\n        <member>1</member>\n        <member>2</member>\n    </intEnumList>\n    <nestedStringList>\n        <member>\n            <member>foo</member>\n            <member>bar</member>\n        </member>\n        <member>\n            <member>baz</member>\n            <member>qux</member>\n        </member>\n    </nestedStringList>\n    <renamed>\n        <item>foo</item>\n        <item>bar</item>\n    </renamed>\n    <flattenedList>hi</flattenedList>\n    <flattenedList>bye</flattenedList>\n    <customName>yep</customName>\n    <customName>nope</customName>\n    <flattenedListWithMemberNamespace xmlns=\"https://xml-member.example.com\">a</flattenedListWithMemberNamespace>\n    <flattenedListWithMemberNamespace xmlns=\"https://xml-member.example.com\">b</flattenedListWithMemberNamespace>\n    <flattenedListWithNamespace>a</flattenedListWithNamespace>\n    <flattenedListWithNamespace>b</flattenedListWithNamespace>\n    <myStructureList>\n        <item>\n            <value>1</value>\n            <other>2</other>\n        </item>\n        <item>\n            <value>3</value>\n            <other>4</other>\n        </item>\n    </myStructureList>\n    <RequestId>requestid</RequestId>\n</XmlListsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "intEnumList": [
                                1,
                                2
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "renamedListMembers": [
                                "foo",
                                "bar"
                            ],
                            "flattenedList": [
                                "hi",
                                "bye"
                            ],
                            "flattenedList2": [
                                "yep",
                                "nope"
                            ],
                            "flattenedListWithMemberNamespace": [
                                "a",
                                "b"
                            ],
                            "flattenedListWithNamespace": [
                                "a",
                                "b"
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlListsOutput": {
            "type": "structure",
            "members": {
                "stringList": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "stringSet": {
                    "target": "aws.protocoltests.shared#StringSet"
                },
                "integerList": {
                    "target": "aws.protocoltests.shared#IntegerList"
                },
                "booleanList": {
                    "target": "aws.protocoltests.shared#BooleanList"
                },
                "timestampList": {
                    "target": "aws.protocoltests.shared#TimestampList"
                },
                "enumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "nestedStringList": {
                    "target": "aws.protocoltests.shared#NestedStringList"
                },
                "renamedListMembers": {
                    "target": "aws.protocoltests.ec2#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlName": "renamed"
                    }
                },
                "flattenedList": {
                    "target": "aws.protocoltests.ec2#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "flattenedList2": {
                    "target": "aws.protocoltests.ec2#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "customName"
                    }
                },
                "flattenedListWithMemberNamespace": {
                    "target": "aws.protocoltests.ec2#ListWithMemberNamespace",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "flattenedListWithNamespace": {
                    "target": "aws.protocoltests.ec2#ListWithNamespace",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "structureList": {
                    "target": "aws.protocoltests.ec2#StructureList",
                    "traits": {
                        "smithy.api#xmlName": "myStructureList"
                    }
                }
            }
        },
        "aws.protocoltests.ec2#XmlNamespaceNested": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "uri": "http://baz.com",
                            "prefix": "baz"
                        }
                    }
                },
                "values": {
                    "target": "aws.protocoltests.ec2#XmlNamespacedList",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "uri": "http://qux.com"
                        }
                    }
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com"
                }
            }
        },
        "aws.protocoltests.ec2#XmlNamespacedList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlNamespace": {
                        "uri": "http://bux.com"
                    }
                }
            }
        },
        "aws.protocoltests.ec2#XmlNamespaces": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlNamespacesOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlNamespaces",
                        "documentation": "Serializes XML namespaces",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlNamespacesResponse xmlns=\"https://example.com/\">\n    <nested>\n        <foo xmlns:baz=\"http://baz.com\">Foo</foo>\n        <values xmlns=\"http://qux.com\">\n            <member xmlns=\"http://bux.com\">Bar</member>\n            <member xmlns=\"http://bux.com\">Baz</member>\n        </values>\n    </nested>\n    <RequestId>requestid</RequestId>\n</XmlNamespacesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo",
                                "values": [
                                    "Bar",
                                    "Baz"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlNamespacesOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.ec2#XmlNamespaceNested"
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com"
                }
            }
        },
        "aws.protocoltests.ec2#XmlTimestamps": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.ec2#XmlTimestampsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This tests how timestamps are serialized, including using the\ndefault format of date-time and various @timestampFormat trait\nvalues.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "Ec2XmlTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <normal>2014-04-29T18:30:38Z</normal>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "Ec2XmlTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <dateTime>2014-04-29T18:30:38Z</dateTime>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "Ec2XmlTimestampsWithDateTimeOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of date-time on the target shape works like normal timestamps",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <dateTimeOnTarget>2014-04-29T18:30:38Z</dateTimeOnTarget>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "dateTimeOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "Ec2XmlTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <epochSeconds>1398796238</epochSeconds>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "Ec2XmlTimestampsWithEpochSecondsOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds on the target shape works",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <epochSecondsOnTarget>1398796238</epochSecondsOnTarget>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "epochSecondsOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "Ec2XmlTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <httpDate>Tue, 29 Apr 2014 18:30:38 GMT</httpDate>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    },
                    {
                        "id": "Ec2XmlTimestampsWithHttpDateOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of http-date on the target shape works",
                        "protocol": "aws.protocols#ec2Query",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <httpDateOnTarget>Tue, 29 Apr 2014 18:30:38 GMT</httpDateOnTarget>\n    <RequestId>requestid</RequestId>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml;charset=UTF-8"
                        },
                        "params": {
                            "httpDateOnTarget": 1398796238
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.ec2#XmlTimestampsOutput": {
            "type": "structure",
            "members": {
                "normal": {
                    "target": "smithy.api#Timestamp"
                },
                "dateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "dateTimeOnTarget": {
                    "target": "aws.protocoltests.shared#DateTime"
                },
                "epochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "epochSecondsOnTarget": {
                    "target": "aws.protocoltests.shared#EpochSeconds"
                },
                "httpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "httpDateOnTarget": {
                    "target": "aws.protocoltests.shared#HttpDate"
                }
            }
        },
        "aws.protocoltests.json#ComplexError": {
            "type": "structure",
            "members": {
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.json#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11ComplexError",
                        "documentation": "Parses a complex error with no message member",
                        "protocol": "aws.protocols#awsJson1_1",
                        "params": {
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"__type\": \"ComplexError\",\n    \"TopLevel\": \"Top level\",\n    \"Nested\": {\n        \"Foo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "AwsJson11EmptyComplexError",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"__type\": \"ComplexError\"\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.json#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "Fooooo"
                    }
                }
            }
        },
        "aws.protocoltests.json#DatetimeOffsets": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.json#DatetimeOffsetsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11DateTimeWithNegativeOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "      {\n          \"datetime\": \"2019-12-16T22:48:18-01:00\"\n      }\n",
                        "params": {
                            "datetime": 1576540098
                        },
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11DateTimeWithPositiveOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "      {\n          \"datetime\": \"2019-12-17T00:48:18+01:00\"\n      }\n",
                        "params": {
                            "datetime": 1576540098
                        },
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.json#DatetimeOffsetsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.json#Document": {
            "type": "document"
        },
        "aws.protocoltests.json#EmptyOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "sends_requests_to_slash",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Sends requests to /",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.EmptyOperation"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "includes_x_amz_target_and_content_type",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Includes X-Amz-Target header and Content-Type",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.EmptyOperation"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "json_1_1_client_sends_empty_payload_for_no_input_shape",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Clients must always send an empty JSON object payload for\noperations with no input (that is, `{}`). While AWS service\nimplementations support requests with no payload or requests\nthat send `{}`, always sending `{}` from the client is\npreferred for forward compatibility in case input is ever\nadded to an operation.",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.EmptyOperation"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "json_1_1_service_supports_empty_payload_for_no_input_shape",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Service implementations must support no payload or an empty\nobject payload for operations that define no input. However,\ndespite the lack of a payload, a Content-Type header is still\nrequired in order for the service to properly detect the\nprotocol.",
                        "body": "",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.EmptyOperation"
                        },
                        "method": "POST",
                        "uri": "/",
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "handles_empty_output_shape",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "When no output is defined, the service is expected to return\nan empty payload, however, client must ignore a JSON payload\nif one is returned. This ensures that if output is added later,\nthen it will not break the client.",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "code": 200,
                        "appliesTo": "client"
                    },
                    {
                        "id": "handles_unexpected_json_output",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "This client-only test builds on handles_empty_output_shape,\nby including unexpected fields in the JSON. A client\nneeds to ignore JSON output that is empty or that contains\nJSON object data.",
                        "body": "{\n    \"foo\": true\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "code": 200,
                        "appliesTo": "client"
                    },
                    {
                        "id": "json_1_1_service_responds_with_no_payload",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "When no output is defined, the service is expected to return\nan empty payload. Despite the lack of a payload, the service\nis expected to always send a Content-Type header. Clients must\nhandle cases where a service returns a JSON object and where\na service returns no JSON at all.",
                        "body": "",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.json#EmptyStruct": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.json#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11EndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.EndpointOperation"
                        },
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "aws.protocoltests.json#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#HostLabelInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11EndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\"label\": \"bar\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.EndpointWithHostLabelOperation"
                        },
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#ErrorWithMembers": {
            "type": "structure",
            "members": {
                "Code": {
                    "target": "smithy.api#String"
                },
                "ComplexData": {
                    "target": "aws.protocoltests.json#KitchenSink"
                },
                "IntegerField": {
                    "target": "smithy.api#Integer"
                },
                "ListField": {
                    "target": "aws.protocoltests.json#ListOfStrings"
                },
                "MapField": {
                    "target": "aws.protocoltests.json#MapOfStrings"
                },
                "Message": {
                    "target": "smithy.api#String"
                },
                "StringField": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "abc"
                    }
                }
            },
            "traits": {
                "smithy.api#error": "client"
            }
        },
        "aws.protocoltests.json#ErrorWithoutMembers": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#error": "server"
            }
        },
        "aws.protocoltests.json#FooError": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "This error has test cases that test some of the dark corners of Amazon service\nframework history. It should only be implemented by clients.",
                "smithy.api#error": "server",
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11FooErrorUsingXAmznErrorType",
                        "documentation": "Serializes the X-Amzn-ErrorType header. For an example service, see Amazon EKS.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorUsingXAmznErrorTypeWithUri",
                        "documentation": "Some X-Amzn-Errortype headers contain URLs. Clients need to split the URL on ':' and take only the first half of the string. For example, 'ValidationException:http://internal.amazon.com/coral/com.amazon.coral.validate/'\nis to be interpreted as 'ValidationException'.\n\nFor an example service see Amazon Polly.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorUsingXAmznErrorTypeWithUriAndNamespace",
                        "documentation": "X-Amzn-Errortype might contain a URL and a namespace. Client should extract only the shape name. This is a pathalogical case that might not actually happen in any deployed AWS service.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "aws.protocoltests.restjson#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorUsingCode",
                        "documentation": "This example uses the 'code' property in the output rather than X-Amzn-Errortype. Some services do this though it's preferable to send the X-Amzn-Errortype. Client implementations must first check for the X-Amzn-Errortype and then check for a top-level 'code' property.\n\nFor example service see Amazon S3 Glacier.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"code\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorUsingCodeAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.restjson#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorUsingCodeUriAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.restjson#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorWithDunderType",
                        "documentation": "Some services serialize errors using __type.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"__type\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorWithDunderTypeAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.restjson#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11FooErrorWithDunderTypeUriAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.restjson#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.json#FractionalSeconds": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.json#FractionalSecondsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11DateTimeWithFractionalSeconds",
                        "documentation": "Ensures that clients can correctly parse datetime timestamps with fractional seconds",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "      {\n          \"datetime\": \"2000-01-02T20:34:56.123Z\"\n      }\n",
                        "params": {
                            "datetime": 9.46845296123E8
                        },
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.json#FractionalSecondsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.json#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.json#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.json#ComplexError"
                },
                {
                    "target": "aws.protocoltests.json#FooError"
                },
                {
                    "target": "aws.protocoltests.json#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has three possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A ComplexError error.\n\nImplementations must be able to successfully take a response and\nproperly deserialize successful and error responses.",
                "smithy.api#idempotent": {}
            }
        },
        "aws.protocoltests.json#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.json#HostLabelInput": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.json#HostWithPathOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11HostWithPath",
                        "documentation": "Custom endpoints supplied by users can have paths",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/custom/",
                        "body": "{}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.HostWithPathOperation"
                        },
                        "host": "example.com/custom",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.json#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11InvalidGreetingError",
                        "documentation": "Parses simple JSON errors",
                        "protocol": "aws.protocols#awsJson1_1",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "body": "{\n    \"__type\": \"InvalidGreeting\",\n    \"Message\": \"Hi\"\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.json#JsonEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#JsonEnumsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.json#JsonEnumsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11Enums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"fooEnum1\": \"Foo\",\n    \"fooEnum2\": \"0\",\n    \"fooEnum3\": \"1\",\n    \"fooEnumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumSet\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumMap\": {\n        \"hi\": \"Foo\",\n        \"zero\": \"0\"\n    }\n}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonEnums"
                        },
                        "bodyMediaType": "application/json",
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11Enums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"fooEnum1\": \"Foo\",\n    \"fooEnum2\": \"0\",\n    \"fooEnum3\": \"1\",\n    \"fooEnumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumSet\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumMap\": {\n        \"hi\": \"Foo\",\n        \"zero\": \"0\"\n    }\n}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "bodyMediaType": "application/json",
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#JsonEnumsInputOutput": {
            "type": "structure",
            "members": {
                "fooEnum1": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum2": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum3": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "fooEnumSet": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "fooEnumMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap"
                }
            }
        },
        "aws.protocoltests.json#JsonIntEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#JsonIntEnumsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.json#JsonIntEnumsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes intEnums as top level properties, in lists, sets, and maps.",
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11IntEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"intEnum1\": 1,\n    \"intEnum2\": 2,\n    \"intEnum3\": 3,\n    \"intEnumList\": [\n        1,\n        2\n    ],\n    \"intEnumSet\": [\n        1,\n        2\n    ],\n    \"intEnumMap\": {\n        \"a\": 1,\n        \"b\": 2\n    }\n}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonIntEnums"
                        },
                        "bodyMediaType": "application/json",
                        "params": {
                            "intEnum1": 1,
                            "intEnum2": 2,
                            "intEnum3": 3,
                            "intEnumList": [
                                1,
                                2
                            ],
                            "intEnumSet": [
                                1,
                                2
                            ],
                            "intEnumMap": {
                                "a": 1,
                                "b": 2
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11IntEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"intEnum1\": 1,\n    \"intEnum2\": 2,\n    \"intEnum3\": 3,\n    \"intEnumList\": [\n        1,\n        2\n    ],\n    \"intEnumSet\": [\n        1,\n        2\n    ],\n    \"intEnumMap\": {\n        \"a\": 1,\n        \"b\": 2\n    }\n}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonIntEnums"
                        },
                        "bodyMediaType": "application/json",
                        "params": {
                            "intEnum1": 1,
                            "intEnum2": 2,
                            "intEnum3": 3,
                            "intEnumList": [
                                1,
                                2
                            ],
                            "intEnumSet": [
                                1,
                                2
                            ],
                            "intEnumMap": {
                                "a": 1,
                                "b": 2
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#JsonIntEnumsInputOutput": {
            "type": "structure",
            "members": {
                "intEnum1": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum2": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum3": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "intEnumSet": {
                    "target": "aws.protocoltests.shared#IntegerEnumSet"
                },
                "intEnumMap": {
                    "target": "aws.protocoltests.shared#IntegerEnumMap"
                }
            }
        },
        "aws.protocoltests.json#JsonProtocol": {
            "type": "service",
            "version": "2018-01-01",
            "operations": [
                {
                    "target": "aws.protocoltests.json#DatetimeOffsets"
                },
                {
                    "target": "aws.protocoltests.json#EmptyOperation"
                },
                {
                    "target": "aws.protocoltests.json#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.json#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.json#FractionalSeconds"
                },
                {
                    "target": "aws.protocoltests.json#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.json#HostWithPathOperation"
                },
                {
                    "target": "aws.protocoltests.json#JsonEnums"
                },
                {
                    "target": "aws.protocoltests.json#JsonUnions"
                },
                {
                    "target": "aws.protocoltests.json#KitchenSinkOperation"
                },
                {
                    "target": "aws.protocoltests.json#NullOperation"
                },
                {
                    "target": "aws.protocoltests.json#OperationWithOptionalInputOutput"
                },
                {
                    "target": "aws.protocoltests.json#PutAndGetInlineDocuments"
                },
                {
                    "target": "aws.protocoltests.json#PutWithContentEncoding"
                },
                {
                    "target": "aws.protocoltests.json#SimpleScalarProperties"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Json Protocol",
                    "arnNamespace": "jsonprotocol",
                    "cloudFormationName": "JsonProtocol",
                    "cloudTrailEventSource": "jsonprotocol.amazonaws.com"
                },
                "aws.auth#sigv4": {
                    "name": "jsonprotocol"
                },
                "aws.protocols#awsJson1_1": {},
                "smithy.api#title": "Sample Json 1.1 Protocol Service"
            }
        },
        "aws.protocoltests.json#JsonUnions": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#UnionInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.json#UnionInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation uses unions for inputs and outputs.",
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11SerializeStringUnionValue",
                        "documentation": "Serializes a string union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeBooleanUnionValue",
                        "documentation": "Serializes a boolean union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeNumberUnionValue",
                        "documentation": "Serializes a number union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeBlobUnionValue",
                        "documentation": "Serializes a blob union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeTimestampUnionValue",
                        "documentation": "Serializes a timestamp union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeEnumUnionValue",
                        "documentation": "Serializes an enum union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeListUnionValue",
                        "documentation": "Serializes a list union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeMapUnionValue",
                        "documentation": "Serializes a map union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson11SerializeStructureUnionValue",
                        "documentation": "Serializes a structure union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11DeserializeStringUnionValue",
                        "documentation": "Deserializes a string union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeBooleanUnionValue",
                        "documentation": "Deserializes a boolean union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeNumberUnionValue",
                        "documentation": "Deserializes a number union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeBlobUnionValue",
                        "documentation": "Deserializes a blob union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeTimestampUnionValue",
                        "documentation": "Deserializes a timestamp union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeEnumUnionValue",
                        "documentation": "Deserializes an enum union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeListUnionValue",
                        "documentation": "Deserializes a list union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeMapUnionValue",
                        "documentation": "Deserializes a map union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeStructureUnionValue",
                        "documentation": "Deserializes a structure union value",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson11DeserializeIgnoreType",
                        "appliesTo": "client",
                        "documentation": "Ignores an unrecognized __type property",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"__type\": \"aws.protocoltests.json10#MyUnion\",\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#JsonValue": {
            "type": "string",
            "traits": {
                "smithy.api#mediaType": "application/json"
            }
        },
        "aws.protocoltests.json#KitchenSink": {
            "type": "structure",
            "members": {
                "Blob": {
                    "target": "smithy.api#Blob"
                },
                "Boolean": {
                    "target": "smithy.api#Boolean"
                },
                "Double": {
                    "target": "smithy.api#Double"
                },
                "EmptyStruct": {
                    "target": "aws.protocoltests.json#EmptyStruct"
                },
                "Float": {
                    "target": "smithy.api#Float"
                },
                "HttpdateTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "Integer": {
                    "target": "smithy.api#Integer"
                },
                "Iso8601Timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "JsonValue": {
                    "target": "aws.protocoltests.json#JsonValue"
                },
                "ListOfLists": {
                    "target": "aws.protocoltests.json#ListOfListOfStrings"
                },
                "ListOfMapsOfStrings": {
                    "target": "aws.protocoltests.json#ListOfMapsOfStrings"
                },
                "ListOfStrings": {
                    "target": "aws.protocoltests.json#ListOfStrings"
                },
                "ListOfStructs": {
                    "target": "aws.protocoltests.json#ListOfStructs"
                },
                "Long": {
                    "target": "smithy.api#Long"
                },
                "MapOfListsOfStrings": {
                    "target": "aws.protocoltests.json#MapOfListsOfStrings"
                },
                "MapOfMaps": {
                    "target": "aws.protocoltests.json#MapOfMapOfStrings"
                },
                "MapOfStrings": {
                    "target": "aws.protocoltests.json#MapOfStrings"
                },
                "MapOfStructs": {
                    "target": "aws.protocoltests.json#MapOfStructs"
                },
                "RecursiveList": {
                    "target": "aws.protocoltests.json#ListOfKitchenSinks"
                },
                "RecursiveMap": {
                    "target": "aws.protocoltests.json#MapOfKitchenSinks"
                },
                "RecursiveStruct": {
                    "target": "aws.protocoltests.json#KitchenSink"
                },
                "SimpleStruct": {
                    "target": "aws.protocoltests.json#SimpleStruct"
                },
                "String": {
                    "target": "smithy.api#String"
                },
                "StructWithJsonName": {
                    "target": "aws.protocoltests.json#StructWithJsonName"
                },
                "Timestamp": {
                    "target": "smithy.api#Timestamp"
                },
                "UnixTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.json#KitchenSinkOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#KitchenSink"
            },
            "output": {
                "target": "aws.protocoltests.json#KitchenSink"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.json#ErrorWithMembers"
                },
                {
                    "target": "aws.protocoltests.json#ErrorWithoutMembers"
                }
            ],
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "serializes_string_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes string shapes",
                        "body": "{\"String\":\"abc xyz\"}",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "bodyMediaType": "application/json",
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "String": "abc xyz"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_string_shapes_with_jsonvalue_trait",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes string shapes with jsonvalue trait",
                        "body": "{\"JsonValue\":\"{\\\"string\\\":\\\"value\\\",\\\"number\\\":1234.5,\\\"boolTrue\\\":true,\\\"boolFalse\\\":false,\\\"array\\\":[1,2,3,4],\\\"object\\\":{\\\"key\\\":\\\"value\\\"},\\\"null\\\":null}\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "JsonValue": "{\"string\":\"value\",\"number\":1234.5,\"boolTrue\":true,\"boolFalse\":false,\"array\":[1,2,3,4],\"object\":{\"key\":\"value\"},\"null\":null}"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_integer_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes integer shapes",
                        "body": "{\"Integer\":1234}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Integer": 1234
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_long_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes long shapes",
                        "body": "{\"Long\":999999999999}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Long": 999999999999
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_float_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes float shapes",
                        "body": "{\"Float\":1234.5}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Float": 1234.5
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_double_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes double shapes",
                        "body": "{\"Double\":1234.5}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Double": 1234.5
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_blob_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes blob shapes",
                        "body": "{\"Blob\":\"YmluYXJ5LXZhbHVl\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Blob": "binary-value"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_boolean_shapes_true",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes boolean shapes (true)",
                        "body": "{\"Boolean\":true}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Boolean": true
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_boolean_shapes_false",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes boolean shapes (false)",
                        "body": "{\"Boolean\":false}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Boolean": false
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_timestamp_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes timestamp shapes",
                        "body": "{\"Timestamp\":946845296}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Timestamp": 946845296
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_timestamp_shapes_with_iso8601_timestampformat",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes timestamp shapes with iso8601 timestampFormat",
                        "body": "{\"Iso8601Timestamp\":\"2000-01-02T20:34:56Z\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "Iso8601Timestamp": 946845296
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_timestamp_shapes_with_httpdate_timestampformat",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes timestamp shapes with httpdate timestampFormat",
                        "body": "{\"HttpdateTimestamp\":\"Sun, 02 Jan 2000 20:34:56 GMT\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "HttpdateTimestamp": 946845296
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_timestamp_shapes_with_unixtimestamp_timestampformat",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes timestamp shapes with unixTimestamp timestampFormat",
                        "body": "{\"UnixTimestamp\":946845296}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "UnixTimestamp": 946845296
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_list_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes list shapes",
                        "body": "{\"ListOfStrings\":[\"abc\",\"mno\",\"xyz\"]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "ListOfStrings": [
                                "abc",
                                "mno",
                                "xyz"
                            ]
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_empty_list_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes empty list shapes",
                        "body": "{\"ListOfStrings\":[]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "ListOfStrings": []
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_list_of_map_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes list of map shapes",
                        "body": "{\"ListOfMapsOfStrings\":[{\"foo\":\"bar\"},{\"abc\":\"xyz\"},{\"red\":\"blue\"}]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "ListOfMapsOfStrings": [
                                {
                                    "foo": "bar"
                                },
                                {
                                    "abc": "xyz"
                                },
                                {
                                    "red": "blue"
                                }
                            ]
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_list_of_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes list of structure shapes",
                        "body": "{\"ListOfStructs\":[{\"Value\":\"abc\"},{\"Value\":\"mno\"},{\"Value\":\"xyz\"}]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "ListOfStructs": [
                                {
                                    "Value": "abc"
                                },
                                {
                                    "Value": "mno"
                                },
                                {
                                    "Value": "xyz"
                                }
                            ]
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_list_of_recursive_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes list of recursive structure shapes",
                        "body": "{\"RecursiveList\":[{\"RecursiveList\":[{\"RecursiveList\":[{\"Integer\":123}]}]}]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "RecursiveList": [
                                {
                                    "RecursiveList": [
                                        {
                                            "RecursiveList": [
                                                {
                                                    "Integer": 123
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_map_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes map shapes",
                        "body": "{\"MapOfStrings\":{\"abc\":\"xyz\",\"mno\":\"hjk\"}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "MapOfStrings": {
                                "abc": "xyz",
                                "mno": "hjk"
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_empty_map_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes empty map shapes",
                        "body": "{\"MapOfStrings\":{}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "MapOfStrings": {}
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_map_of_list_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes map of list shapes",
                        "body": "{\"MapOfListsOfStrings\":{\"abc\":[\"abc\",\"xyz\"],\"mno\":[\"xyz\",\"abc\"]}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "MapOfListsOfStrings": {
                                "abc": [
                                    "abc",
                                    "xyz"
                                ],
                                "mno": [
                                    "xyz",
                                    "abc"
                                ]
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_map_of_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes map of structure shapes",
                        "body": "{\"MapOfStructs\":{\"key1\":{\"Value\":\"value-1\"},\"key2\":{\"Value\":\"value-2\"}}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "MapOfStructs": {
                                "key1": {
                                    "Value": "value-1"
                                },
                                "key2": {
                                    "Value": "value-2"
                                }
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_map_of_recursive_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes map of recursive structure shapes",
                        "body": "{\"RecursiveMap\":{\"key1\":{\"RecursiveMap\":{\"key2\":{\"RecursiveMap\":{\"key3\":{\"Boolean\":false}}}}}}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "RecursiveMap": {
                                "key1": {
                                    "RecursiveMap": {
                                        "key2": {
                                            "RecursiveMap": {
                                                "key3": {
                                                    "Boolean": false
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes structure shapes",
                        "body": "{\"SimpleStruct\":{\"Value\":\"abc\"}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "SimpleStruct": {
                                "Value": "abc"
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_structure_members_with_locationname_traits",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes structure members with locationName traits",
                        "body": "{\"StructWithJsonName\":{\"Value\":\"some-value\"}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "StructWithJsonName": {
                                "Value": "some-value"
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_empty_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes empty structure shapes",
                        "body": "{\"SimpleStruct\":{}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "SimpleStruct": {}
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_structure_which_have_no_members",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes structure which have no members",
                        "body": "{\"EmptyStruct\":{}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "EmptyStruct": {}
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "serializes_recursive_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Serializes recursive structure shapes",
                        "body": "{\"String\":\"top-value\",\"Boolean\":false,\"RecursiveStruct\":{\"String\":\"nested-value\",\"Boolean\":true,\"RecursiveList\":[{\"String\":\"string-only\"},{\"RecursiveStruct\":{\"MapOfStrings\":{\"color\":\"red\",\"size\":\"large\"}}}]}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.KitchenSinkOperation"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "String": "top-value",
                            "Boolean": false,
                            "RecursiveStruct": {
                                "String": "nested-value",
                                "Boolean": true,
                                "RecursiveList": [
                                    {
                                        "String": "string-only"
                                    },
                                    {
                                        "RecursiveStruct": {
                                            "MapOfStrings": {
                                                "color": "red",
                                                "size": "large"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "parses_operations_with_empty_json_bodies",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses operations with empty JSON bodies",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_string_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses string shapes",
                        "body": "{\"String\":\"string-value\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "String": "string-value"
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_integer_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses integer shapes",
                        "body": "{\"Integer\":1234}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Integer": 1234
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_long_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses long shapes",
                        "body": "{\"Long\":1234567890123456789}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Long": 1234567890123456789
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_float_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses float shapes",
                        "body": "{\"Float\":1234.5}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Float": 1234.5
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_double_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses double shapes",
                        "body": "{\"Double\":123456789.12345679}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Double": 1.2345678912345679E8
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_boolean_shapes_true",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses boolean shapes (true)",
                        "body": "{\"Boolean\":true}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Boolean": true
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_boolean_false",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses boolean (false)",
                        "body": "{\"Boolean\":false}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Boolean": false
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_blob_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses blob shapes",
                        "body": "{\"Blob\":\"YmluYXJ5LXZhbHVl\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Blob": "binary-value"
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_timestamp_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses timestamp shapes",
                        "body": "{\"Timestamp\":946845296}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Timestamp": 946845296
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_iso8601_timestamps",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses iso8601 timestamps",
                        "body": "{\"Iso8601Timestamp\":\"2000-01-02T20:34:56Z\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "Iso8601Timestamp": 946845296
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_httpdate_timestamps",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses httpdate timestamps",
                        "body": "{\"HttpdateTimestamp\":\"Sun, 02 Jan 2000 20:34:56 GMT\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "HttpdateTimestamp": 946845296
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_list_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses list shapes",
                        "body": "{\"ListOfStrings\":[\"abc\",\"mno\",\"xyz\"]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "ListOfStrings": [
                                "abc",
                                "mno",
                                "xyz"
                            ]
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_list_of_map_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses list of map shapes",
                        "body": "{\"ListOfMapsOfStrings\":[{\"size\":\"large\"},{\"color\":\"red\"}]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "ListOfMapsOfStrings": [
                                {
                                    "size": "large"
                                },
                                {
                                    "color": "red"
                                }
                            ]
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_list_of_list_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses list of list shapes",
                        "body": "{\"ListOfLists\":[[\"abc\",\"mno\",\"xyz\"],[\"hjk\",\"qrs\",\"tuv\"]]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "ListOfLists": [
                                [
                                    "abc",
                                    "mno",
                                    "xyz"
                                ],
                                [
                                    "hjk",
                                    "qrs",
                                    "tuv"
                                ]
                            ]
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_list_of_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses list of structure shapes",
                        "body": "{\"ListOfStructs\":[{\"Value\":\"value-1\"},{\"Value\":\"value-2\"}]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "ListOfStructs": [
                                {
                                    "Value": "value-1"
                                },
                                {
                                    "Value": "value-2"
                                }
                            ]
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_list_of_recursive_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses list of recursive structure shapes",
                        "body": "{\"RecursiveList\":[{\"RecursiveList\":[{\"RecursiveList\":[{\"String\":\"value\"}]}]}]}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "RecursiveList": [
                                {
                                    "RecursiveList": [
                                        {
                                            "RecursiveList": [
                                                {
                                                    "String": "value"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_map_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses map shapes",
                        "body": "{\"MapOfStrings\":{\"size\":\"large\",\"color\":\"red\"}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "MapOfStrings": {
                                "size": "large",
                                "color": "red"
                            }
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_map_of_list_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses map of list shapes",
                        "body": "{\"MapOfListsOfStrings\":{\"sizes\":[\"large\",\"small\"],\"colors\":[\"red\",\"green\"]}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "MapOfListsOfStrings": {
                                "sizes": [
                                    "large",
                                    "small"
                                ],
                                "colors": [
                                    "red",
                                    "green"
                                ]
                            }
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_map_of_map_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses map of map shapes",
                        "body": "{\"MapOfMaps\":{\"sizes\":{\"large\":\"L\",\"medium\":\"M\"},\"colors\":{\"red\":\"R\",\"blue\":\"B\"}}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "MapOfMaps": {
                                "sizes": {
                                    "large": "L",
                                    "medium": "M"
                                },
                                "colors": {
                                    "red": "R",
                                    "blue": "B"
                                }
                            }
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_map_of_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses map of structure shapes",
                        "body": "{\"MapOfStructs\":{\"size\":{\"Value\":\"small\"},\"color\":{\"Value\":\"red\"}}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "MapOfStructs": {
                                "size": {
                                    "Value": "small"
                                },
                                "color": {
                                    "Value": "red"
                                }
                            }
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_map_of_recursive_structure_shapes",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses map of recursive structure shapes",
                        "body": "{\"RecursiveMap\":{\"key-1\":{\"RecursiveMap\":{\"key-2\":{\"RecursiveMap\":{\"key-3\":{\"String\":\"value\"}}}}}}}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "RecursiveMap": {
                                "key-1": {
                                    "RecursiveMap": {
                                        "key-2": {
                                            "RecursiveMap": {
                                                "key-3": {
                                                    "String": "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "code": 200
                    },
                    {
                        "id": "parses_the_request_id_from_the_response",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Parses the request id from the response",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "X-Amzn-Requestid": "amazon-uniq-request-id",
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.json#ListOfKitchenSinks": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.json#KitchenSink"
            }
        },
        "aws.protocoltests.json#ListOfListOfStrings": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.json#ListOfStrings"
            }
        },
        "aws.protocoltests.json#ListOfMapsOfStrings": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.json#MapOfStrings"
            }
        },
        "aws.protocoltests.json#ListOfStrings": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.json#ListOfStructs": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.json#SimpleStruct"
            }
        },
        "aws.protocoltests.json#MapOfKitchenSinks": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.json#KitchenSink"
            }
        },
        "aws.protocoltests.json#MapOfListsOfStrings": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.json#ListOfStrings"
            }
        },
        "aws.protocoltests.json#MapOfMapOfStrings": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.json#MapOfStrings"
            }
        },
        "aws.protocoltests.json#MapOfStrings": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.json#MapOfStructs": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.json#SimpleStruct"
            }
        },
        "aws.protocoltests.json#MyUnion": {
            "type": "union",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "booleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "numberValue": {
                    "target": "smithy.api#Integer"
                },
                "blobValue": {
                    "target": "smithy.api#Blob"
                },
                "timestampValue": {
                    "target": "smithy.api#Timestamp"
                },
                "enumValue": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "listValue": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "mapValue": {
                    "target": "aws.protocoltests.shared#StringMap"
                },
                "structureValue": {
                    "target": "aws.protocoltests.shared#GreetingStruct"
                }
            },
            "traits": {
                "smithy.api#documentation": "A union with a representative set of types for members."
            }
        },
        "aws.protocoltests.json#NullOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#NullOperationInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.json#NullOperationInputOutput"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11StructuresDontSerializeNullValues",
                        "documentation": "Null structure values are dropped",
                        "protocol": "aws.protocols#awsJson1_1",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.NullOperation"
                        },
                        "params": {
                            "string": null
                        },
                        "method": "POST",
                        "uri": "/",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11ServersDontDeserializeNullStructureValues",
                        "documentation": "Null structure values are dropped",
                        "protocol": "aws.protocols#awsJson1_1",
                        "body": "{\n    \"string\": null\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.NullOperation"
                        },
                        "params": {},
                        "method": "POST",
                        "uri": "/",
                        "appliesTo": "server"
                    },
                    {
                        "id": "AwsJson11MapsSerializeNullValues",
                        "documentation": "Serializes null values in maps",
                        "protocol": "aws.protocols#awsJson1_1",
                        "body": "{\n    \"sparseStringMap\": {\n        \"foo\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.NullOperation"
                        },
                        "params": {
                            "sparseStringMap": {
                                "foo": null
                            }
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "AwsJson11ListsSerializeNull",
                        "documentation": "Serializes null values in lists",
                        "protocol": "aws.protocols#awsJson1_1",
                        "body": "{\n    \"sparseStringList\": [\n        null\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.NullOperation"
                        },
                        "params": {
                            "sparseStringList": [
                                null
                            ]
                        },
                        "method": "POST",
                        "uri": "/"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11StructuresDontDeserializeNullValues",
                        "documentation": "Null structure values are dropped",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"string\": null\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {},
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson11ServersDontSerializeNullStructureValues",
                        "documentation": "Null structure values are dropped",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "string": null
                        },
                        "appliesTo": "server"
                    },
                    {
                        "id": "AwsJson11MapsDeserializeNullValues",
                        "documentation": "Deserializes null values in maps",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"sparseStringMap\": {\n        \"foo\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "sparseStringMap": {
                                "foo": null
                            }
                        }
                    },
                    {
                        "id": "AwsJson11ListsDeserializeNull",
                        "documentation": "Deserializes null values in lists",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"sparseStringList\": [\n        null\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "sparseStringList": [
                                null
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#NullOperationInputOutput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "smithy.api#String"
                },
                "sparseStringList": {
                    "target": "aws.protocoltests.shared#SparseStringList"
                },
                "sparseStringMap": {
                    "target": "aws.protocoltests.shared#SparseStringMap"
                }
            }
        },
        "aws.protocoltests.json#OperationWithOptionalInputOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#OperationWithOptionalInputOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.json#OperationWithOptionalInputOutputOutput"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "can_call_operation_with_no_input_or_output",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Can call operations with no input or output",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.OperationWithOptionalInputOutput"
                        },
                        "method": "POST",
                        "uri": "/"
                    },
                    {
                        "id": "can_call_operation_with_optional_input",
                        "protocol": "aws.protocols#awsJson1_1",
                        "documentation": "Can invoke operations with optional input",
                        "body": "{\"Value\":\"Hi\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.OperationWithOptionalInputOutput"
                        },
                        "params": {
                            "Value": "Hi"
                        },
                        "method": "POST",
                        "uri": "/"
                    }
                ]
            }
        },
        "aws.protocoltests.json#OperationWithOptionalInputOutputInput": {
            "type": "structure",
            "members": {
                "Value": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json#OperationWithOptionalInputOutputOutput": {
            "type": "structure",
            "members": {
                "Value": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json#PutAndGetInlineDocuments": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#PutAndGetInlineDocumentsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.json#PutAndGetInlineDocumentsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes an inline document as part of the payload.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "PutAndGetInlineDocumentsInput",
                        "documentation": "Serializes inline documents in a JSON request.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"inlineDocument\": {\"foo\": \"bar\"}\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.PutAndGetInlineDocuments"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "inlineDocument": {
                                "foo": "bar"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "PutAndGetInlineDocumentsInput",
                        "documentation": "Serializes inline documents in a JSON response.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"inlineDocument\": {\"foo\": \"bar\"}\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "inlineDocument": {
                                "foo": "bar"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#PutAndGetInlineDocumentsInputOutput": {
            "type": "structure",
            "members": {
                "inlineDocument": {
                    "target": "aws.protocoltests.json#Document"
                }
            }
        },
        "aws.protocoltests.json#PutWithContentEncoding": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#PutWithContentEncodingInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#requestCompression": {
                    "encodings": [
                        "gzip"
                    ]
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SDKAppliedContentEncoding_awsJson1_1",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "params": {
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    },
                    {
                        "id": "SDKAppendsGzipAndIgnoresHttpProvidedEncoding_awsJson1_1",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header, and the\nuser-provided content-encoding is NOT in the Content-Encoding header since HTTP binding\ntraits are ignored in the awsJson1_1 protocol.\n",
                        "protocol": "aws.protocols#awsJson1_1",
                        "params": {
                            "encoding": "custom",
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#PutWithContentEncodingInput": {
            "type": "structure",
            "members": {
                "encoding": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Encoding"
                    }
                },
                "data": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json#SimpleScalarProperties": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json#SimpleScalarPropertiesInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.json#SimpleScalarPropertiesInputOutput"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson11SupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"doubleValue\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.SimpleScalarProperties"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "AwsJson11SupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"doubleValue\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.SimpleScalarProperties"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "AwsJson11SupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"doubleValue\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1",
                            "X-Amz-Target": "JsonProtocol.SimpleScalarProperties"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson11SupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"doubleValue\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "AwsJson11SupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"doubleValue\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "AwsJson11SupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"doubleValue\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json#SimpleScalarPropertiesInputOutput": {
            "type": "structure",
            "members": {
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double"
                }
            }
        },
        "aws.protocoltests.json#SimpleStruct": {
            "type": "structure",
            "members": {
                "Value": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.json#StructWithJsonName": {
            "type": "structure",
            "members": {
                "Value": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "RenamedMember"
                    }
                }
            }
        },
        "aws.protocoltests.json#UnionInputOutput": {
            "type": "structure",
            "members": {
                "contents": {
                    "target": "aws.protocoltests.json#MyUnion"
                }
            },
            "traits": {
                "smithy.api#documentation": "A shared structure that contains a single union member."
            }
        },
        "aws.protocoltests.json10#ClientOptionalDefaults": {
            "type": "structure",
            "members": {
                "member": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#clientOptional": {},
                        "smithy.api#default": 0
                    }
                }
            }
        },
        "aws.protocoltests.json10#ComplexError": {
            "type": "structure",
            "members": {
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.json10#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10ComplexError",
                        "documentation": "Parses a complex error with no message member",
                        "protocol": "aws.protocols#awsJson1_0",
                        "params": {
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.json10#ComplexError\",\n    \"TopLevel\": \"Top level\",\n    \"Nested\": {\n        \"Foo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "AwsJson10EmptyComplexError",
                        "documentation": "Parses a complex error with an empty body",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.json10#ComplexError\"\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.json10#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "Fooooo"
                    }
                }
            }
        },
        "aws.protocoltests.json10#Defaults": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.json10#DefaultsMixin"
                }
            ],
            "members": {}
        },
        "aws.protocoltests.json10#DefaultsMixin": {
            "type": "structure",
            "members": {
                "defaultString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#default": "hi"
                    }
                },
                "defaultBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#default": true
                    }
                },
                "defaultList": {
                    "target": "aws.protocoltests.json10#TestStringList",
                    "traits": {
                        "smithy.api#default": []
                    }
                },
                "defaultDocumentMap": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#default": {}
                    }
                },
                "defaultDocumentString": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#default": "hi"
                    }
                },
                "defaultDocumentBoolean": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#default": true
                    }
                },
                "defaultDocumentList": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#default": []
                    }
                },
                "defaultNullDocument": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#default": null
                    }
                },
                "defaultTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#default": 0
                    }
                },
                "defaultBlob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#default": "abc"
                    }
                },
                "defaultByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#default": 1
                    }
                },
                "defaultShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#default": 1
                    }
                },
                "defaultInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#default": 10
                    }
                },
                "defaultLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#default": 100
                    }
                },
                "defaultFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#default": 1.0
                    }
                },
                "defaultDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#default": 1.0
                    }
                },
                "defaultMap": {
                    "target": "aws.protocoltests.json10#TestStringMap",
                    "traits": {
                        "smithy.api#default": {}
                    }
                },
                "defaultEnum": {
                    "target": "aws.protocoltests.json10#TestEnum",
                    "traits": {
                        "smithy.api#default": "FOO"
                    }
                },
                "defaultIntEnum": {
                    "target": "aws.protocoltests.json10#TestIntEnum",
                    "traits": {
                        "smithy.api#default": 1
                    }
                },
                "emptyString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#default": ""
                    }
                },
                "falseBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#default": false
                    }
                },
                "emptyBlob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#default": ""
                    }
                },
                "zeroByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#default": 0
                    }
                },
                "zeroShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#default": 0
                    }
                },
                "zeroInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#default": 0
                    }
                },
                "zeroLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#default": 0
                    }
                },
                "zeroFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#default": 0.0
                    }
                },
                "zeroDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#default": 0.0
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.json10#Dialog": {
            "type": "structure",
            "members": {
                "language": {
                    "target": "smithy.api#String"
                },
                "greeting": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#default": "hi"
                    }
                },
                "farewell": {
                    "target": "aws.protocoltests.json10#Farewell"
                }
            }
        },
        "aws.protocoltests.json10#DialogList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.json10#Dialog"
            }
        },
        "aws.protocoltests.json10#DialogMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.json10#Dialog"
            }
        },
        "aws.protocoltests.json10#EmptyInputAndEmptyOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#EmptyInputAndEmptyOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.json10#EmptyInputAndEmptyOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has an empty input\nand empty output structure that reuses the same shape. While this should\nbe rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10EmptyInputAndEmptyOutput",
                        "documentation": "Clients must always send an empty object if input is modeled.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.EmptyInputAndEmptyOutput"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10EmptyInputAndEmptyOutputSendJsonObject",
                        "documentation": "A service will always return a JSON object for operations with modeled output.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#EmptyInputAndEmptyOutputInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#EmptyInputAndEmptyOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10EndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{}",
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "aws.protocoltests.json10#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#EndpointWithHostLabelOperationInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10EndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\"label\": \"bar\"}",
                        "bodyMediaType": "application/json",
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#EndpointWithHostLabelOperationInput": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#Farewell": {
            "type": "structure",
            "members": {
                "phrase": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#default": "bye"
                    }
                }
            }
        },
        "aws.protocoltests.json10#FooError": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "This error has test cases that test some of the dark corners of Amazon service\nframework history. It should only be implemented by clients.",
                "smithy.api#error": "server",
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10FooErrorUsingXAmznErrorType",
                        "documentation": "Serializes the X-Amzn-ErrorType header. For an example service, see Amazon EKS.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorUsingXAmznErrorTypeWithUri",
                        "documentation": "Some X-Amzn-Errortype headers contain URLs. Clients need to split the URL on ':' and take only the first half of the string. For example, 'ValidationException:http://internal.amazon.com/coral/com.amazon.coral.validate/'\nis to be interpreted as 'ValidationException'.\n\nFor an example service see Amazon Polly.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorUsingXAmznErrorTypeWithUriAndNamespace",
                        "documentation": "X-Amzn-Errortype might contain a URL and a namespace. Client should extract only the shape name. This is a pathalogical case that might not actually happen in any deployed AWS service.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "aws.protocoltests.json10#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorUsingCode",
                        "documentation": "This example uses the 'code' property in the output rather than X-Amzn-Errortype. Some services do this though it's preferable to send the X-Amzn-Errortype. Client implementations must first check for the X-Amzn-Errortype and then check for a top-level 'code' property.\n\nFor example service see Amazon S3 Glacier.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"code\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorUsingCodeAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.json10#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorUsingCodeUriAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.json10#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorWithDunderType",
                        "documentation": "Some services serialize errors using __type.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"__type\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorWithDunderTypeAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.json10#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10FooErrorWithDunderTypeUriAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.json10#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.json10#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#GreetingWithErrorsInput"
            },
            "output": {
                "target": "aws.protocoltests.json10#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.json10#ComplexError"
                },
                {
                    "target": "aws.protocoltests.json10#FooError"
                },
                {
                    "target": "aws.protocoltests.json10#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has three possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A ComplexError error.\n\nImplementations must be able to successfully take a response and\nproperly deserialize successful and error responses.",
                "smithy.api#idempotent": {}
            }
        },
        "aws.protocoltests.json10#GreetingWithErrorsInput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#HostWithPathOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10HostWithPath",
                        "documentation": "Custom endpoints supplied by users can have paths",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/custom/",
                        "body": "{}",
                        "host": "example.com/custom",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.json10#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10InvalidGreetingError",
                        "documentation": "Parses simple JSON errors",
                        "protocol": "aws.protocols#awsJson1_0",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.json10#InvalidGreeting\",\n    \"Message\": \"Hi\"\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.json10#JsonRpc10": {
            "type": "service",
            "version": "2020-07-14",
            "operations": [
                {
                    "target": "aws.protocoltests.json10#EmptyInputAndEmptyOutput"
                },
                {
                    "target": "aws.protocoltests.json10#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.json10#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.json10#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.json10#HostWithPathOperation"
                },
                {
                    "target": "aws.protocoltests.json10#JsonUnions"
                },
                {
                    "target": "aws.protocoltests.json10#NoInputAndNoOutput"
                },
                {
                    "target": "aws.protocoltests.json10#NoInputAndOutput"
                },
                {
                    "target": "aws.protocoltests.json10#OperationWithDefaults"
                },
                {
                    "target": "aws.protocoltests.json10#OperationWithNestedStructure"
                },
                {
                    "target": "aws.protocoltests.json10#OperationWithRequiredMembers"
                },
                {
                    "target": "aws.protocoltests.json10#PutWithContentEncoding"
                },
                {
                    "target": "aws.protocoltests.json10#SimpleScalarProperties"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "JSON RPC 10"
                },
                "aws.auth#sigv4": {
                    "name": "jsonrpc10"
                },
                "aws.protocols#awsJson1_0": {},
                "smithy.api#title": "Sample Json 1.0 Protocol Service"
            }
        },
        "aws.protocoltests.json10#JsonUnions": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#JsonUnionsInput"
            },
            "output": {
                "target": "aws.protocoltests.json10#JsonUnionsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation uses unions for inputs and outputs.",
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10SerializeStringUnionValue",
                        "documentation": "Serializes a string union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeBooleanUnionValue",
                        "documentation": "Serializes a boolean union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeNumberUnionValue",
                        "documentation": "Serializes a number union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeBlobUnionValue",
                        "documentation": "Serializes a blob union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeTimestampUnionValue",
                        "documentation": "Serializes a timestamp union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeEnumUnionValue",
                        "documentation": "Serializes an enum union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeIntEnumUnionValue",
                        "documentation": "Serializes an intEnum union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"intEnumValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "intEnumValue": 1
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeListUnionValue",
                        "documentation": "Serializes a list union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeMapUnionValue",
                        "documentation": "Serializes a map union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson10SerializeStructureUnionValue",
                        "documentation": "Serializes a structure union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.JsonUnions"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10DeserializeStringUnionValue",
                        "documentation": "Deserializes a string union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeBooleanUnionValue",
                        "documentation": "Deserializes a boolean union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeNumberUnionValue",
                        "documentation": "Deserializes a number union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeBlobUnionValue",
                        "documentation": "Deserializes a blob union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeTimestampUnionValue",
                        "documentation": "Deserializes a timestamp union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeEnumUnionValue",
                        "documentation": "Deserializes an enum union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeIntEnumUnionValue",
                        "documentation": "Deserializes an intEnum union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"intEnumValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "intEnumValue": 1
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeListUnionValue",
                        "documentation": "Deserializes a list union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeMapUnionValue",
                        "documentation": "Deserializes a map union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeStructureUnionValue",
                        "documentation": "Deserializes a structure union value",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeIgnoreType",
                        "appliesTo": "client",
                        "documentation": "Ignores an unrecognized __type property",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"__type\": \"aws.protocoltests.json10#MyUnion\",\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson10DeserializeAllowNulls",
                        "appliesTo": "client",
                        "documentation": "Allows for `: null` to be set for all unset fields",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n      \"stringValue\": null,\n      \"booleanValue\": null,\n      \"numberValue\": null,\n      \"blobValue\": null,\n      \"timestampValue\": null,\n      \"enumValue\": null,\n      \"intEnumValue\": null,\n      \"listValue\": null,\n      \"mapValue\": null,\n      \"structureValue\": {\n          \"hi\": \"hello\"\n      }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#JsonUnionsInput": {
            "type": "structure",
            "members": {
                "contents": {
                    "target": "aws.protocoltests.json10#MyUnion"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#JsonUnionsOutput": {
            "type": "structure",
            "members": {
                "contents": {
                    "target": "aws.protocoltests.json10#MyUnion"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#MyUnion": {
            "type": "union",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "booleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "numberValue": {
                    "target": "smithy.api#Integer"
                },
                "blobValue": {
                    "target": "smithy.api#Blob"
                },
                "timestampValue": {
                    "target": "smithy.api#Timestamp"
                },
                "enumValue": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "intEnumValue": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "listValue": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "mapValue": {
                    "target": "aws.protocoltests.shared#StringMap"
                },
                "structureValue": {
                    "target": "aws.protocoltests.shared#GreetingStruct"
                }
            },
            "traits": {
                "smithy.api#documentation": "A union with a representative set of types for members."
            }
        },
        "aws.protocoltests.json10#NestedDefaultsMixin": {
            "type": "structure",
            "members": {
                "dialog": {
                    "target": "aws.protocoltests.json10#Dialog",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "dialogList": {
                    "target": "aws.protocoltests.json10#DialogList",
                    "traits": {
                        "smithy.api#default": []
                    }
                },
                "dialogMap": {
                    "target": "aws.protocoltests.json10#DialogMap",
                    "traits": {
                        "smithy.api#default": {}
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.json10#NoInputAndNoOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input or output.\nWhile this should be rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10MustAlwaysSendEmptyJsonPayload",
                        "documentation": "Clients must always send an empty JSON object payload for\noperations with no input (that is, `{}`). While AWS service\nimplementations support requests with no payload or requests\nthat send `{}`, always sending `{}` from the client is\npreferred for forward compatibility in case input is ever\nadded to an operation.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.NoInputAndNoOutput"
                        },
                        "uri": "/",
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "AwsJson10ServiceSupportsNoPayloadForNoInput",
                        "documentation": "Service implementations must support no payload or an empty\nobject payload for operations that define no input. However,\ndespite the lack of a payload, a Content-Type header is still\nrequired in order for the service to properly detect the\nprotocol.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.NoInputAndNoOutput"
                        },
                        "uri": "/",
                        "body": "",
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10HandlesEmptyOutputShape",
                        "protocol": "aws.protocols#awsJson1_0",
                        "documentation": "When no output is defined, the service is expected to return\nan empty payload, however, client must ignore a JSON payload\nif one is returned. This ensures that if output is added later,\nthen it will not break the client.",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "code": 200,
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10HandlesUnexpectedJsonOutput",
                        "protocol": "aws.protocols#awsJson1_0",
                        "documentation": "This client-only test builds on handles_empty_output_shape,\nby including unexpected fields in the JSON. A client\nneeds to ignore JSON output that is empty or that contains\nJSON object data.",
                        "body": "{\n    \"foo\": true\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "code": 200,
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsJson10ServiceRespondsWithNoPayload",
                        "protocol": "aws.protocols#awsJson1_0",
                        "documentation": "When no output is defined, the service is expected to return\nan empty payload. Despite the lack of a payload, the service\nis expected to always send a Content-Type header. Clients must\nhandle cases where a service returns a JSON object and where\na service returns no JSON at all.",
                        "body": "",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.json10#NoInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.json10#NoInputAndOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input and the\noutput is empty. While this should be rare, code generators must support\nthis.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10NoInputAndOutput",
                        "documentation": "A client should always send and empty JSON object payload.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.NoInputAndOutput"
                        },
                        "uri": "/",
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10NoInputAndOutput",
                        "documentation": "Empty output always serializes an empty object payload.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.json10#NoInputAndOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#OperationWithDefaults": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#OperationWithDefaultsInput"
            },
            "output": {
                "target": "aws.protocoltests.json10#OperationWithDefaultsOutput"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10ClientPopulatesDefaultValuesInInput",
                        "documentation": "Client populates default values in input.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"defaults\": {\n        \"defaultString\": \"hi\",\n        \"defaultBoolean\": true,\n        \"defaultList\": [],\n        \"defaultDocumentMap\": {},\n        \"defaultDocumentString\": \"hi\",\n        \"defaultDocumentBoolean\": true,\n        \"defaultDocumentList\": [],\n        \"defaultTimestamp\": 0,\n        \"defaultBlob\": \"YWJj\",\n        \"defaultByte\": 1,\n        \"defaultShort\": 1,\n        \"defaultInteger\": 10,\n        \"defaultLong\": 100,\n        \"defaultFloat\": 1.0,\n        \"defaultDouble\": 1.0,\n        \"defaultMap\": {},\n        \"defaultEnum\": \"FOO\",\n        \"defaultIntEnum\": 1,\n        \"emptyString\": \"\",\n        \"falseBoolean\": false,\n        \"emptyBlob\": \"\",\n        \"zeroByte\": 0,\n        \"zeroShort\": 0,\n        \"zeroInteger\": 0,\n        \"zeroLong\": 0,\n        \"zeroFloat\": 0.0,\n        \"zeroDouble\": 0.0\n    }\n}",
                        "params": {
                            "defaults": {}
                        }
                    },
                    {
                        "id": "AwsJson10ClientSkipsTopLevelDefaultValuesInInput",
                        "documentation": "Client skips top level default values in input.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n}",
                        "params": {}
                    },
                    {
                        "id": "AwsJson10ClientUsesExplicitlyProvidedMemberValuesOverDefaults",
                        "documentation": "Client uses explicitly provided member values over defaults",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "defaults": {
                                "defaultString": "bye",
                                "defaultBoolean": true,
                                "defaultList": [
                                    "a"
                                ],
                                "defaultDocumentMap": {
                                    "name": "Jack"
                                },
                                "defaultDocumentString": "bye",
                                "defaultDocumentBoolean": true,
                                "defaultDocumentList": [
                                    "b"
                                ],
                                "defaultNullDocument": "notNull",
                                "defaultTimestamp": 1,
                                "defaultBlob": "hi",
                                "defaultByte": 2,
                                "defaultShort": 2,
                                "defaultInteger": 20,
                                "defaultLong": 200,
                                "defaultFloat": 2.0,
                                "defaultDouble": 2.0,
                                "defaultMap": {
                                    "name": "Jack"
                                },
                                "defaultEnum": "BAR",
                                "defaultIntEnum": 2,
                                "emptyString": "foo",
                                "falseBoolean": true,
                                "emptyBlob": "hi",
                                "zeroByte": 1,
                                "zeroShort": 1,
                                "zeroInteger": 1,
                                "zeroLong": 1,
                                "zeroFloat": 1.0,
                                "zeroDouble": 1.0
                            }
                        },
                        "body": "{\n    \"defaults\": {\n        \"defaultString\": \"bye\",\n        \"defaultBoolean\": true,\n        \"defaultList\": [\"a\"],\n        \"defaultDocumentMap\": {\"name\": \"Jack\"},\n        \"defaultDocumentString\": \"bye\",\n        \"defaultDocumentBoolean\": true,\n        \"defaultDocumentList\": [\"b\"],\n        \"defaultNullDocument\": \"notNull\",\n        \"defaultTimestamp\": 1,\n        \"defaultBlob\": \"aGk=\",\n        \"defaultByte\": 2,\n        \"defaultShort\": 2,\n        \"defaultInteger\": 20,\n        \"defaultLong\": 200,\n        \"defaultFloat\": 2.0,\n        \"defaultDouble\": 2.0,\n        \"defaultMap\": {\"name\": \"Jack\"},\n        \"defaultEnum\": \"BAR\",\n        \"defaultIntEnum\": 2,\n        \"emptyString\": \"foo\",\n        \"falseBoolean\": true,\n        \"emptyBlob\": \"aGk=\",\n        \"zeroByte\": 1,\n        \"zeroShort\": 1,\n        \"zeroInteger\": 1,\n        \"zeroLong\": 1,\n        \"zeroFloat\": 1.0,\n        \"zeroDouble\": 1.0\n    }\n}"
                    },
                    {
                        "id": "AwsJson10ServerPopulatesDefaultsWhenMissingInRequestBody",
                        "documentation": "Server populates default values when missing in request body.",
                        "appliesTo": "server",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n\"defaults\": {}\n}",
                        "params": {
                            "defaults": {
                                "defaultString": "hi",
                                "defaultBoolean": true,
                                "defaultList": [],
                                "defaultDocumentMap": {},
                                "defaultDocumentString": "hi",
                                "defaultDocumentBoolean": true,
                                "defaultDocumentList": [],
                                "defaultTimestamp": 0,
                                "defaultBlob": "abc",
                                "defaultByte": 1,
                                "defaultShort": 1,
                                "defaultInteger": 10,
                                "defaultLong": 100,
                                "defaultFloat": 1.0,
                                "defaultDouble": 1.0,
                                "defaultMap": {},
                                "defaultEnum": "FOO",
                                "defaultIntEnum": 1,
                                "emptyString": "",
                                "falseBoolean": false,
                                "emptyBlob": "",
                                "zeroByte": 0,
                                "zeroShort": 0,
                                "zeroInteger": 0,
                                "zeroLong": 0,
                                "zeroFloat": 0.0,
                                "zeroDouble": 0.0
                            },
                            "topLevelDefault": "hi",
                            "otherTopLevelDefault": 0
                        }
                    },
                    {
                        "id": "AwsJson10ClientUsesExplicitlyProvidedValuesInTopLevel",
                        "documentation": "Any time a value is provided for a member in the top level of input, it is used, regardless of if its the default.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"topLevelDefault\": \"hi\",\n    \"otherTopLevelDefault\": 0\n}",
                        "params": {
                            "topLevelDefault": "hi",
                            "otherTopLevelDefault": 0
                        }
                    },
                    {
                        "id": "AwsJson10ClientIgnoresNonTopLevelDefaultsOnMembersWithClientOptional",
                        "documentation": "Typically, non top-level members would have defaults filled in, but if they have the clientOptional trait, the defaults should be ignored.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"clientOptionalDefaults\": {}\n}",
                        "params": {
                            "clientOptionalDefaults": {}
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10ClientPopulatesDefaultsValuesWhenMissingInResponse",
                        "documentation": "Client populates default values when missing in response.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{}",
                        "params": {
                            "defaultString": "hi",
                            "defaultBoolean": true,
                            "defaultList": [],
                            "defaultDocumentMap": {},
                            "defaultDocumentString": "hi",
                            "defaultDocumentBoolean": true,
                            "defaultDocumentList": [],
                            "defaultTimestamp": 0,
                            "defaultBlob": "abc",
                            "defaultByte": 1,
                            "defaultShort": 1,
                            "defaultInteger": 10,
                            "defaultLong": 100,
                            "defaultFloat": 1.0,
                            "defaultDouble": 1.0,
                            "defaultMap": {},
                            "defaultEnum": "FOO",
                            "defaultIntEnum": 1,
                            "emptyString": "",
                            "falseBoolean": false,
                            "emptyBlob": "",
                            "zeroByte": 0,
                            "zeroShort": 0,
                            "zeroInteger": 0,
                            "zeroLong": 0,
                            "zeroFloat": 0.0,
                            "zeroDouble": 0.0
                        }
                    },
                    {
                        "id": "AwsJson10ClientIgnoresDefaultValuesIfMemberValuesArePresentInResponse",
                        "documentation": "Client ignores default values if member values are present in the response.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"defaultString\": \"bye\",\n    \"defaultBoolean\": false,\n    \"defaultList\": [\"a\"],\n    \"defaultDocumentMap\": {\"name\": \"Jack\"},\n    \"defaultDocumentString\": \"bye\",\n    \"defaultDocumentBoolean\": false,\n    \"defaultDocumentList\": [\"b\"],\n    \"defaultNullDocument\": \"notNull\",\n    \"defaultTimestamp\": 2,\n    \"defaultBlob\": \"aGk=\",\n    \"defaultByte\": 2,\n    \"defaultShort\": 2,\n    \"defaultInteger\": 20,\n    \"defaultLong\": 200,\n    \"defaultFloat\": 2.0,\n    \"defaultDouble\": 2.0,\n    \"defaultMap\": {\"name\": \"Jack\"},\n    \"defaultEnum\": \"BAR\",\n    \"defaultIntEnum\": 2,\n    \"emptyString\": \"foo\",\n    \"falseBoolean\": true,\n    \"emptyBlob\": \"aGk=\",\n    \"zeroByte\": 1,\n    \"zeroShort\": 1,\n    \"zeroInteger\": 1,\n    \"zeroLong\": 1,\n    \"zeroFloat\": 1.0,\n    \"zeroDouble\": 1.0\n}",
                        "params": {
                            "defaultString": "bye",
                            "defaultBoolean": false,
                            "defaultList": [
                                "a"
                            ],
                            "defaultDocumentMap": {
                                "name": "Jack"
                            },
                            "defaultDocumentString": "bye",
                            "defaultDocumentBoolean": false,
                            "defaultDocumentList": [
                                "b"
                            ],
                            "defaultNullDocument": "notNull",
                            "defaultTimestamp": 2,
                            "defaultBlob": "hi",
                            "defaultByte": 2,
                            "defaultShort": 2,
                            "defaultInteger": 20,
                            "defaultLong": 200,
                            "defaultFloat": 2.0,
                            "defaultDouble": 2.0,
                            "defaultMap": {
                                "name": "Jack"
                            },
                            "defaultEnum": "BAR",
                            "defaultIntEnum": 2,
                            "emptyString": "foo",
                            "falseBoolean": true,
                            "emptyBlob": "hi",
                            "zeroByte": 1,
                            "zeroShort": 1,
                            "zeroInteger": 1,
                            "zeroLong": 1,
                            "zeroFloat": 1.0,
                            "zeroDouble": 1.0
                        }
                    },
                    {
                        "id": "AwsJson10ServerPopulatesDefaultsInResponseWhenMissingInParams",
                        "documentation": "Server populates default values in response when missing in params.",
                        "appliesTo": "server",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"defaultString\": \"hi\",\n    \"defaultBoolean\": true,\n    \"defaultList\": [],\n    \"defaultDocumentMap\": {},\n    \"defaultDocumentString\": \"hi\",\n    \"defaultDocumentBoolean\": true,\n    \"defaultDocumentList\": [],\n    \"defaultTimestamp\": 0,\n    \"defaultBlob\": \"YWJj\",\n    \"defaultByte\": 1,\n    \"defaultShort\": 1,\n    \"defaultInteger\": 10,\n    \"defaultLong\": 100,\n    \"defaultFloat\": 1.0,\n    \"defaultDouble\": 1.0,\n    \"defaultMap\": {},\n    \"defaultEnum\": \"FOO\",\n    \"defaultIntEnum\": 1,\n    \"emptyString\": \"\",\n    \"falseBoolean\": false,\n    \"emptyBlob\": \"\",\n    \"zeroByte\": 0,\n    \"zeroShort\": 0,\n    \"zeroInteger\": 0,\n    \"zeroLong\": 0,\n    \"zeroFloat\": 0.0,\n    \"zeroDouble\": 0.0\n}",
                        "params": {}
                    }
                ]
            }
        },
        "aws.protocoltests.json10#OperationWithDefaultsInput": {
            "type": "structure",
            "members": {
                "defaults": {
                    "target": "aws.protocoltests.json10#Defaults"
                },
                "clientOptionalDefaults": {
                    "target": "aws.protocoltests.json10#ClientOptionalDefaults"
                },
                "topLevelDefault": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#default": "hi"
                    }
                },
                "otherTopLevelDefault": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#default": 0
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#OperationWithDefaultsOutput": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.json10#DefaultsMixin"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#OperationWithNestedStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#OperationWithNestedStructureInput"
            },
            "output": {
                "target": "aws.protocoltests.json10#OperationWithNestedStructureOutput"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10ClientPopulatesNestedDefaultValuesWhenMissing",
                        "documentation": "Client populates nested default values when missing.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"topLevel\": {\n        \"dialog\": {\n            \"language\": \"en\",\n            \"greeting\": \"hi\"\n        },\n        \"dialogList\": [\n            {\n                \"greeting\": \"hi\"\n            },\n            {\n                \"greeting\": \"hi\",\n                \"farewell\": {\n                    \"phrase\": \"bye\"\n                }\n            },\n            {\n                \"language\": \"it\",\n                \"greeting\": \"ciao\",\n                \"farewell\": {\n                    \"phrase\": \"arrivederci\"\n                }\n            }\n        ],\n        \"dialogMap\": {\n            \"emptyDialog\": {\n                \"greeting\": \"hi\"\n            },\n            \"partialEmptyDialog\": {\n                \"language\": \"en\",\n                \"greeting\": \"hi\",\n                \"farewell\": {\n                    \"phrase\": \"bye\"\n                }\n            },\n            \"nonEmptyDialog\": {\n                \"greeting\": \"konnichiwa\",\n                \"farewell\": {\n                    \"phrase\": \"sayonara\"\n                }\n            }\n        }\n    }\n}",
                        "params": {
                            "topLevel": {
                                "dialog": {
                                    "language": "en"
                                },
                                "dialogList": [
                                    {},
                                    {
                                        "farewell": {}
                                    },
                                    {
                                        "language": "it",
                                        "greeting": "ciao",
                                        "farewell": {
                                            "phrase": "arrivederci"
                                        }
                                    }
                                ],
                                "dialogMap": {
                                    "emptyDialog": {},
                                    "partialEmptyDialog": {
                                        "language": "en",
                                        "farewell": {}
                                    },
                                    "nonEmptyDialog": {
                                        "greeting": "konnichiwa",
                                        "farewell": {
                                            "phrase": "sayonara"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson10ServerPopulatesNestedDefaultsWhenMissingInRequestBody",
                        "documentation": "Server populates nested default values when missing in request body.",
                        "appliesTo": "server",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "bodyMediaType": "application/json",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"topLevel\": {\n        \"dialog\": {\n            \"language\": \"en\"\n        },\n        \"dialogList\": [\n            {\n            },\n            {\n                \"farewell\": {}\n            },\n            {\n                \"language\": \"it\",\n                \"greeting\": \"ciao\",\n                \"farewell\": {\n                    \"phrase\": \"arrivederci\"\n                }\n            }\n        ],\n        \"dialogMap\": {\n            \"emptyDialog\": {\n            },\n            \"partialEmptyDialog\": {\n                \"language\": \"en\",\n                \"farewell\": {}\n            },\n            \"nonEmptyDialog\": {\n                \"greeting\": \"konnichiwa\",\n                \"farewell\": {\n                    \"phrase\": \"sayonara\"\n                }\n            }\n        }\n    }\n}",
                        "params": {
                            "topLevel": {
                                "dialog": {
                                    "language": "en",
                                    "greeting": "hi"
                                },
                                "dialogList": [
                                    {
                                        "greeting": "hi"
                                    },
                                    {
                                        "greeting": "hi",
                                        "farewell": {
                                            "phrase": "bye"
                                        }
                                    },
                                    {
                                        "language": "it",
                                        "greeting": "ciao",
                                        "farewell": {
                                            "phrase": "arrivederci"
                                        }
                                    }
                                ],
                                "dialogMap": {
                                    "emptyDialog": {
                                        "greeting": "hi"
                                    },
                                    "partialEmptyDialog": {
                                        "language": "en",
                                        "greeting": "hi",
                                        "farewell": {
                                            "phrase": "bye"
                                        }
                                    },
                                    "nonEmptyDialog": {
                                        "greeting": "konnichiwa",
                                        "farewell": {
                                            "phrase": "sayonara"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10ClientPopulatesNestedDefaultsWhenMissingInResponseBody",
                        "documentation": "Client populates nested default values when missing in response body.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"dialog\": {\n        \"language\": \"en\"\n    },\n    \"dialogList\": [\n        {\n        },\n        {\n            \"farewell\": {}\n        },\n        {\n            \"language\": \"it\",\n            \"greeting\": \"ciao\",\n            \"farewell\": {\n                \"phrase\": \"arrivederci\"\n            }\n        }\n    ],\n    \"dialogMap\": {\n        \"emptyDialog\": {\n        },\n        \"partialEmptyDialog\": {\n            \"language\": \"en\",\n            \"farewell\": {}\n        },\n        \"nonEmptyDialog\": {\n            \"greeting\": \"konnichiwa\",\n            \"farewell\": {\n                \"phrase\": \"sayonara\"\n            }\n        }\n    }\n}",
                        "params": {
                            "dialog": {
                                "language": "en",
                                "greeting": "hi"
                            },
                            "dialogList": [
                                {
                                    "greeting": "hi"
                                },
                                {
                                    "greeting": "hi",
                                    "farewell": {
                                        "phrase": "bye"
                                    }
                                },
                                {
                                    "language": "it",
                                    "greeting": "ciao",
                                    "farewell": {
                                        "phrase": "arrivederci"
                                    }
                                }
                            ],
                            "dialogMap": {
                                "emptyDialog": {
                                    "greeting": "hi"
                                },
                                "partialEmptyDialog": {
                                    "language": "en",
                                    "greeting": "hi",
                                    "farewell": {
                                        "phrase": "bye"
                                    }
                                },
                                "nonEmptyDialog": {
                                    "greeting": "konnichiwa",
                                    "farewell": {
                                        "phrase": "sayonara"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "AwsJson10ServerPopulatesNestedDefaultValuesWhenMissingInInResponseParams",
                        "documentation": "Server populates nested default values when missing in response params.",
                        "appliesTo": "server",
                        "tags": [
                            "defaults"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{\n    \"dialog\": {\n        \"language\": \"en\",\n        \"greeting\": \"hi\"\n    },\n    \"dialogList\": [\n        {\n            \"greeting\": \"hi\"\n        },\n        {\n            \"greeting\": \"hi\",\n            \"farewell\": {\n                \"phrase\": \"bye\"\n            }\n        },\n        {\n            \"language\": \"it\",\n            \"greeting\": \"ciao\",\n            \"farewell\": {\n                \"phrase\": \"arrivederci\"\n            }\n        }\n    ],\n    \"dialogMap\": {\n        \"emptyDialog\": {\n            \"greeting\": \"hi\"\n        },\n        \"partialEmptyDialog\": {\n            \"language\": \"en\",\n            \"greeting\": \"hi\",\n            \"farewell\": {\n                \"phrase\": \"bye\"\n            }\n        },\n        \"nonEmptyDialog\": {\n            \"greeting\": \"konnichiwa\",\n            \"farewell\": {\n                \"phrase\": \"sayonara\"\n            }\n        }\n    }\n}",
                        "params": {
                            "dialog": {
                                "language": "en"
                            },
                            "dialogList": [
                                {},
                                {
                                    "farewell": {}
                                },
                                {
                                    "language": "it",
                                    "greeting": "ciao",
                                    "farewell": {
                                        "phrase": "arrivederci"
                                    }
                                }
                            ],
                            "dialogMap": {
                                "emptyDialog": {},
                                "partialEmptyDialog": {
                                    "language": "en",
                                    "farewell": {}
                                },
                                "nonEmptyDialog": {
                                    "greeting": "konnichiwa",
                                    "farewell": {
                                        "phrase": "sayonara"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#OperationWithNestedStructureInput": {
            "type": "structure",
            "members": {
                "topLevel": {
                    "target": "aws.protocoltests.json10#TopLevel",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#OperationWithNestedStructureOutput": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.json10#NestedDefaultsMixin"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#OperationWithRequiredMembers": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.json10#OperationWithRequiredMembersOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10ClientErrorCorrectsWhenServerFailsToSerializeRequiredValues",
                        "documentation": "Client error corrects when server fails to serialize required values.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults",
                            "error-correction"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{}",
                        "params": {
                            "requiredString": "",
                            "requiredBoolean": false,
                            "requiredList": [],
                            "requiredTimestamp": 0,
                            "requiredBlob": "",
                            "requiredByte": 0,
                            "requiredShort": 0,
                            "requiredInteger": 0,
                            "requiredLong": 0,
                            "requiredFloat": 0.0,
                            "requiredDouble": 0.0,
                            "requiredMap": {}
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#OperationWithRequiredMembersOutput": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.json10#RequiredMembersMixin"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#OperationWithRequiredMembersWithDefaults": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.json10#OperationWithRequiredMembersWithDefaultsOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10ClientErrorCorrectsWithDefaultValuesWhenServerFailsToSerializeRequiredValues",
                        "documentation": "Client error corrects with default values when server fails to serialize required values.",
                        "appliesTo": "client",
                        "tags": [
                            "defaults",
                            "error-correction"
                        ],
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "body": "{}",
                        "params": {
                            "requiredString": "hi",
                            "requiredBoolean": true,
                            "requiredList": [],
                            "requiredTimestamp": 1,
                            "requiredBlob": "{}",
                            "requiredByte": 1,
                            "requiredShort": 1,
                            "requiredInteger": 10,
                            "requiredLong": 100,
                            "requiredFloat": 1.0,
                            "requiredDouble": 1.0,
                            "requiredMap": {},
                            "requiredEnum": "FOO",
                            "requiredIntEnum": 1
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#OperationWithRequiredMembersWithDefaultsOutput": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.json10#RequiredMembersWithDefaultsMixin"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#PutWithContentEncoding": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#PutWithContentEncodingInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#requestCompression": {
                    "encodings": [
                        "gzip"
                    ]
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SDKAppliedContentEncoding_awsJson1_0",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "params": {
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    },
                    {
                        "id": "SDKAppendsGzipAndIgnoresHttpProvidedEncoding_awsJson1_0",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header, and the\nuser-provided content-encoding is NOT in the Content-Encoding header since HTTP binding\ntraits are ignored in the awsJson1_0 protocol.\n",
                        "protocol": "aws.protocols#awsJson1_0",
                        "params": {
                            "encoding": "custom",
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#PutWithContentEncodingInput": {
            "type": "structure",
            "members": {
                "encoding": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Encoding"
                    }
                },
                "data": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#RequiredEnum": {
            "type": "enum",
            "members": {
                "FOO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "FOO"
                    }
                },
                "BAR": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "BAR"
                    }
                },
                "BAZ": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "BAZ"
                    }
                }
            }
        },
        "aws.protocoltests.json10#RequiredIntEnum": {
            "type": "intEnum",
            "members": {
                "ONE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 1
                    }
                },
                "TWO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 2
                    }
                }
            }
        },
        "aws.protocoltests.json10#RequiredMembersMixin": {
            "type": "structure",
            "members": {
                "requiredString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredList": {
                    "target": "aws.protocoltests.json10#RequiredStringList",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredBlob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "requiredMap": {
                    "target": "aws.protocoltests.json10#RequiredStringMap",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.json10#RequiredMembersWithDefaultsMixin": {
            "type": "structure",
            "members": {
                "requiredString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#default": "hi",
                        "smithy.api#required": {}
                    }
                },
                "requiredBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#default": true,
                        "smithy.api#required": {}
                    }
                },
                "requiredList": {
                    "target": "aws.protocoltests.json10#RequiredStringList",
                    "traits": {
                        "smithy.api#default": [],
                        "smithy.api#required": {}
                    }
                },
                "requiredTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#default": 1,
                        "smithy.api#required": {}
                    }
                },
                "requiredBlob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#default": "{}",
                        "smithy.api#required": {}
                    }
                },
                "requiredByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#default": 1,
                        "smithy.api#required": {}
                    }
                },
                "requiredShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#default": 1,
                        "smithy.api#required": {}
                    }
                },
                "requiredInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#default": 10,
                        "smithy.api#required": {}
                    }
                },
                "requiredLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#default": 100,
                        "smithy.api#required": {}
                    }
                },
                "requiredFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#default": 1.0,
                        "smithy.api#required": {}
                    }
                },
                "requiredDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#default": 1.0,
                        "smithy.api#required": {}
                    }
                },
                "requiredMap": {
                    "target": "aws.protocoltests.json10#RequiredStringMap",
                    "traits": {
                        "smithy.api#default": {},
                        "smithy.api#required": {}
                    }
                },
                "requiredEnum": {
                    "target": "aws.protocoltests.json10#RequiredEnum",
                    "traits": {
                        "smithy.api#default": "FOO",
                        "smithy.api#required": {}
                    }
                },
                "requiredIntEnum": {
                    "target": "aws.protocoltests.json10#RequiredIntEnum",
                    "traits": {
                        "smithy.api#default": 1,
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.json10#RequiredStringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.json10#RequiredStringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.json10#SimpleScalarProperties": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.json10#SimpleScalarPropertiesInput"
            },
            "output": {
                "target": "aws.protocoltests.json10#SimpleScalarPropertiesOutput"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsJson10SupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"doubleValue\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.SimpleScalarProperties"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "AwsJson10SupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"doubleValue\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.SimpleScalarProperties"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "AwsJson10SupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "method": "POST",
                        "uri": "/",
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"doubleValue\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0",
                            "X-Amz-Target": "JsonRpc10.SimpleScalarProperties"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsJson10SupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"doubleValue\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "AwsJson10SupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"doubleValue\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "AwsJson10SupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#awsJson1_0",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"doubleValue\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.0"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.json10#SimpleScalarPropertiesInput": {
            "type": "structure",
            "members": {
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.json10#SimpleScalarPropertiesOutput": {
            "type": "structure",
            "members": {
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.json10#TestEnum": {
            "type": "enum",
            "members": {
                "FOO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "FOO"
                    }
                },
                "BAR": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "BAR"
                    }
                },
                "BAZ": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "BAZ"
                    }
                }
            }
        },
        "aws.protocoltests.json10#TestIntEnum": {
            "type": "intEnum",
            "members": {
                "ONE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 1
                    }
                },
                "TWO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 2
                    }
                }
            }
        },
        "aws.protocoltests.json10#TestStringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.json10#TestStringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.json10#TopLevel": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.json10#NestedDefaultsMixin"
                }
            ],
            "members": {}
        },
        "aws.protocoltests.misc#AcceptHeaderStarService": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.misc#AcceptHeaderStarServiceInput"
            },
            "output": {
                "target": "aws.protocoltests.misc#AcceptHeaderStarServiceOutput"
            },
            "traits": {
                "smithy.api#documentation": "Service accepts `*` in ACCEPT header",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/test-accept-header"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AcceptHeaderStarRequestTest",
                        "protocol": "aws.protocols#restJson1",
                        "uri": "/test-accept-header",
                        "headers": {
                            "Accept": "application/*"
                        },
                        "params": {},
                        "method": "GET",
                        "appliesTo": "server"
                    },
                    {
                        "id": "AcceptHeaderStarStarRequestTest",
                        "protocol": "aws.protocols#restJson1",
                        "uri": "/test-accept-header",
                        "headers": {
                            "Accept": "*/*"
                        },
                        "params": {},
                        "method": "GET",
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.misc#AcceptHeaderStarServiceInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.misc#AcceptHeaderStarServiceOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.query#AwsQuery": {
            "type": "service",
            "version": "2020-01-08",
            "operations": [
                {
                    "target": "aws.protocoltests.query#DatetimeOffsets"
                },
                {
                    "target": "aws.protocoltests.query#EmptyInputAndEmptyOutput"
                },
                {
                    "target": "aws.protocoltests.query#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.query#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.query#FlattenedXmlMap"
                },
                {
                    "target": "aws.protocoltests.query#FlattenedXmlMapWithXmlName"
                },
                {
                    "target": "aws.protocoltests.query#FlattenedXmlMapWithXmlNamespace"
                },
                {
                    "target": "aws.protocoltests.query#FractionalSeconds"
                },
                {
                    "target": "aws.protocoltests.query#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.query#HostWithPathOperation"
                },
                {
                    "target": "aws.protocoltests.query#IgnoresWrappingXmlName"
                },
                {
                    "target": "aws.protocoltests.query#NestedStructures"
                },
                {
                    "target": "aws.protocoltests.query#NoInputAndNoOutput"
                },
                {
                    "target": "aws.protocoltests.query#NoInputAndOutput"
                },
                {
                    "target": "aws.protocoltests.query#PutWithContentEncoding"
                },
                {
                    "target": "aws.protocoltests.query#QueryIdempotencyTokenAutoFill"
                },
                {
                    "target": "aws.protocoltests.query#QueryLists"
                },
                {
                    "target": "aws.protocoltests.query#QueryMaps"
                },
                {
                    "target": "aws.protocoltests.query#QueryTimestamps"
                },
                {
                    "target": "aws.protocoltests.query#RecursiveXmlShapes"
                },
                {
                    "target": "aws.protocoltests.query#SimpleInputParams"
                },
                {
                    "target": "aws.protocoltests.query#SimpleScalarXmlProperties"
                },
                {
                    "target": "aws.protocoltests.query#XmlBlobs"
                },
                {
                    "target": "aws.protocoltests.query#XmlEmptyBlobs"
                },
                {
                    "target": "aws.protocoltests.query#XmlEmptyLists"
                },
                {
                    "target": "aws.protocoltests.query#XmlEmptyMaps"
                },
                {
                    "target": "aws.protocoltests.query#XmlEnums"
                },
                {
                    "target": "aws.protocoltests.query#XmlIntEnums"
                },
                {
                    "target": "aws.protocoltests.query#XmlLists"
                },
                {
                    "target": "aws.protocoltests.query#XmlMaps"
                },
                {
                    "target": "aws.protocoltests.query#XmlMapsXmlName"
                },
                {
                    "target": "aws.protocoltests.query#XmlNamespaces"
                },
                {
                    "target": "aws.protocoltests.query#XmlTimestamps"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Query Protocol"
                },
                "aws.auth#sigv4": {
                    "name": "awsquery"
                },
                "aws.protocols#awsQuery": {},
                "smithy.api#documentation": "A query service that sends query requests and XML responses.",
                "smithy.api#title": "Sample Query Protocol Service",
                "smithy.api#xmlNamespace": {
                    "uri": "https://example.com/"
                }
            }
        },
        "aws.protocoltests.query#ComplexError": {
            "type": "structure",
            "members": {
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.query#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryComplexError",
                        "protocol": "aws.protocols#awsQuery",
                        "params": {
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "body": "<ErrorResponse>\n   <Error>\n      <Type>Sender</Type>\n      <Code>ComplexError</Code>\n      <TopLevel>Top level</TopLevel>\n      <Nested>\n          <Foo>bar</Foo>\n      </Nested>\n   </Error>\n   <RequestId>foo-id</RequestId>\n</ErrorResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.query#ComplexMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.query#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.query#CustomCodeError": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "aws.protocols#awsQueryError": {
                    "code": "Customized",
                    "httpResponseCode": 402
                },
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryCustomizedError",
                        "documentation": "Parses customized XML errors",
                        "protocol": "aws.protocols#awsQuery",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 402,
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "body": "<ErrorResponse>\n   <Error>\n      <Type>Sender</Type>\n      <Code>Customized</Code>\n      <Message>Hi</Message>\n   </Error>\n   <RequestId>foo-id</RequestId>\n</ErrorResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.query#DatetimeOffsets": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#DatetimeOffsetsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsQueryDateTimeWithNegativeOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<DatetimeOffsetsResponse xmlns=\"https://example.com/\">\n    <DatetimeOffsetsResult>\n        <datetime>2019-12-16T22:48:18-01:00</datetime>\n    </DatetimeOffsetsResult>\n</DatetimeOffsetsResponse>\n",
                        "params": {
                            "datetime": 1576540098
                        },
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "AwsQueryDateTimeWithPositiveOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<DatetimeOffsetsResponse xmlns=\"https://example.com/\">\n    <DatetimeOffsetsResult>\n        <datetime>2019-12-17T00:48:18+01:00</datetime>\n    </DatetimeOffsetsResult>\n</DatetimeOffsetsResponse>\n",
                        "params": {
                            "datetime": 1576540098
                        },
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#DatetimeOffsetsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.query#EmptyInputAndEmptyOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#EmptyInputAndEmptyOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.query#EmptyInputAndEmptyOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response members.\n\nWhile this should be rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryEmptyInputAndEmptyOutput",
                        "documentation": "Empty input serializes no extra query params",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=EmptyInputAndEmptyOutput&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryEmptyInputAndEmptyOutput",
                        "documentation": "Empty output",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.query#EmptyInputAndEmptyOutputInput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.query#EmptyInputAndEmptyOutputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.query#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsQueryEndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=EndpointOperation&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "aws.protocoltests.query#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#HostLabelInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AwsQueryEndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=EndpointWithHostLabelOperation&Version=2020-01-08&label=bar",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#FlattenedXmlMap": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#FlattenedXmlMapOutput"
            },
            "traits": {
                "smithy.api#documentation": "Flattened maps",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryQueryFlattenedXmlMap",
                        "documentation": "Serializes flattened XML maps in responses",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<FlattenedXmlMapResponse xmlns=\"https://example.com/\">\n    <FlattenedXmlMapResult>\n        <myMap>\n            <key>foo</key>\n            <value>Foo</value>\n        </myMap>\n        <myMap>\n            <key>baz</key>\n            <value>Baz</value>\n        </myMap>\n    </FlattenedXmlMapResult>\n</FlattenedXmlMapResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": "Foo",
                                "baz": "Baz"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                }
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapWithXmlName": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#FlattenedXmlMapWithXmlNameOutput"
            },
            "traits": {
                "smithy.api#documentation": "Flattened maps with @xmlName",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryQueryFlattenedXmlMapWithXmlName",
                        "documentation": "Serializes flattened XML maps in responses that have xmlName on members",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<FlattenedXmlMapWithXmlNameResponse xmlns=\"https://example.com/\">\n    <FlattenedXmlMapWithXmlNameResult>\n        <KVP>\n            <K>a</K>\n            <V>A</V>\n        </KVP>\n        <KVP>\n            <K>b</K>\n            <V>B</V>\n        </KVP>\n    </FlattenedXmlMapWithXmlNameResult>\n</FlattenedXmlMapWithXmlNameResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapWithXmlNameOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.query#FlattenedXmlMapWithXmlNameOutputMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "KVP"
                    }
                }
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapWithXmlNameOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "K"
                }
            },
            "value": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "V"
                }
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapWithXmlNamespace": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#FlattenedXmlMapWithXmlNamespaceOutput"
            },
            "traits": {
                "smithy.api#documentation": "Flattened maps with @xmlNamespace and @xmlName",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryQueryFlattenedXmlMapWithXmlNamespace",
                        "documentation": "Serializes flattened XML maps in responses that have xmlNamespace and xmlName on members",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<FlattenedXmlMapWithXmlNamespaceResponse xmlns=\"https://example.com/\">\n    <FlattenedXmlMapWithXmlNamespaceResult>\n        <KVP xmlns=\"https://the-member.example.com\">\n            <K xmlns=\"https://the-key.example.com\">a</K>\n            <V xmlns=\"https://the-value.example.com\">A</V>\n        </KVP>\n        <KVP xmlns=\"https://the-member.example.com\">\n            <K xmlns=\"https://the-key.example.com\">b</K>\n            <V xmlns=\"https://the-value.example.com\">B</V>\n        </KVP>\n    </FlattenedXmlMapWithXmlNamespaceResult>\n</FlattenedXmlMapWithXmlNamespaceResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapWithXmlNamespaceOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.query#FlattenedXmlMapWithXmlNamespaceOutputMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "KVP",
                        "smithy.api#xmlNamespace": {
                            "uri": "https://the-member.example.com"
                        }
                    }
                }
            }
        },
        "aws.protocoltests.query#FlattenedXmlMapWithXmlNamespaceOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "K",
                    "smithy.api#xmlNamespace": {
                        "uri": "https://the-key.example.com"
                    }
                }
            },
            "value": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "V",
                    "smithy.api#xmlNamespace": {
                        "uri": "https://the-value.example.com"
                    }
                }
            }
        },
        "aws.protocoltests.query#FractionalSeconds": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#FractionalSecondsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "AwsQueryDateTimeWithFractionalSeconds",
                        "documentation": "Ensures that clients can correctly parse datetime timestamps with fractional seconds",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<FractionalSecondsResponse xmlns=\"https://example.com/\">\n    <FractionalSecondsResult>\n        <datetime>2000-01-02T20:34:56.123Z</datetime>\n    </FractionalSecondsResult>\n</FractionalSecondsResponse>\n",
                        "params": {
                            "datetime": 9.46845296123E8
                        },
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#FractionalSecondsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.query#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.query#ComplexError"
                },
                {
                    "target": "aws.protocoltests.query#CustomCodeError"
                },
                {
                    "target": "aws.protocoltests.query#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has three possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A BadRequest error.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryGreetingWithErrors",
                        "documentation": "Ensures that operations with errors successfully know how to deserialize the successful response",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "body": "<GreetingWithErrorsResponse xmlns=\"https://example.com/\">\n    <GreetingWithErrorsResult>\n        <greeting>Hello</greeting>\n    </GreetingWithErrorsResult>\n</GreetingWithErrorsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "params": {
                            "greeting": "Hello"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.query#HostLabelInput": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.query#HostWithPathOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryHostWithPath",
                        "documentation": "Custom endpoints supplied by users can have paths",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/custom/",
                        "body": "Action=HostWithPathOperation&Version=2020-01-08",
                        "host": "example.com/custom",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#IgnoresWrappingXmlName": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#IgnoresWrappingXmlNameOutput"
            },
            "traits": {
                "smithy.api#documentation": "The xmlName trait on the output structure is ignored in AWS Query.\n\nThe wrapping element is always operation name + \"Response\", and\ninside of that wrapper is another wrapper named operation name + \"Result\".",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryIgnoresWrappingXmlName",
                        "documentation": "The xmlName trait on the output structure is ignored in AWS Query",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<IgnoresWrappingXmlNameResponse xmlns=\"https://example.com/\">\n    <IgnoresWrappingXmlNameResult>\n        <foo>bar</foo>\n    </IgnoresWrappingXmlNameResult>\n</IgnoresWrappingXmlNameResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "foo": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#IgnoresWrappingXmlNameOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#xmlName": "IgnoreMe"
            }
        },
        "aws.protocoltests.query#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryInvalidGreetingError",
                        "documentation": "Parses simple XML errors",
                        "protocol": "aws.protocols#awsQuery",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "body": "<ErrorResponse>\n   <Error>\n      <Type>Sender</Type>\n      <Code>InvalidGreeting</Code>\n      <Message>Hi</Message>\n   </Error>\n   <RequestId>foo-id</RequestId>\n</ErrorResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.query#ListWithMemberNamespace": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlNamespace": {
                        "uri": "https://xml-member.example.com"
                    }
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "https://xml-list.example.com"
                }
            }
        },
        "aws.protocoltests.query#ListWithNamespace": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "https://xml-list.example.com"
                }
            }
        },
        "aws.protocoltests.query#ListWithXmlName": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.query#MapOfLists": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringList"
            }
        },
        "aws.protocoltests.query#MapWithXmlName": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "K"
                }
            },
            "value": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "V"
                }
            }
        },
        "aws.protocoltests.query#NestedStructWithList": {
            "type": "structure",
            "members": {
                "ListArg": {
                    "target": "aws.protocoltests.shared#StringList"
                }
            }
        },
        "aws.protocoltests.query#NestedStructWithMap": {
            "type": "structure",
            "members": {
                "MapArg": {
                    "target": "aws.protocoltests.shared#StringMap"
                }
            }
        },
        "aws.protocoltests.query#NestedStructures": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#NestedStructuresInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes nested and recursive structure members.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "NestedStructures",
                        "documentation": "Serializes nested structures using dots",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=NestedStructures&Version=2020-01-08&Nested.StringArg=foo&Nested.OtherArg=true&Nested.RecursiveArg.StringArg=baz",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Nested": {
                                "StringArg": "foo",
                                "OtherArg": true,
                                "RecursiveArg": {
                                    "StringArg": "baz"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#NestedStructuresInput": {
            "type": "structure",
            "members": {
                "Nested": {
                    "target": "aws.protocoltests.query#StructArg"
                }
            }
        },
        "aws.protocoltests.query#NoInputAndNoOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input or output.\n\nWhile this should be rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryNoInputAndNoOutput",
                        "documentation": "No input serializes no additional query params",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=NoInputAndNoOutput&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryNoInputAndNoOutput",
                        "documentation": "Empty output. Note that no assertion is made on the output body itself.",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.query#NoInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#NoInputAndOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.query#NoInputAndOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request payload or response members.\n\nWhile this should be rare, code generators must support this.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryNoInputAndOutput",
                        "documentation": "No input serializes no payload",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=NoInputAndOutput&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryNoInputAndOutput",
                        "documentation": "Empty output",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.query#NoInputAndOutputInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.query#NoInputAndOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.query#PutWithContentEncoding": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#PutWithContentEncodingInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#requestCompression": {
                    "encodings": [
                        "gzip"
                    ]
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SDKAppliedContentEncoding_awsQuery",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header.",
                        "protocol": "aws.protocols#awsQuery",
                        "params": {
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    },
                    {
                        "id": "SDKAppendsGzipAndIgnoresHttpProvidedEncoding_awsQuery",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header, and the\nuser-provided content-encoding is NOT in the Content-Encoding header since HTTP binding\ntraits are ignored in the awsQuery protocol.\n",
                        "protocol": "aws.protocols#awsQuery",
                        "params": {
                            "encoding": "custom",
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#PutWithContentEncodingInput": {
            "type": "structure",
            "members": {
                "encoding": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Encoding"
                    }
                },
                "data": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.query#QueryIdempotencyTokenAutoFill": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#QueryIdempotencyTokenAutoFillInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Automatically adds idempotency tokens.",
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryProtocolIdempotencyTokenAutoFill",
                        "documentation": "Automatically adds idempotency token when not set",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=QueryIdempotencyTokenAutoFill&Version=2020-01-08&token=00000000-0000-4000-8000-000000000000",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "appliesTo": "client"
                    },
                    {
                        "id": "QueryProtocolIdempotencyTokenAutoFillIsSet",
                        "documentation": "Uses the given idempotency token as-is",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=QueryIdempotencyTokenAutoFill&Version=2020-01-08&token=00000000-0000-4000-8000-000000000123",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "token": "00000000-0000-4000-8000-000000000123"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#QueryIdempotencyTokenAutoFillInput": {
            "type": "structure",
            "members": {
                "token": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#idempotencyToken": {}
                    }
                }
            }
        },
        "aws.protocoltests.query#QueryLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#QueryListsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes simple and complex lists.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryLists",
                        "documentation": "Serializes query lists",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&ListArg.member.1=foo&ListArg.member.2=bar&ListArg.member.3=baz&ComplexListArg.member.1.hi=hello&ComplexListArg.member.2.hi=hola",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArg": [
                                "foo",
                                "bar",
                                "baz"
                            ],
                            "ComplexListArg": [
                                {
                                    "hi": "hello"
                                },
                                {
                                    "hi": "hola"
                                }
                            ]
                        }
                    },
                    {
                        "id": "EmptyQueryLists",
                        "documentation": "Serializes empty query lists",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&ListArg=",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArg": []
                        }
                    },
                    {
                        "id": "FlattenedQueryLists",
                        "documentation": "Flattens query lists by repeating the member name and removing the member element",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&FlattenedListArg.1=A&FlattenedListArg.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "FlattenedListArg": [
                                "A",
                                "B"
                            ]
                        }
                    },
                    {
                        "id": "QueryListArgWithXmlNameMember",
                        "documentation": "Changes the member of lists using xmlName trait",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&ListArgWithXmlNameMember.item.1=A&ListArgWithXmlNameMember.item.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ListArgWithXmlNameMember": [
                                "A",
                                "B"
                            ]
                        }
                    },
                    {
                        "id": "QueryFlattenedListArgWithXmlName",
                        "documentation": "Changes the name of flattened lists using xmlName trait on the structure member",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&Hi.1=A&Hi.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "FlattenedListArgWithXmlName": [
                                "A",
                                "B"
                            ]
                        }
                    },
                    {
                        "id": "QueryNestedStructWithList",
                        "documentation": "Nested structure with a list member",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryLists&Version=2020-01-08&NestedWithList.ListArg.member.1=A&NestedWithList.ListArg.member.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "NestedWithList": {
                                "ListArg": [
                                    "A",
                                    "B"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#QueryListsInput": {
            "type": "structure",
            "members": {
                "ListArg": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "ComplexListArg": {
                    "target": "aws.protocoltests.shared#GreetingList"
                },
                "FlattenedListArg": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "ListArgWithXmlNameMember": {
                    "target": "aws.protocoltests.query#ListWithXmlName"
                },
                "FlattenedListArgWithXmlName": {
                    "target": "aws.protocoltests.query#ListWithXmlName",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "Hi"
                    }
                },
                "NestedWithList": {
                    "target": "aws.protocoltests.query#NestedStructWithList"
                }
            }
        },
        "aws.protocoltests.query#QueryMaps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#QueryMapsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes simple and complex maps.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QuerySimpleQueryMaps",
                        "documentation": "Serializes query maps",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&MapArg.entry.1.key=bar&MapArg.entry.1.value=Bar&MapArg.entry.2.key=foo&MapArg.entry.2.value=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "MapArg": {
                                "bar": "Bar",
                                "foo": "Foo"
                            }
                        }
                    },
                    {
                        "id": "QuerySimpleQueryMapsWithXmlName",
                        "documentation": "Serializes query maps and uses xmlName",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&Foo.entry.1.key=foo&Foo.entry.1.value=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "RenamedMapArg": {
                                "foo": "Foo"
                            }
                        }
                    },
                    {
                        "id": "QueryComplexQueryMaps",
                        "documentation": "Serializes complex query maps",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&ComplexMapArg.entry.1.key=bar&ComplexMapArg.entry.1.value.hi=Bar&ComplexMapArg.entry.2.key=foo&ComplexMapArg.entry.2.value.hi=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "ComplexMapArg": {
                                "bar": {
                                    "hi": "Bar"
                                },
                                "foo": {
                                    "hi": "Foo"
                                }
                            }
                        }
                    },
                    {
                        "id": "QueryEmptyQueryMaps",
                        "documentation": "Does not serialize empty query maps",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "MapArg": {}
                        }
                    },
                    {
                        "id": "QueryQueryMapWithMemberXmlName",
                        "documentation": "Serializes query maps where the member has an xmlName trait",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&MapWithXmlMemberName.entry.1.K=bar&MapWithXmlMemberName.entry.1.V=Bar&MapWithXmlMemberName.entry.2.K=foo&MapWithXmlMemberName.entry.2.V=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "MapWithXmlMemberName": {
                                "bar": "Bar",
                                "foo": "Foo"
                            }
                        }
                    },
                    {
                        "id": "QueryFlattenedQueryMaps",
                        "documentation": "Serializes flattened query maps",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&FlattenedMap.1.key=bar&FlattenedMap.1.value=Bar&FlattenedMap.2.key=foo&FlattenedMap.2.value=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "FlattenedMap": {
                                "bar": "Bar",
                                "foo": "Foo"
                            }
                        }
                    },
                    {
                        "id": "QueryFlattenedQueryMapsWithXmlName",
                        "documentation": "Serializes flattened query maps that use an xmlName",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&Hi.1.K=bar&Hi.1.V=Bar&Hi.2.K=foo&Hi.2.V=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "FlattenedMapWithXmlName": {
                                "bar": "Bar",
                                "foo": "Foo"
                            }
                        }
                    },
                    {
                        "id": "QueryQueryMapOfLists",
                        "documentation": "Serializes query map of lists",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&MapOfLists.entry.1.key=bar&MapOfLists.entry.1.value.member.1=C&MapOfLists.entry.1.value.member.2=D&MapOfLists.entry.2.key=foo&MapOfLists.entry.2.value.member.1=A&MapOfLists.entry.2.value.member.2=B",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "MapOfLists": {
                                "bar": [
                                    "C",
                                    "D"
                                ],
                                "foo": [
                                    "A",
                                    "B"
                                ]
                            }
                        }
                    },
                    {
                        "id": "QueryNestedStructWithMap",
                        "documentation": "Serializes nested struct with map member",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "body": "Action=QueryMaps&Version=2020-01-08&NestedStructWithMap.MapArg.entry.1.key=bar&NestedStructWithMap.MapArg.entry.1.value=Bar&NestedStructWithMap.MapArg.entry.2.key=foo&NestedStructWithMap.MapArg.entry.2.value=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "NestedStructWithMap": {
                                "MapArg": {
                                    "bar": "Bar",
                                    "foo": "Foo"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#QueryMapsInput": {
            "type": "structure",
            "members": {
                "MapArg": {
                    "target": "aws.protocoltests.shared#StringMap"
                },
                "RenamedMapArg": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#xmlName": "Foo"
                    }
                },
                "ComplexMapArg": {
                    "target": "aws.protocoltests.query#ComplexMap"
                },
                "MapWithXmlMemberName": {
                    "target": "aws.protocoltests.query#MapWithXmlName"
                },
                "FlattenedMap": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "FlattenedMapWithXmlName": {
                    "target": "aws.protocoltests.query#MapWithXmlName",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "Hi"
                    }
                },
                "MapOfLists": {
                    "target": "aws.protocoltests.query#MapOfLists"
                },
                "NestedStructWithMap": {
                    "target": "aws.protocoltests.query#NestedStructWithMap"
                }
            }
        },
        "aws.protocoltests.query#QueryTimestamps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#QueryTimestampsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes timestamps.\n\n1. Timestamps are serialized as RFC 3339 date-time values by default.\n2. A timestampFormat trait on a member changes the format.\n3. A timestampFormat trait on the shape targeted by the member changes the format.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryTimestampsInput",
                        "documentation": "Serializes timestamps",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=QueryTimestamps&Version=2020-01-08&normalFormat=2015-01-25T08%3A00%3A00Z&epochMember=1422172800&epochTarget=1422172800",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "normalFormat": 1422172800,
                            "epochMember": 1422172800,
                            "epochTarget": 1422172800
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#QueryTimestampsInput": {
            "type": "structure",
            "members": {
                "normalFormat": {
                    "target": "smithy.api#Timestamp"
                },
                "epochMember": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "epochTarget": {
                    "target": "aws.protocoltests.shared#EpochSeconds"
                }
            }
        },
        "aws.protocoltests.query#RecursiveXmlShapes": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#RecursiveXmlShapesOutput"
            },
            "traits": {
                "smithy.api#documentation": "Recursive shapes",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryRecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<RecursiveXmlShapesResponse xmlns=\"https://example.com/\">\n    <RecursiveXmlShapesResult>\n        <nested>\n            <foo>Foo1</foo>\n            <nested>\n                <bar>Bar1</bar>\n                <recursiveMember>\n                    <foo>Foo2</foo>\n                    <nested>\n                        <bar>Bar2</bar>\n                    </nested>\n                </recursiveMember>\n            </nested>\n        </nested>\n    </RecursiveXmlShapesResult>\n</RecursiveXmlShapesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#RecursiveXmlShapesOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.query#RecursiveXmlShapesOutputNested1"
                }
            }
        },
        "aws.protocoltests.query#RecursiveXmlShapesOutputNested1": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                },
                "nested": {
                    "target": "aws.protocoltests.query#RecursiveXmlShapesOutputNested2"
                }
            }
        },
        "aws.protocoltests.query#RecursiveXmlShapesOutputNested2": {
            "type": "structure",
            "members": {
                "bar": {
                    "target": "smithy.api#String"
                },
                "recursiveMember": {
                    "target": "aws.protocoltests.query#RecursiveXmlShapesOutputNested1"
                }
            }
        },
        "aws.protocoltests.query#RenamedListMembers": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.query#SimpleInputParams": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.query#SimpleInputParamsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test serializes strings, numbers, and boolean values.",
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QuerySimpleInputParamsStrings",
                        "documentation": "Serializes strings",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Foo=val1&Bar=val2",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Foo": "val1",
                            "Bar": "val2"
                        }
                    },
                    {
                        "id": "QuerySimpleInputParamsStringAndBooleanTrue",
                        "documentation": "Serializes booleans that are true",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Foo=val1&Baz=true",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Foo": "val1",
                            "Baz": true
                        }
                    },
                    {
                        "id": "QuerySimpleInputParamsStringsAndBooleanFalse",
                        "documentation": "Serializes booleans that are false",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Baz=false",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Baz": false
                        }
                    },
                    {
                        "id": "QuerySimpleInputParamsInteger",
                        "documentation": "Serializes integers",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Bam=10",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Bam": 10
                        }
                    },
                    {
                        "id": "QuerySimpleInputParamsFloat",
                        "documentation": "Serializes floats",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Boo=10.8",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Boo": 10.8
                        }
                    },
                    {
                        "id": "QuerySimpleInputParamsBlob",
                        "documentation": "Blobs are base64 encoded in the query string",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&Qux=dmFsdWU%3D",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "Qux": "value"
                        }
                    },
                    {
                        "id": "QueryEnums",
                        "documentation": "Serializes enums in the query string",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FooEnum=Foo",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "FooEnum": "Foo"
                        }
                    },
                    {
                        "id": "QueryIntEnums",
                        "documentation": "Serializes intEnums in the query string",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "body": "Action=SimpleInputParams&Version=2020-01-08&IntegerEnum=1",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "params": {
                            "IntegerEnum": 1
                        }
                    },
                    {
                        "id": "AwsQuerySupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FloatValue=NaN&Boo=NaN",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "FloatValue": "NaN",
                            "Boo": "NaN"
                        }
                    },
                    {
                        "id": "AwsQuerySupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FloatValue=Infinity&Boo=Infinity",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "FloatValue": "Infinity",
                            "Boo": "Infinity"
                        }
                    },
                    {
                        "id": "AwsQuerySupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#awsQuery",
                        "method": "POST",
                        "uri": "/",
                        "body": "Action=SimpleInputParams&Version=2020-01-08&FloatValue=-Infinity&Boo=-Infinity",
                        "bodyMediaType": "application/x-www-form-urlencoded",
                        "headers": {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "FloatValue": "-Infinity",
                            "Boo": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#SimpleInputParamsInput": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String"
                },
                "Bar": {
                    "target": "smithy.api#String"
                },
                "Baz": {
                    "target": "smithy.api#Boolean"
                },
                "Bam": {
                    "target": "smithy.api#Integer"
                },
                "FloatValue": {
                    "target": "smithy.api#Float"
                },
                "Boo": {
                    "target": "smithy.api#Double"
                },
                "Qux": {
                    "target": "smithy.api#Blob"
                },
                "FooEnum": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "IntegerEnum": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                }
            }
        },
        "aws.protocoltests.query#SimpleScalarXmlProperties": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#SimpleScalarXmlPropertiesOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QuerySimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <SimpleScalarXmlPropertiesResult>\n        <stringValue>string</stringValue>\n        <emptyStringValue/>\n        <trueBooleanValue>true</trueBooleanValue>\n        <falseBooleanValue>false</falseBooleanValue>\n        <byteValue>1</byteValue>\n        <shortValue>2</shortValue>\n        <integerValue>3</integerValue>\n        <longValue>4</longValue>\n        <floatValue>5.5</floatValue>\n        <DoubleDribble>6.5</DoubleDribble>\n    </SimpleScalarXmlPropertiesResult>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "stringValue": "string",
                            "emptyStringValue": "",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "AwsQuerySupportsNaNFloatOutputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <SimpleScalarXmlPropertiesResult>\n        <floatValue>NaN</floatValue>\n        <DoubleDribble>NaN</DoubleDribble>\n    </SimpleScalarXmlPropertiesResult>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "AwsQuerySupportsInfinityFloatOutputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <SimpleScalarXmlPropertiesResult>\n        <floatValue>Infinity</floatValue>\n        <DoubleDribble>Infinity</DoubleDribble>\n    </SimpleScalarXmlPropertiesResult>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "AwsQuerySupportsNegativeInfinityFloatOutputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<SimpleScalarXmlPropertiesResponse xmlns=\"https://example.com/\">\n    <SimpleScalarXmlPropertiesResult>\n        <floatValue>-Infinity</floatValue>\n        <DoubleDribble>-Infinity</DoubleDribble>\n    </SimpleScalarXmlPropertiesResult>\n</SimpleScalarXmlPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#SimpleScalarXmlPropertiesOutput": {
            "type": "structure",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "emptyStringValue": {
                    "target": "smithy.api#String"
                },
                "trueBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "falseBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#xmlName": "DoubleDribble"
                    }
                }
            }
        },
        "aws.protocoltests.query#StructArg": {
            "type": "structure",
            "members": {
                "StringArg": {
                    "target": "smithy.api#String"
                },
                "OtherArg": {
                    "target": "smithy.api#Boolean"
                },
                "RecursiveArg": {
                    "target": "aws.protocoltests.query#StructArg"
                }
            }
        },
        "aws.protocoltests.query#StructureList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.query#StructureListMember",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.query#StructureListMember": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "value"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "other"
                    }
                }
            }
        },
        "aws.protocoltests.query#XmlBlobs": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlBlobsOutput"
            },
            "traits": {
                "smithy.api#documentation": "Blobs are base64 encoded",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlBlobsResponse xmlns=\"https://example.com/\">\n    <XmlBlobsResult>\n        <data>dmFsdWU=</data>\n    </XmlBlobsResult>\n</XmlBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlBlobsOutput": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            }
        },
        "aws.protocoltests.query#XmlEmptyBlobs": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlBlobsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlEmptyBlobs",
                        "documentation": "Empty blobs are deserialized as empty string",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlEmptyBlobsResponse xmlns=\"https://example.com/\">\n    <XmlEmptyBlobsResult>\n        <data></data>\n    </XmlEmptyBlobsResult>\n</XmlEmptyBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "data": ""
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "QueryXmlEmptySelfClosedBlobs",
                        "documentation": "Empty self closed blobs are deserialized as empty string",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlEmptyBlobsResponse xmlns=\"https://example.com/\">\n    <XmlEmptyBlobsResult>\n        <data/>\n    </XmlEmptyBlobsResult>\n</XmlEmptyBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "data": ""
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlEmptyLists": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlListsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlEmptyLists",
                        "documentation": "Deserializes empty XML lists",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlEmptyListsResponse xmlns=\"https://example.com/\">\n    <XmlEmptyListsResult>\n        <stringList/>\n        <stringSet></stringSet>\n    </XmlEmptyListsResult>\n</XmlEmptyListsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "stringList": [],
                            "stringSet": []
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlEmptyMaps": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlMapsOutput"
            },
            "traits": {
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlEmptyMaps",
                        "documentation": "Deserializes Empty XML maps",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlEmptyMapsResponse xmlns=\"https://example.com/\">\n    <XmlEmptyMapsResult>\n        <myMap>\n        </myMap>\n    </XmlEmptyMapsResult>\n</XmlEmptyMapsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {}
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "QueryXmlEmptySelfClosedMaps",
                        "documentation": "Deserializes Self-Closed XML maps",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlEmptyMapsResponse xmlns=\"https://example.com/\">\n    <XmlEmptyMapsResult>\n        <myMap/>\n    </XmlEmptyMapsResult>\n</XmlEmptyMapsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {}
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlEnums": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlEnumsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlEnumsResponse xmlns=\"https://example.com/\">\n    <XmlEnumsResult>\n        <fooEnum1>Foo</fooEnum1>\n        <fooEnum2>0</fooEnum2>\n        <fooEnum3>1</fooEnum3>\n        <fooEnumList>\n            <member>Foo</member>\n            <member>0</member>\n        </fooEnumList>\n        <fooEnumSet>\n            <member>Foo</member>\n            <member>0</member>\n        </fooEnumSet>\n        <fooEnumMap>\n            <entry>\n                <key>hi</key>\n                <value>Foo</value>\n            </entry>\n            <entry>\n                <key>zero</key>\n                <value>0</value>\n            </entry>\n        </fooEnumMap>\n    </XmlEnumsResult>\n</XmlEnumsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlEnumsOutput": {
            "type": "structure",
            "members": {
                "fooEnum1": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum2": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum3": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "fooEnumSet": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "fooEnumMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap"
                }
            }
        },
        "aws.protocoltests.query#XmlIntEnums": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlIntEnumsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlIntEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlIntEnumsResponse xmlns=\"https://example.com/\">\n    <XmlIntEnumsResult>\n        <intEnum1>1</intEnum1>\n        <intEnum2>2</intEnum2>\n        <intEnum3>3</intEnum3>\n        <intEnumList>\n            <member>1</member>\n            <member>2</member>\n        </intEnumList>\n        <intEnumSet>\n            <member>1</member>\n            <member>2</member>\n        </intEnumSet>\n        <intEnumMap>\n            <entry>\n                <key>a</key>\n                <value>1</value>\n            </entry>\n            <entry>\n                <key>b</key>\n                <value>2</value>\n            </entry>\n        </intEnumMap>\n    </XmlIntEnumsResult>\n</XmlIntEnumsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "intEnum1": 1,
                            "intEnum2": 2,
                            "intEnum3": 3,
                            "intEnumList": [
                                1,
                                2
                            ],
                            "intEnumSet": [
                                1,
                                2
                            ],
                            "intEnumMap": {
                                "a": 1,
                                "b": 2
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlIntEnumsOutput": {
            "type": "structure",
            "members": {
                "intEnum1": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum2": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum3": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "intEnumSet": {
                    "target": "aws.protocoltests.shared#IntegerEnumSet"
                },
                "intEnumMap": {
                    "target": "aws.protocoltests.shared#IntegerEnumMap"
                }
            }
        },
        "aws.protocoltests.query#XmlLists": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlListsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This test case serializes XML lists for the following cases for both\ninput and output:\n\n1. Normal XML lists.\n2. Normal XML sets.\n3. XML lists of lists.\n4. XML lists with @xmlName on its members\n5. Flattened XML lists.\n6. Flattened XML lists with @xmlName.\n7. Lists of structures.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlLists",
                        "documentation": "Tests for XML list serialization",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlListsResponse xmlns=\"https://example.com/\">\n    <XmlListsResult>\n        <stringList>\n            <member>foo</member>\n            <member>bar</member>\n        </stringList>\n        <stringSet>\n            <member>foo</member>\n            <member>bar</member>\n        </stringSet>\n        <integerList>\n            <member>1</member>\n            <member>2</member>\n        </integerList>\n        <booleanList>\n            <member>true</member>\n            <member>false</member>\n        </booleanList>\n        <timestampList>\n            <member>2014-04-29T18:30:38Z</member>\n            <member>2014-04-29T18:30:38Z</member>\n        </timestampList>\n        <enumList>\n            <member>Foo</member>\n            <member>0</member>\n        </enumList>\n        <intEnumList>\n            <member>1</member>\n            <member>2</member>\n        </intEnumList>\n        <nestedStringList>\n            <member>\n                <member>foo</member>\n                <member>bar</member>\n            </member>\n            <member>\n                <member>baz</member>\n                <member>qux</member>\n            </member>\n        </nestedStringList>\n        <renamed>\n            <item>foo</item>\n            <item>bar</item>\n        </renamed>\n        <flattenedList>hi</flattenedList>\n        <flattenedList>bye</flattenedList>\n        <customName>yep</customName>\n        <customName>nope</customName>\n        <flattenedListWithMemberNamespace xmlns=\"https://xml-member.example.com\">a</flattenedListWithMemberNamespace>\n        <flattenedListWithMemberNamespace xmlns=\"https://xml-member.example.com\">b</flattenedListWithMemberNamespace>\n        <flattenedListWithNamespace>a</flattenedListWithNamespace>\n        <flattenedListWithNamespace>b</flattenedListWithNamespace>\n        <myStructureList>\n            <item>\n                <value>1</value>\n                <other>2</other>\n            </item>\n            <item>\n                <value>3</value>\n                <other>4</other>\n            </item>\n        </myStructureList>\n    </XmlListsResult>\n</XmlListsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "intEnumList": [
                                1,
                                2
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "renamedListMembers": [
                                "foo",
                                "bar"
                            ],
                            "flattenedList": [
                                "hi",
                                "bye"
                            ],
                            "flattenedList2": [
                                "yep",
                                "nope"
                            ],
                            "flattenedListWithMemberNamespace": [
                                "a",
                                "b"
                            ],
                            "flattenedListWithNamespace": [
                                "a",
                                "b"
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlListsOutput": {
            "type": "structure",
            "members": {
                "stringList": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "stringSet": {
                    "target": "aws.protocoltests.shared#StringSet"
                },
                "integerList": {
                    "target": "aws.protocoltests.shared#IntegerList"
                },
                "booleanList": {
                    "target": "aws.protocoltests.shared#BooleanList"
                },
                "timestampList": {
                    "target": "aws.protocoltests.shared#TimestampList"
                },
                "enumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "nestedStringList": {
                    "target": "aws.protocoltests.shared#NestedStringList"
                },
                "renamedListMembers": {
                    "target": "aws.protocoltests.query#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlName": "renamed"
                    }
                },
                "flattenedList": {
                    "target": "aws.protocoltests.query#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "flattenedList2": {
                    "target": "aws.protocoltests.query#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "customName"
                    }
                },
                "flattenedListWithMemberNamespace": {
                    "target": "aws.protocoltests.query#ListWithMemberNamespace",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "flattenedListWithNamespace": {
                    "target": "aws.protocoltests.query#ListWithNamespace",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "structureList": {
                    "target": "aws.protocoltests.query#StructureList",
                    "traits": {
                        "smithy.api#xmlName": "myStructureList"
                    }
                }
            }
        },
        "aws.protocoltests.query#XmlMaps": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlMapsOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests basic map serialization.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlMaps",
                        "documentation": "Tests for XML map serialization",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlMapsResponse xmlns=\"https://example.com/\">\n    <XmlMapsResult>\n        <myMap>\n            <entry>\n                <key>foo</key>\n                <value>\n                    <hi>there</hi>\n                </value>\n            </entry>\n            <entry>\n                <key>baz</key>\n                <value>\n                    <hi>bye</hi>\n                </value>\n            </entry>\n        </myMap>\n    </XmlMapsResult>\n</XmlMapsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlMapsOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.query#XmlMapsOutputMap"
                }
            }
        },
        "aws.protocoltests.query#XmlMapsOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.query#XmlMapsXmlName": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlMapsXmlNameOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryQueryXmlMapsXmlName",
                        "documentation": "Serializes XML lists",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlMapsXmlNameResponse xmlns=\"https://example.com/\">\n    <XmlMapsXmlNameResult>\n        <myMap>\n            <entry>\n                <Attribute>foo</Attribute>\n                <Setting>\n                    <hi>there</hi>\n                </Setting>\n            </entry>\n            <entry>\n                <Attribute>baz</Attribute>\n                <Setting>\n                    <hi>bye</hi>\n                </Setting>\n            </entry>\n        </myMap>\n    </XmlMapsXmlNameResult>\n</XmlMapsXmlNameResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlMapsXmlNameOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.query#XmlMapsXmlNameOutputMap"
                }
            }
        },
        "aws.protocoltests.query#XmlMapsXmlNameOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "Attribute"
                }
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct",
                "traits": {
                    "smithy.api#xmlName": "Setting"
                }
            }
        },
        "aws.protocoltests.query#XmlNamespaceNested": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "uri": "http://baz.com",
                            "prefix": "baz"
                        }
                    }
                },
                "values": {
                    "target": "aws.protocoltests.query#XmlNamespacedList",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "uri": "http://qux.com"
                        }
                    }
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://boo.com"
                }
            }
        },
        "aws.protocoltests.query#XmlNamespacedList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlNamespace": {
                        "uri": "http://bux.com"
                    }
                }
            }
        },
        "aws.protocoltests.query#XmlNamespaces": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlNamespacesOutput"
            },
            "traits": {
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlNamespaces",
                        "documentation": "Serializes XML namespaces",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlNamespacesResponse xmlns=\"https://example.com/\">\n    <XmlNamespacesResult>\n        <nested>\n            <foo xmlns:baz=\"http://baz.com\">Foo</foo>\n            <values xmlns=\"http://qux.com\">\n                <member xmlns=\"http://bux.com\">Bar</member>\n                <member xmlns=\"http://bux.com\">Baz</member>\n            </values>\n        </nested>\n    </XmlNamespacesResult>\n</XmlNamespacesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo",
                                "values": [
                                    "Bar",
                                    "Baz"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlNamespacesOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.query#XmlNamespaceNested"
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com"
                }
            }
        },
        "aws.protocoltests.query#XmlTimestamps": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.query#XmlTimestampsOutput"
            },
            "traits": {
                "smithy.api#documentation": "This tests how timestamps are serialized, including using the\ndefault format of date-time and various @timestampFormat trait\nvalues.",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "QueryXmlTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <normal>2014-04-29T18:30:38Z</normal>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "QueryXmlTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <dateTime>2014-04-29T18:30:38Z</dateTime>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "QueryXmlTimestampsWithDateTimeOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of date-time on the target shape works like normal timestamps",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <dateTimeOnTarget>2014-04-29T18:30:38Z</dateTimeOnTarget>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "dateTimeOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "QueryXmlTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <epochSeconds>1398796238</epochSeconds>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "QueryXmlTimestampsWithEpochSecondsOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds on the target shape works",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <epochSecondsOnTarget>1398796238</epochSecondsOnTarget>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "epochSecondsOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "QueryXmlTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <httpDate>Tue, 29 Apr 2014 18:30:38 GMT</httpDate>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    },
                    {
                        "id": "QueryXmlTimestampsWithHttpDateOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of http-date on the target shape works",
                        "protocol": "aws.protocols#awsQuery",
                        "code": 200,
                        "body": "<XmlTimestampsResponse xmlns=\"https://example.com/\">\n    <XmlTimestampsResult>\n        <httpDateOnTarget>Tue, 29 Apr 2014 18:30:38 GMT</httpDateOnTarget>\n    </XmlTimestampsResult>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "params": {
                            "httpDateOnTarget": 1398796238
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.query#XmlTimestampsOutput": {
            "type": "structure",
            "members": {
                "normal": {
                    "target": "smithy.api#Timestamp"
                },
                "dateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "dateTimeOnTarget": {
                    "target": "aws.protocoltests.shared#DateTime"
                },
                "epochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "epochSecondsOnTarget": {
                    "target": "aws.protocoltests.shared#EpochSeconds"
                },
                "httpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "httpDateOnTarget": {
                    "target": "aws.protocoltests.shared#HttpDate"
                }
            }
        },
        "aws.protocoltests.restjson#AllQueryStringTypes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#AllQueryStringTypesInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses all query string types.",
                "smithy.api#http": {
                    "uri": "/AllQueryStringTypesInput",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonAllQueryStringTypes",
                        "documentation": "Serializes query string parameters with all supported types",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "String=Hello%20there",
                            "StringList=a",
                            "StringList=b",
                            "StringList=c",
                            "StringSet=a",
                            "StringSet=b",
                            "StringSet=c",
                            "Byte=1",
                            "Short=2",
                            "Integer=3",
                            "IntegerList=1",
                            "IntegerList=2",
                            "IntegerList=3",
                            "IntegerSet=1",
                            "IntegerSet=2",
                            "IntegerSet=3",
                            "Long=4",
                            "Float=1.1",
                            "Double=1.1",
                            "DoubleList=1.1",
                            "DoubleList=2.1",
                            "DoubleList=3.1",
                            "Boolean=true",
                            "BooleanList=true",
                            "BooleanList=false",
                            "BooleanList=true",
                            "Timestamp=1970-01-01T00%3A00%3A01Z",
                            "TimestampList=1970-01-01T00%3A00%3A01Z",
                            "TimestampList=1970-01-01T00%3A00%3A02Z",
                            "TimestampList=1970-01-01T00%3A00%3A03Z",
                            "Enum=Foo",
                            "EnumList=Foo",
                            "EnumList=Baz",
                            "EnumList=Bar",
                            "IntegerEnum=1",
                            "IntegerEnumList=1",
                            "IntegerEnumList=2",
                            "IntegerEnumList=3"
                        ],
                        "params": {
                            "queryString": "Hello there",
                            "queryStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "queryStringSet": [
                                "a",
                                "b",
                                "c"
                            ],
                            "queryByte": 1,
                            "queryShort": 2,
                            "queryInteger": 3,
                            "queryIntegerList": [
                                1,
                                2,
                                3
                            ],
                            "queryIntegerSet": [
                                1,
                                2,
                                3
                            ],
                            "queryLong": 4,
                            "queryFloat": 1.1,
                            "queryDouble": 1.1,
                            "queryDoubleList": [
                                1.1,
                                2.1,
                                3.1
                            ],
                            "queryBoolean": true,
                            "queryBooleanList": [
                                true,
                                false,
                                true
                            ],
                            "queryTimestamp": 1,
                            "queryTimestampList": [
                                1,
                                2,
                                3
                            ],
                            "queryEnum": "Foo",
                            "queryEnumList": [
                                "Foo",
                                "Baz",
                                "Bar"
                            ],
                            "queryIntegerEnum": 1,
                            "queryIntegerEnumList": [
                                1,
                                2,
                                3
                            ],
                            "queryParamsMapOfStringList": {
                                "String": [
                                    "Hello there"
                                ],
                                "StringList": [
                                    "a",
                                    "b",
                                    "c"
                                ],
                                "StringSet": [
                                    "a",
                                    "b",
                                    "c"
                                ],
                                "Byte": [
                                    "1"
                                ],
                                "Short": [
                                    "2"
                                ],
                                "Integer": [
                                    "3"
                                ],
                                "IntegerList": [
                                    "1",
                                    "2",
                                    "3"
                                ],
                                "IntegerSet": [
                                    "1",
                                    "2",
                                    "3"
                                ],
                                "Long": [
                                    "4"
                                ],
                                "Float": [
                                    "1.1"
                                ],
                                "Double": [
                                    "1.1"
                                ],
                                "DoubleList": [
                                    "1.1",
                                    "2.1",
                                    "3.1"
                                ],
                                "Boolean": [
                                    "true"
                                ],
                                "BooleanList": [
                                    "true",
                                    "false",
                                    "true"
                                ],
                                "Timestamp": [
                                    "1970-01-01T00:00:01Z"
                                ],
                                "TimestampList": [
                                    "1970-01-01T00:00:01Z",
                                    "1970-01-01T00:00:02Z",
                                    "1970-01-01T00:00:03Z"
                                ],
                                "Enum": [
                                    "Foo"
                                ],
                                "EnumList": [
                                    "Foo",
                                    "Baz",
                                    "Bar"
                                ],
                                "IntegerEnum": [
                                    "1"
                                ],
                                "IntegerEnumList": [
                                    "1",
                                    "2",
                                    "3"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonQueryStringMap",
                        "documentation": "Handles query string maps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "QueryParamsStringKeyA=Foo",
                            "QueryParamsStringKeyB=Bar"
                        ],
                        "params": {
                            "queryParamsMapOfStringList": {
                                "QueryParamsStringKeyA": [
                                    "Foo"
                                ],
                                "QueryParamsStringKeyB": [
                                    "Bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonQueryStringEscaping",
                        "documentation": "Handles escaping all required characters in the query string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "String=%20%25%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%F0%9F%98%B9"
                        ],
                        "params": {
                            "queryString": " %:/?#[]@!$&'()*+,;=😹",
                            "queryParamsMapOfStringList": {
                                "String": [
                                    " %:/?#[]@!$&'()*+,;=😹"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatQueryValues",
                        "documentation": "Supports handling NaN float query values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=NaN",
                            "Double=NaN"
                        ],
                        "params": {
                            "queryFloat": "NaN",
                            "queryDouble": "NaN",
                            "queryParamsMapOfStringList": {
                                "Float": [
                                    "NaN"
                                ],
                                "Double": [
                                    "NaN"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatQueryValues",
                        "documentation": "Supports handling Infinity float query values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=Infinity",
                            "Double=Infinity"
                        ],
                        "params": {
                            "queryFloat": "Infinity",
                            "queryDouble": "Infinity",
                            "queryParamsMapOfStringList": {
                                "Float": [
                                    "Infinity"
                                ],
                                "Double": [
                                    "Infinity"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatQueryValues",
                        "documentation": "Supports handling -Infinity float query values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=-Infinity",
                            "Double=-Infinity"
                        ],
                        "params": {
                            "queryFloat": "-Infinity",
                            "queryDouble": "-Infinity",
                            "queryParamsMapOfStringList": {
                                "Float": [
                                    "-Infinity"
                                ],
                                "Double": [
                                    "-Infinity"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonZeroAndFalseQueryValues",
                        "documentation": "Query values of 0 and false are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Integer=0",
                            "Boolean=false"
                        ],
                        "params": {
                            "queryInteger": 0,
                            "queryBoolean": false,
                            "queryParamsMapOfStringList": {
                                "Integer": [
                                    "0"
                                ],
                                "Boolean": [
                                    "false"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#AllQueryStringTypesInput": {
            "type": "structure",
            "members": {
                "queryString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "String"
                    }
                },
                "queryStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpQuery": "StringList"
                    }
                },
                "queryStringSet": {
                    "target": "aws.protocoltests.shared#StringSet",
                    "traits": {
                        "smithy.api#httpQuery": "StringSet"
                    }
                },
                "queryByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpQuery": "Byte"
                    }
                },
                "queryShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpQuery": "Short"
                    }
                },
                "queryInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpQuery": "Integer"
                    }
                },
                "queryIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerList"
                    }
                },
                "queryIntegerSet": {
                    "target": "aws.protocoltests.shared#IntegerSet",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerSet"
                    }
                },
                "queryLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpQuery": "Long"
                    }
                },
                "queryFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpQuery": "Float"
                    }
                },
                "queryDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpQuery": "Double"
                    }
                },
                "queryDoubleList": {
                    "target": "aws.protocoltests.shared#DoubleList",
                    "traits": {
                        "smithy.api#httpQuery": "DoubleList"
                    }
                },
                "queryBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpQuery": "Boolean"
                    }
                },
                "queryBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpQuery": "BooleanList"
                    }
                },
                "queryTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "Timestamp"
                    }
                },
                "queryTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpQuery": "TimestampList"
                    }
                },
                "queryEnum": {
                    "target": "aws.protocoltests.shared#FooEnum",
                    "traits": {
                        "smithy.api#httpQuery": "Enum"
                    }
                },
                "queryEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "EnumList"
                    }
                },
                "queryIntegerEnum": {
                    "target": "aws.protocoltests.shared#IntegerEnum",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerEnum"
                    }
                },
                "queryIntegerEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerEnumList"
                    }
                },
                "queryParamsMapOfStringList": {
                    "target": "aws.protocoltests.shared#StringListMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#ComplexError": {
            "type": "structure",
            "members": {
                "Header": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Header"
                    }
                },
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.restjson#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.api#httpError": 403,
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonComplexErrorWithNoMessage",
                        "documentation": "Serializes a complex error with no message member",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "Header": "Header",
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 403,
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Header": "Header",
                            "X-Amzn-Errortype": "ComplexError"
                        },
                        "body": "{\n    \"TopLevel\": \"Top level\",\n    \"Nested\": {\n        \"Fooooo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "RestJsonEmptyComplexErrorWithNoMessage",
                        "protocol": "aws.protocols#restJson1",
                        "params": {},
                        "code": 403,
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Amzn-Errortype": "ComplexError"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "Fooooo"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#ConstantAndVariableQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#ConstantAndVariableQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses fixed query string params and variable query string params.\nThe fixed query string parameters and variable parameters must both be\nserialized (implementations may need to merge them together).",
                "smithy.api#http": {
                    "uri": "/ConstantAndVariableQueryString?foo=bar",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonConstantAndVariableQueryStringMissingOneValue",
                        "documentation": "Mixes constant and variable query string parameters",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ConstantAndVariableQueryString",
                        "queryParams": [
                            "foo=bar",
                            "baz=bam"
                        ],
                        "forbidQueryParams": [
                            "maybeSet"
                        ],
                        "body": "",
                        "params": {
                            "baz": "bam"
                        }
                    },
                    {
                        "id": "RestJsonConstantAndVariableQueryStringAllValues",
                        "documentation": "Mixes constant and variable query string parameters",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ConstantAndVariableQueryString",
                        "queryParams": [
                            "foo=bar",
                            "baz=bam",
                            "maybeSet=yes"
                        ],
                        "body": "",
                        "params": {
                            "baz": "bam",
                            "maybeSet": "yes"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ConstantAndVariableQueryStringInput": {
            "type": "structure",
            "members": {
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "baz"
                    }
                },
                "maybeSet": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "maybeSet"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#ConstantQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#ConstantQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses a constant query string parameters and a label.\nThis simply tests that labels and query string parameters are\ncompatible. The fixed query string parameter named \"hello\" should\nin no way conflict with the label, `{hello}`.",
                "smithy.api#http": {
                    "uri": "/ConstantQueryString/{hello}?foo=bar&hello",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonConstantQueryString",
                        "documentation": "Includes constant query string parameters",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ConstantQueryString/hi",
                        "queryParams": [
                            "foo=bar",
                            "hello"
                        ],
                        "body": "",
                        "params": {
                            "hello": "hi"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ConstantQueryStringInput": {
            "type": "structure",
            "members": {
                "hello": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#DatetimeOffsets": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#DatetimeOffsetsOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/DatetimeOffsets",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonDateTimeWithNegativeOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "      {\n          \"datetime\": \"2019-12-16T22:48:18-01:00\"\n      }\n",
                        "params": {
                            "datetime": 1576540098
                        },
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonDateTimeWithPositiveOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "      {\n          \"datetime\": \"2019-12-17T00:48:18+01:00\"\n      }\n",
                        "params": {
                            "datetime": 1576540098
                        },
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#DatetimeOffsetsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.restjson#DenseBooleanMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Boolean"
            }
        },
        "aws.protocoltests.restjson#DenseNumberMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Integer"
            }
        },
        "aws.protocoltests.restjson#DenseSetMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringSet"
            }
        },
        "aws.protocoltests.restjson#DenseStringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restjson#DenseStructMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.restjson#Document": {
            "type": "document"
        },
        "aws.protocoltests.restjson#DocumentType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#DocumentTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#DocumentTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a document as part of the payload.",
                "smithy.api#http": {
                    "uri": "/DocumentType",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "DocumentTypeInputWithObject",
                        "documentation": "Serializes document types as part of the JSON request payload with no escaping.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": {\n        \"foo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentInputWithString",
                        "documentation": "Serializes document types using a string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": \"hello\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": "hello"
                        }
                    },
                    {
                        "id": "DocumentInputWithNumber",
                        "documentation": "Serializes document types using a number.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": 10\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": 10
                        }
                    },
                    {
                        "id": "DocumentInputWithBoolean",
                        "documentation": "Serializes document types using a boolean.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": true\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": true
                        }
                    },
                    {
                        "id": "DocumentInputWithList",
                        "documentation": "Serializes document types using a list.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": [\n        true,\n        \"hi\",\n        [\n            1,\n            2\n        ],\n        {\n            \"foo\": {\n                \"baz\": [\n                    3,\n                    4\n                ]\n            }\n        }\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": [
                                true,
                                "hi",
                                [
                                    1,
                                    2
                                ],
                                {
                                    "foo": {
                                        "baz": [
                                            3,
                                            4
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "DocumentOutput",
                        "documentation": "Serializes documents as part of the JSON response payload with no escaping.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": {\n        \"foo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentOutputString",
                        "documentation": "Document types can be JSON scalars too.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": \"hello\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": "hello"
                        }
                    },
                    {
                        "id": "DocumentOutputNumber",
                        "documentation": "Document types can be JSON scalars too.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": 10\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": 10
                        }
                    },
                    {
                        "id": "DocumentOutputBoolean",
                        "documentation": "Document types can be JSON scalars too.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": false\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": false
                        }
                    },
                    {
                        "id": "DocumentOutputArray",
                        "documentation": "Document types can be JSON arrays.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": [\n        true,\n        false\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": [
                                true,
                                false
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#DocumentTypeAsMapValue": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#DocumentTypeAsMapValueInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#DocumentTypeAsMapValueInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes documents as the value of maps.",
                "smithy.api#http": {
                    "uri": "/DocumentTypeAsMapValue",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "DocumentTypeAsMapValueInput",
                        "documentation": "Serializes a map that uses documents as the value.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentTypeAsMapValue",
                        "body": "{\n    \"docValuedMap\": {\n        \"foo\": { \"f\": 1, \"o\": 2 },\n        \"bar\": [ \"b\", \"a\", \"r\" ],\n        \"baz\": \"BAZ\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "docValuedMap": {
                                "foo": {
                                    "f": 1,
                                    "o": 2
                                },
                                "bar": [
                                    "b",
                                    "a",
                                    "r"
                                ],
                                "baz": "BAZ"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "DocumentTypeAsMapValueOutput",
                        "documentation": "Serializes a map that uses documents as the value.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"docValuedMap\": {\n        \"foo\": { \"f\": 1, \"o\": 2 },\n        \"bar\": [ \"b\", \"a\", \"r\" ],\n        \"baz\": \"BAZ\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "docValuedMap": {
                                "foo": {
                                    "f": 1,
                                    "o": 2
                                },
                                "bar": [
                                    "b",
                                    "a",
                                    "r"
                                ],
                                "baz": "BAZ"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#DocumentTypeAsMapValueInputOutput": {
            "type": "structure",
            "members": {
                "docValuedMap": {
                    "target": "aws.protocoltests.restjson#DocumentValuedMap"
                }
            }
        },
        "aws.protocoltests.restjson#DocumentTypeAsPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#DocumentTypeAsPayloadInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#DocumentTypeAsPayloadInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a document as the entire HTTP payload.",
                "smithy.api#http": {
                    "uri": "/DocumentTypeAsPayload",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "DocumentTypeAsPayloadInput",
                        "documentation": "Serializes a document as the target of the httpPayload trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentTypeAsPayload",
                        "body": "{\n    \"foo\": \"bar\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentTypeAsPayloadInputString",
                        "documentation": "Serializes a document as the target of the httpPayload trait using a string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentTypeAsPayload",
                        "body": "\"hello\"",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": "hello"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "DocumentTypeAsPayloadOutput",
                        "documentation": "Serializes a document as the target of the httpPayload trait.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"foo\": \"bar\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentTypeAsPayloadOutputString",
                        "documentation": "Serializes a document as a payload string.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "\"hello\"",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": "hello"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#DocumentTypeAsPayloadInputOutput": {
            "type": "structure",
            "members": {
                "documentValue": {
                    "target": "aws.protocoltests.restjson#Document",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#DocumentTypeInputOutput": {
            "type": "structure",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "documentValue": {
                    "target": "aws.protocoltests.restjson#Document"
                }
            }
        },
        "aws.protocoltests.restjson#DocumentValuedMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.restjson#Document"
            }
        },
        "aws.protocoltests.restjson#EmptyInputAndEmptyOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#EmptyInputAndEmptyOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#EmptyInputAndEmptyOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has an empty input\nand empty output structure that reuses the same shape. While this should\nbe rare, code generators must support this.",
                "smithy.api#http": {
                    "uri": "/EmptyInputAndEmptyOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutput",
                        "documentation": "Clients should not serialize a JSON payload when no parameters\nare given that are sent in the body. A service will tolerate\nclients that omit a payload or that send a JSON object.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EmptyInputAndEmptyOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutputWithJson",
                        "documentation": "Similar to RestJsonEmptyInputAndEmptyOutput, but ensures that\nservices gracefully handles receiving a JSON object.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EmptyInputAndEmptyOutput",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutput",
                        "documentation": "As of January 2021, server implementations are expected to\nrespond with a JSON object regardless of if the output\nparameters are empty.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutputJsonObjectOutput",
                        "documentation": "This test ensures that clients can gracefully handle\nsituations where a service omits a JSON payload entirely.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#EmptyInputAndEmptyOutputInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#EmptyInputAndEmptyOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.api#http": {
                    "uri": "/EndpointOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EndpointOperation",
                        "body": "",
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HostLabelInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.api#http": {
                    "uri": "/EndpointWithHostLabelOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EndpointWithHostLabelOperation",
                        "body": "{\"label\": \"bar\"}",
                        "bodyMediaType": "application/json",
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#EnumPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.restjson#StringEnum",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#FiniteStreamingBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#requiresLength": {},
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.restjson#FooError": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "This error has test cases that test some of the dark corners of Amazon service\nframework history. It should only be implemented by clients.",
                "smithy.api#error": "server",
                "smithy.api#httpError": 500,
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonFooErrorUsingXAmznErrorType",
                        "documentation": "Serializes the X-Amzn-ErrorType header. For an example service, see Amazon EKS.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingXAmznErrorTypeWithUri",
                        "documentation": "Some X-Amzn-Errortype headers contain URLs. Clients need to split the URL on ':' and take only the first half of the string. For example, 'ValidationException:http://internal.amazon.com/coral/com.amazon.coral.validate/'\nis to be interpreted as 'ValidationException'.\n\nFor an example service see Amazon Polly.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingXAmznErrorTypeWithUriAndNamespace",
                        "documentation": "X-Amzn-Errortype might contain a URL and a namespace. Client should extract only the shape name. This is a pathalogical case that might not actually happen in any deployed AWS service.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "aws.protocoltests.restjson#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingCode",
                        "documentation": "This example uses the 'code' property in the output rather than X-Amzn-Errortype. Some services do this though it's preferable to send the X-Amzn-Errortype. Client implementations must first check for the X-Amzn-Errortype and then check for a top-level 'code' property.\n\nFor example service see Amazon S3 Glacier.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"code\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingCodeAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.restjson#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingCodeUriAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.restjson#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorWithDunderType",
                        "documentation": "Some services serialize errors using __type.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"__type\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorWithDunderTypeAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.restjson#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorWithDunderTypeUriAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.restjson#FooError:http://internal.amazon.com/coral/com.amazon.coral.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#FractionalSeconds": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#FractionalSecondsOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/FractionalSeconds",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonDateTimeWithFractionalSeconds",
                        "documentation": "Ensures that clients can correctly parse datetime timestamps with fractional seconds",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "      {\n          \"datetime\": \"2000-01-02T20:34:56.123Z\"\n      }\n",
                        "params": {
                            "datetime": 9.46845296123E8
                        },
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#FractionalSecondsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.restjson#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.restjson#ComplexError"
                },
                {
                    "target": "aws.protocoltests.restjson#FooError"
                },
                {
                    "target": "aws.protocoltests.restjson#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has four possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A BadRequest error.\n4. A FooError.\n\nImplementations must be able to successfully take a response and\nproperly (de)serialize successful and error responses based on the\nthe presence of the",
                "smithy.api#http": {
                    "uri": "/GreetingWithErrors",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonGreetingWithErrors",
                        "documentation": "Ensures that operations with errors successfully know how\nto deserialize a successful response. As of January 2021,\nserver implementations are expected to respond with a\nJSON object regardless of if the output parameters are\nempty.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "X-Greeting": "Hello"
                        },
                        "params": {
                            "greeting": "Hello"
                        }
                    },
                    {
                        "id": "RestJsonGreetingWithErrorsNoPayload",
                        "documentation": "This test is similar to RestJsonGreetingWithErrors, but it\nensures that clients can gracefully deal with a server\nomitting a response payload.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "X-Greeting": "Hello"
                        },
                        "params": {
                            "greeting": "Hello"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Greeting"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HostLabelInput": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HostWithPathOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/HostWithPathOperation",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHostWithPath",
                        "documentation": "Custom endpoints supplied by users can have paths",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/custom/HostWithPathOperation",
                        "body": "",
                        "host": "example.com/custom",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpChecksumRequired": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpChecksumRequiredInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpChecksumRequiredInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example tests httpChecksumRequired trait",
                "smithy.api#http": {
                    "uri": "/HttpChecksumRequired",
                    "method": "POST"
                },
                "smithy.api#httpChecksumRequired": {},
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpChecksumRequired",
                        "documentation": "Adds Content-MD5 header",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpChecksumRequired",
                        "body": "{\n    \"foo\":\"base64 encoded md5 checksum\"\n}\n",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "Content-MD5": "iB0/3YSo7maijL0IGOgA9g=="
                        },
                        "params": {
                            "foo": "base64 encoded md5 checksum"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpChecksumRequiredInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson#HttpEnumPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#EnumPayloadInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#EnumPayloadInput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/EnumPayload",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEnumPayloadRequest",
                        "uri": "/EnumPayload",
                        "body": "enumvalue",
                        "params": {
                            "payload": "enumvalue"
                        },
                        "method": "POST",
                        "protocol": "aws.protocols#restJson1"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonEnumPayloadResponse",
                        "body": "enumvalue",
                        "params": {
                            "payload": "enumvalue"
                        },
                        "protocol": "aws.protocols#restJson1",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraits": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a blob shape in the payload.\n\nIn this example, no JSON document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadTraits",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "Content-Type": "application/octet-stream",
                            "X-Foo": "Foo"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlobAcceptsAllContentTypes",
                        "documentation": "Servers must accept any content type for blob inputs\nwithout the media type trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "This is definitely a jpeg",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "image/jpeg"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "This is definitely a jpeg"
                        },
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlobAcceptsAllAccepts",
                        "documentation": "Servers must accept any accept header for blob inputs\nwithout the media type trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "This is definitely a jpeg",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Accept": "image/jpeg"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "This is definitely a jpeg"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraitsInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example uses a `@mediaType` trait on the payload to force a custom\ncontent-type to be serialized.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadTraitsWithMediaType",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraitsWithMediaType",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaTypeInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.shared#TextPlainBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPayloadWithStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadWithStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadWithStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a structure in the payload.\n\nNote that serializing a structure changes the wrapper element name\nto match the targeted structure.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithStructure",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadWithStructure",
                        "documentation": "Serializes a structure in the payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithStructure",
                        "body": "{\n    \"greeting\": \"hello\",\n    \"name\": \"Phreddy\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "greeting": "hello",
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadWithStructure",
                        "documentation": "Serializes a structure in the payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"greeting\": \"hello\",\n    \"name\": \"Phreddy\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "greeting": "hello",
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadWithStructureInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restjson#NestedPayload",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPayloadWithUnion": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadWithUnionInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadWithUnionInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a union in the payload.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithUnion",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadWithUnion",
                        "documentation": "Serializes a union in the payload.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithUnion",
                        "body": "{\n    \"greeting\": \"hello\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "greeting": "hello"
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadWithUnsetUnion",
                        "documentation": "No payload is sent if the union has no value.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithUnion",
                        "body": "",
                        "params": {}
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadWithUnion",
                        "documentation": "Serializes a union in the payload.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"greeting\": \"hello\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "greeting": "hello"
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadWithUnsetUnion",
                        "documentation": "No payload is sent if the union has no value.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "Content-Length": "0"
                        },
                        "params": {}
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadWithUnionInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restjson#UnionPayload",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples adds headers to the input of a request and response by prefix.",
                "smithy.api#externalDocumentation": {
                    "httpPrefixHeaders Trait": "https://smithy.io/2.0/spec/http-bindings.html#httpprefixheaders-trait"
                },
                "smithy.api#http": {
                    "uri": "/HttpPrefixHeaders",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPrefixHeadersArePresent",
                        "documentation": "Adds headers by prefix",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpPrefixHeaders",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo",
                            "X-Foo-Abc": "Abc value",
                            "X-Foo-Def": "Def value"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {
                                "Abc": "Abc value",
                                "Def": "Def value"
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpPrefixHeadersAreNotPresent",
                        "documentation": "No prefix headers are serialized because the value is empty",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpPrefixHeaders",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {}
                        },
                        "appliesTo": "client"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPrefixHeadersArePresent",
                        "documentation": "Adds headers by prefix",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Foo": "Foo",
                            "X-Foo-Abc": "Abc value",
                            "X-Foo-Def": "Def value"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {
                                "Abc": "Abc value",
                                "Def": "Def value"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInResponse": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersInResponseInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersInResponseOutput"
            },
            "traits": {
                "smithy.api#documentation": "Clients that perform this test extract all headers from the response.",
                "smithy.api#http": {
                    "uri": "/HttpPrefixHeadersResponse",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPrefixHeadersResponse",
                        "documentation": "(de)serializes all response headers",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Foo": "Foo",
                            "Hello": "Hello"
                        },
                        "params": {
                            "prefixHeaders": {
                                "X-Foo": "Foo",
                                "Hello": "Hello"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInResponseInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInResponseOutput": {
            "type": "structure",
            "members": {
                "prefixHeaders": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": ""
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "fooMap": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": "X-Foo-"
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "fooMap": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": "X-Foo-"
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithFloatLabels": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithFloatLabelsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/FloatHttpLabels/{float}/{double}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonSupportsNaNFloatLabels",
                        "documentation": "Supports handling NaN float label values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/NaN/NaN",
                        "body": "",
                        "params": {
                            "float": "NaN",
                            "double": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatLabels",
                        "documentation": "Supports handling Infinity float label values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/Infinity/Infinity",
                        "body": "",
                        "params": {
                            "float": "Infinity",
                            "double": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatLabels",
                        "documentation": "Supports handling -Infinity float label values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/-Infinity/-Infinity",
                        "body": "",
                        "params": {
                            "float": "-Infinity",
                            "double": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithFloatLabelsInput": {
            "type": "structure",
            "members": {
                "float": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "double": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPath": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPathInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithGreedyLabelInPath/foo/{foo}/baz/{baz+}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpRequestWithGreedyLabelInPath",
                        "documentation": "Serializes greedy labels and normal labels",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithGreedyLabelInPath/foo/hello%2Fescape/baz/there/guy",
                        "body": "",
                        "params": {
                            "foo": "hello/escape",
                            "baz": "there/guy"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPathInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabels": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithLabelsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests are serialized when there's no input\npayload but there are HTTP labels.",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithLabels/{string}/{short}/{integer}/{long}/{float}/{double}/{boolean}/{timestamp}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonInputWithHeadersAndAllParams",
                        "documentation": "Sends a GET request that uses URI label bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabels/string/1/2/3/4.1/5.1/true/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "string": "string",
                            "short": 1,
                            "integer": 2,
                            "long": 3,
                            "float": 4.1,
                            "double": 5.1,
                            "boolean": true,
                            "timestamp": 1576540098
                        }
                    },
                    {
                        "id": "RestJsonHttpRequestLabelEscaping",
                        "documentation": "Sends a GET request that uses URI label bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabels/%20%25%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%F0%9F%98%B9/1/2/3/4.1/5.1/true/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "string": " %:/?#[]@!$&'()*+,;=😹",
                            "short": 1,
                            "integer": 2,
                            "long": 3,
                            "float": 4.1,
                            "double": 5.1,
                            "boolean": true,
                            "timestamp": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormat": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormatInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests serialize different timestamp formats in the\nURI path.",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithLabelsAndTimestampFormat/{memberEpochSeconds}/{memberHttpDate}/{memberDateTime}/{defaultFormat}/{targetEpochSeconds}/{targetHttpDate}/{targetDateTime}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpRequestWithLabelsAndTimestampFormat",
                        "documentation": "Serializes different timestamp formats in URI labels",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabelsAndTimestampFormat/1576540098/Mon%2C%2016%20Dec%202019%2023%3A48%3A18%20GMT/2019-12-16T23%3A48%3A18Z/2019-12-16T23%3A48%3A18Z/1576540098/Mon%2C%2016%20Dec%202019%2023%3A48%3A18%20GMT/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormatInput": {
            "type": "structure",
            "members": {
                "memberEpochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "memberHttpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "memberDateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "defaultFormat": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetEpochSeconds": {
                    "target": "aws.protocoltests.shared#EpochSeconds",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetHttpDate": {
                    "target": "aws.protocoltests.shared#HttpDate",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetDateTime": {
                    "target": "aws.protocoltests.shared#DateTime",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabelsInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "short": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "integer": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "long": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "float": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "double": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "boolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Serialized in the path as true or false.",
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#documentation": "Note that this member has no format, so it's serialized as an RFC 3399 date-time.",
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithRegexLiteral": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithRegexLiteralInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/ReDosLiteral/{str}/(a+)+"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonToleratesRegexCharsInSegments",
                        "documentation": "Path matching is not broken by regex expressions in literal segments",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ReDosLiteral/abc/(a+)+",
                        "body": "",
                        "params": {
                            "str": "abc"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithRegexLiteralInput": {
            "type": "structure",
            "members": {
                "str": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpResponseCode": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpResponseCodeOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/HttpResponseCode",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpResponseCode",
                        "documentation": "Binds the http response code to an output structure. Note that\neven though all members are bound outside of the payload, an\nempty JSON object is serialized in the response. However,\nclients should be able to handle an empty JSON object or an\nempty payload without failing to deserialize a response.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {
                            "Status": 201
                        }
                    },
                    {
                        "id": "RestJsonHttpResponseCodeDefaultsToModeledCode",
                        "documentation": "Binds the http response code to the http trait's code if the\ncode isn't explicitly set. A client would be parsing the\nhttp response code, so this would always be present, but\na server doesn't require it to be set to serialize a request.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {},
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonHttpResponseCodeWithNoPayload",
                        "documentation": "This test ensures that clients gracefully handle cases where\nthe service responds with no payload rather than an empty JSON\nobject.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "body": "",
                        "params": {
                            "Status": 201
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpResponseCodeOutput": {
            "type": "structure",
            "members": {
                "Status": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpResponseCode": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpStringPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StringPayloadInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#StringPayloadInput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/StringPayload",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStringPayloadRequest",
                        "uri": "/StringPayload",
                        "body": "rawstring",
                        "params": {
                            "payload": "rawstring"
                        },
                        "method": "POST",
                        "protocol": "aws.protocols#restJson1"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonStringPayloadResponse",
                        "body": "rawstring",
                        "params": {
                            "payload": "rawstring"
                        },
                        "protocol": "aws.protocols#restJson1",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#IgnoreQueryParamsInResponse": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#IgnoreQueryParamsInResponseOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example ensures that query string bound request parameters are\nserialized in the body of responses if the structure is used in both\nthe request and response.",
                "smithy.api#http": {
                    "uri": "/IgnoreQueryParamsInResponse",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonIgnoreQueryParamsInResponse",
                        "documentation": "Query parameters must be ignored when serializing the output\nof an operation. As of January 2021, server implementations\nare expected to respond with a JSON object regardless of\nif the output parameters are empty.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {}
                    },
                    {
                        "id": "RestJsonIgnoreQueryParamsInResponseNoPayload",
                        "documentation": "This test is similar to RestJsonIgnoreQueryParamsInResponse,\nbut it ensures that clients gracefully handle responses from\nthe server that do not serialize an empty JSON object.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "params": {},
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#IgnoreQueryParamsInResponseOutput": {
            "type": "structure",
            "members": {
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "baz",
                        "smithy.api#suppress": [
                            "HttpBindingTraitIgnored"
                        ]
                    }
                }
            }
        },
        "aws.protocoltests.restjson#InputAndOutputWithHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#InputAndOutputWithHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#InputAndOutputWithHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there is\nno input or output payload but there are HTTP header bindings.",
                "smithy.api#http": {
                    "uri": "/InputAndOutputWithHeaders",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonInputAndOutputWithStringHeaders",
                        "documentation": "Tests requests with string header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-String": "Hello",
                            "X-StringList": "a, b, c",
                            "X-StringSet": "a, b, c"
                        },
                        "body": "",
                        "params": {
                            "headerString": "Hello",
                            "headerStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "headerStringSet": [
                                "a",
                                "b",
                                "c"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithQuotedStringHeaders",
                        "documentation": "Tests requests with string list header bindings that require quoting",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-StringList": "\"b,c\", \"\\\"def\\\"\", a"
                        },
                        "body": "",
                        "params": {
                            "headerStringList": [
                                "b,c",
                                "\"def\"",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithNumericHeaders",
                        "documentation": "Tests requests with numeric header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Byte": "1",
                            "X-Short": "123",
                            "X-Integer": "123",
                            "X-Long": "123",
                            "X-Float": "1.1",
                            "X-Double": "1.1",
                            "X-IntegerList": "1, 2, 3"
                        },
                        "body": "",
                        "params": {
                            "headerByte": 1,
                            "headerShort": 123,
                            "headerInteger": 123,
                            "headerLong": 123,
                            "headerFloat": 1.1,
                            "headerDouble": 1.1,
                            "headerIntegerList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithBooleanHeaders",
                        "documentation": "Tests requests with boolean header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Boolean1": "true",
                            "X-Boolean2": "false",
                            "X-BooleanList": "true, false, true"
                        },
                        "body": "",
                        "params": {
                            "headerTrueBool": true,
                            "headerFalseBool": false,
                            "headerBooleanList": [
                                true,
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithTimestampHeaders",
                        "documentation": "Tests requests with timestamp header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
                        },
                        "body": "",
                        "params": {
                            "headerTimestampList": [
                                1576540098,
                                1576540098
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithEnumHeaders",
                        "documentation": "Tests requests with enum header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Enum": "Foo",
                            "X-EnumList": "Foo, Bar, Baz"
                        },
                        "body": "",
                        "params": {
                            "headerEnum": "Foo",
                            "headerEnumList": [
                                "Foo",
                                "Bar",
                                "Baz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithIntEnumHeaders",
                        "documentation": "Tests requests with intEnum header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-IntegerEnum": "1",
                            "X-IntegerEnumList": "1, 2, 3"
                        },
                        "body": "",
                        "params": {
                            "headerIntegerEnum": 1,
                            "headerIntegerEnumList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatHeaderInputs",
                        "documentation": "Supports handling NaN float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "NaN",
                            "X-Double": "NaN"
                        },
                        "params": {
                            "headerFloat": "NaN",
                            "headerDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatHeaderInputs",
                        "documentation": "Supports handling Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "Infinity",
                            "X-Double": "Infinity"
                        },
                        "params": {
                            "headerFloat": "Infinity",
                            "headerDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatHeaderInputs",
                        "documentation": "Supports handling -Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "-Infinity",
                            "X-Double": "-Infinity"
                        },
                        "params": {
                            "headerFloat": "-Infinity",
                            "headerDouble": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonInputAndOutputWithStringHeaders",
                        "documentation": "Tests responses with string header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-String": "Hello",
                            "X-StringList": "a, b, c",
                            "X-StringSet": "a, b, c"
                        },
                        "params": {
                            "headerString": "Hello",
                            "headerStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "headerStringSet": [
                                "a",
                                "b",
                                "c"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithQuotedStringHeaders",
                        "documentation": "Tests responses with string list header bindings that require quoting",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-StringList": "\"b,c\", \"\\\"def\\\"\", a"
                        },
                        "params": {
                            "headerStringList": [
                                "b,c",
                                "\"def\"",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithNumericHeaders",
                        "documentation": "Tests responses with numeric header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Byte": "1",
                            "X-Short": "123",
                            "X-Integer": "123",
                            "X-Long": "123",
                            "X-Float": "1.1",
                            "X-Double": "1.1",
                            "X-IntegerList": "1, 2, 3"
                        },
                        "params": {
                            "headerByte": 1,
                            "headerShort": 123,
                            "headerInteger": 123,
                            "headerLong": 123,
                            "headerFloat": 1.1,
                            "headerDouble": 1.1,
                            "headerIntegerList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithBooleanHeaders",
                        "documentation": "Tests responses with boolean header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Boolean1": "true",
                            "X-Boolean2": "false",
                            "X-BooleanList": "true, false, true"
                        },
                        "params": {
                            "headerTrueBool": true,
                            "headerFalseBool": false,
                            "headerBooleanList": [
                                true,
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithTimestampHeaders",
                        "documentation": "Tests responses with timestamp header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
                        },
                        "params": {
                            "headerTimestampList": [
                                1576540098,
                                1576540098
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithEnumHeaders",
                        "documentation": "Tests responses with enum header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Enum": "Foo",
                            "X-EnumList": "Foo, Bar, Baz"
                        },
                        "params": {
                            "headerEnum": "Foo",
                            "headerEnumList": [
                                "Foo",
                                "Bar",
                                "Baz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithIntEnumHeaders",
                        "documentation": "Tests responses with intEnum header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-IntegerEnum": "1",
                            "X-IntegerEnumList": "1, 2, 3"
                        },
                        "params": {
                            "headerIntegerEnum": 1,
                            "headerIntegerEnumList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatHeaderOutputs",
                        "documentation": "Supports handling NaN float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Float": "NaN",
                            "X-Double": "NaN"
                        },
                        "params": {
                            "headerFloat": "NaN",
                            "headerDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatHeaderOutputs",
                        "documentation": "Supports handling Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Float": "Infinity",
                            "X-Double": "Infinity"
                        },
                        "params": {
                            "headerFloat": "Infinity",
                            "headerDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatHeaderOutputs",
                        "documentation": "Supports handling -Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Float": "-Infinity",
                            "X-Double": "-Infinity"
                        },
                        "params": {
                            "headerFloat": "-Infinity",
                            "headerDouble": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#InputAndOutputWithHeadersIO": {
            "type": "structure",
            "members": {
                "headerString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-String"
                    }
                },
                "headerByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpHeader": "X-Byte"
                    }
                },
                "headerShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpHeader": "X-Short"
                    }
                },
                "headerInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpHeader": "X-Integer"
                    }
                },
                "headerLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpHeader": "X-Long"
                    }
                },
                "headerFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpHeader": "X-Float"
                    }
                },
                "headerDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpHeader": "X-Double"
                    }
                },
                "headerTrueBool": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "X-Boolean1"
                    }
                },
                "headerFalseBool": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "X-Boolean2"
                    }
                },
                "headerStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpHeader": "X-StringList"
                    }
                },
                "headerStringSet": {
                    "target": "aws.protocoltests.shared#StringSet",
                    "traits": {
                        "smithy.api#httpHeader": "X-StringSet"
                    }
                },
                "headerIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpHeader": "X-IntegerList"
                    }
                },
                "headerBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpHeader": "X-BooleanList"
                    }
                },
                "headerTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpHeader": "X-TimestampList"
                    }
                },
                "headerEnum": {
                    "target": "aws.protocoltests.shared#FooEnum",
                    "traits": {
                        "smithy.api#httpHeader": "X-Enum"
                    }
                },
                "headerEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpHeader": "X-EnumList"
                    }
                },
                "headerIntegerEnum": {
                    "target": "aws.protocoltests.shared#IntegerEnum",
                    "traits": {
                        "smithy.api#httpHeader": "X-IntegerEnum"
                    }
                },
                "headerIntegerEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList",
                    "traits": {
                        "smithy.api#httpHeader": "X-IntegerEnumList"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.api#httpError": 400,
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonInvalidGreetingError",
                        "documentation": "Parses simple JSON errors",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Amzn-Errortype": "InvalidGreeting"
                        },
                        "body": "{\n    \"Message\": \"Hi\"\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonBlobs": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonBlobsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonBlobsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "Blobs are base64 encoded",
                "smithy.api#http": {
                    "uri": "/JsonBlobs",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonBlobs",
                        "body": "{\n    \"data\": \"dmFsdWU=\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"data\": \"dmFsdWU=\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonBlobsInputOutput": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            }
        },
        "aws.protocoltests.restjson#JsonEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonEnumsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonEnumsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.api#http": {
                    "uri": "/JsonEnums",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonEnums",
                        "body": "{\n    \"fooEnum1\": \"Foo\",\n    \"fooEnum2\": \"0\",\n    \"fooEnum3\": \"1\",\n    \"fooEnumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumSet\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumMap\": {\n        \"hi\": \"Foo\",\n        \"zero\": \"0\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"fooEnum1\": \"Foo\",\n    \"fooEnum2\": \"0\",\n    \"fooEnum3\": \"1\",\n    \"fooEnumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumSet\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumMap\": {\n        \"hi\": \"Foo\",\n        \"zero\": \"0\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonEnumsInputOutput": {
            "type": "structure",
            "members": {
                "fooEnum1": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum2": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum3": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "fooEnumSet": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "fooEnumMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap"
                }
            }
        },
        "aws.protocoltests.restjson#JsonHeaderString": {
            "type": "string",
            "traits": {
                "smithy.api#mediaType": "application/json"
            }
        },
        "aws.protocoltests.restjson#JsonIntEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonIntEnumsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonIntEnumsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes intEnums as top level properties, in lists, sets, and maps.",
                "smithy.api#http": {
                    "uri": "/JsonIntEnums",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonIntEnums",
                        "documentation": "Serializes intEnums as integers",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonIntEnums",
                        "body": "{\n    \"integerEnum1\": 1,\n    \"integerEnum2\": 2,\n    \"integerEnum3\": 3,\n    \"integerEnumList\": [\n        1,\n        2,\n        3\n    ],\n    \"integerEnumSet\": [\n        1,\n        2\n    ],\n    \"integerEnumMap\": {\n        \"abc\": 1,\n        \"def\": 2\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "integerEnum1": 1,
                            "integerEnum2": 2,
                            "integerEnum3": 3,
                            "integerEnumList": [
                                1,
                                2,
                                3
                            ],
                            "integerEnumSet": [
                                1,
                                2
                            ],
                            "integerEnumMap": {
                                "abc": 1,
                                "def": 2
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonIntEnums",
                        "documentation": "Serializes intEnums as integers",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"integerEnum1\": 1,\n    \"integerEnum2\": 2,\n    \"integerEnum3\": 3,\n    \"integerEnumList\": [\n        1,\n        2,\n        3\n    ],\n    \"integerEnumSet\": [\n        1,\n        2\n    ],\n    \"integerEnumMap\": {\n        \"abc\": 1,\n        \"def\": 2\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "integerEnum1": 1,
                            "integerEnum2": 2,
                            "integerEnum3": 3,
                            "integerEnumList": [
                                1,
                                2,
                                3
                            ],
                            "integerEnumSet": [
                                1,
                                2
                            ],
                            "integerEnumMap": {
                                "abc": 1,
                                "def": 2
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonIntEnumsInputOutput": {
            "type": "structure",
            "members": {
                "integerEnum1": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "integerEnum2": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "integerEnum3": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "integerEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "integerEnumSet": {
                    "target": "aws.protocoltests.shared#IntegerEnumSet"
                },
                "integerEnumMap": {
                    "target": "aws.protocoltests.shared#IntegerEnumMap"
                }
            }
        },
        "aws.protocoltests.restjson#JsonLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonListsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonListsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This test case serializes JSON lists for the following cases for both\ninput and output:\n\n1. Normal JSON lists.\n2. Normal JSON sets.\n3. JSON lists of lists.\n4. Lists of structures.",
                "smithy.api#http": {
                    "uri": "/JsonLists",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonLists",
                        "documentation": "Serializes JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonLists",
                        "body": "{\n    \"stringList\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"stringSet\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"integerList\": [\n        1,\n        2\n    ],\n    \"booleanList\": [\n        true,\n        false\n    ],\n    \"timestampList\": [\n        1398796238,\n        1398796238\n    ],\n    \"enumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"intEnumList\": [\n        1,\n        2\n    ],\n    \"nestedStringList\": [\n        [\n            \"foo\",\n            \"bar\"\n        ],\n        [\n            \"baz\",\n            \"qux\"\n        ]\n    ],\n    \"myStructureList\": [\n        {\n            \"value\": \"1\",\n            \"other\": \"2\"\n        },\n        {\n            \"value\": \"3\",\n            \"other\": \"4\"\n        }\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "intEnumList": [
                                1,
                                2
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ]
                        }
                    },
                    {
                        "id": "RestJsonListsEmpty",
                        "documentation": "Serializes empty JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonLists",
                        "body": "{\n    \"stringList\": []\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": []
                        }
                    },
                    {
                        "id": "RestJsonListsSerializeNull",
                        "documentation": "Serializes null values in lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonLists",
                        "body": "{\n    \"sparseStringList\": [\n        null,\n        \"hi\"\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseStringList": [
                                null,
                                "hi"
                            ]
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonLists",
                        "documentation": "Serializes JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringList\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"stringSet\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"integerList\": [\n        1,\n        2\n    ],\n    \"booleanList\": [\n        true,\n        false\n    ],\n    \"timestampList\": [\n        1398796238,\n        1398796238\n    ],\n    \"enumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"intEnumList\": [\n        1,\n        2\n    ],\n    \"nestedStringList\": [\n        [\n            \"foo\",\n            \"bar\"\n        ],\n        [\n            \"baz\",\n            \"qux\"\n        ]\n    ],\n    \"myStructureList\": [\n        {\n            \"value\": \"1\",\n            \"other\": \"2\"\n        },\n        {\n            \"value\": \"3\",\n            \"other\": \"4\"\n        }\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "intEnumList": [
                                1,
                                2
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ]
                        }
                    },
                    {
                        "id": "RestJsonListsEmpty",
                        "documentation": "Serializes empty JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringList\": []\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": []
                        }
                    },
                    {
                        "id": "RestJsonListsSerializeNull",
                        "documentation": "Serializes null values in sparse lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseStringList\": [\n        null,\n        \"hi\"\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseStringList": [
                                null,
                                "hi"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonListsInputOutput": {
            "type": "structure",
            "members": {
                "stringList": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "sparseStringList": {
                    "target": "aws.protocoltests.shared#SparseStringList"
                },
                "stringSet": {
                    "target": "aws.protocoltests.shared#StringSet"
                },
                "integerList": {
                    "target": "aws.protocoltests.shared#IntegerList"
                },
                "booleanList": {
                    "target": "aws.protocoltests.shared#BooleanList"
                },
                "timestampList": {
                    "target": "aws.protocoltests.shared#TimestampList"
                },
                "enumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "nestedStringList": {
                    "target": "aws.protocoltests.shared#NestedStringList"
                },
                "structureList": {
                    "target": "aws.protocoltests.restjson#StructureList",
                    "traits": {
                        "smithy.api#jsonName": "myStructureList"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#JsonMaps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonMapsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonMapsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests basic map serialization.",
                "smithy.api#http": {
                    "uri": "/JsonMaps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonMaps",
                        "documentation": "Serializes JSON maps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"denseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n    },\n    \"sparseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            },
                            "sparseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesNullMapValues",
                        "documentation": "Serializes JSON map values in sparse maps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"sparseBooleanMap\": {\n        \"x\": null\n    },\n    \"sparseNumberMap\": {\n        \"x\": null\n    },\n    \"sparseStringMap\": {\n        \"x\": null\n    },\n    \"sparseStructMap\": {\n        \"x\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseBooleanMap": {
                                "x": null
                            },
                            "sparseNumberMap": {
                                "x": null
                            },
                            "sparseStringMap": {
                                "x": null
                            },
                            "sparseStructMap": {
                                "x": null
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesZeroValuesInMaps",
                        "documentation": "Ensure that 0 and false are sent over the wire in all maps and lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"denseNumberMap\": {\n        \"x\": 0\n    },\n    \"sparseNumberMap\": {\n        \"x\": 0\n    },\n    \"denseBooleanMap\": {\n        \"x\": false\n    },\n    \"sparseBooleanMap\": {\n        \"x\": false\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseNumberMap": {
                                "x": 0
                            },
                            "sparseNumberMap": {
                                "x": 0
                            },
                            "denseBooleanMap": {
                                "x": false
                            },
                            "sparseBooleanMap": {
                                "x": false
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesSparseSetMap",
                        "documentation": "A request that contains a sparse map of sets",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesDenseSetMap",
                        "documentation": "A request that contains a dense map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"denseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesSparseSetMapAndRetainsNull",
                        "documentation": "A request that contains a sparse map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"],\n        \"z\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ],
                                "z": null
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonMaps",
                        "documentation": "Deserializes JSON maps",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"denseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n    },\n    \"sparseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n   }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            },
                            "sparseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesNullMapValues",
                        "documentation": "Deserializes null JSON map values",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseBooleanMap\": {\n        \"x\": null\n    },\n    \"sparseNumberMap\": {\n        \"x\": null\n    },\n    \"sparseStringMap\": {\n        \"x\": null\n    },\n    \"sparseStructMap\": {\n        \"x\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseBooleanMap": {
                                "x": null
                            },
                            "sparseNumberMap": {
                                "x": null
                            },
                            "sparseStringMap": {
                                "x": null
                            },
                            "sparseStructMap": {
                                "x": null
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesZeroValuesInMaps",
                        "documentation": "Ensure that 0 and false are sent over the wire in all maps and lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"denseNumberMap\": {\n        \"x\": 0\n    },\n    \"sparseNumberMap\": {\n        \"x\": 0\n    },\n    \"denseBooleanMap\": {\n        \"x\": false\n    },\n    \"sparseBooleanMap\": {\n        \"x\": false\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseNumberMap": {
                                "x": 0
                            },
                            "sparseNumberMap": {
                                "x": 0
                            },
                            "denseBooleanMap": {
                                "x": false
                            },
                            "sparseBooleanMap": {
                                "x": false
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesSparseSetMap",
                        "documentation": "A response that contains a sparse map of sets",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesDenseSetMap",
                        "documentation": "A response that contains a dense map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"denseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesSparseSetMapAndRetainsNull",
                        "documentation": "A response that contains a sparse map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"],\n        \"z\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ],
                                "z": null
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesDenseSetMapAndSkipsNull",
                        "documentation": "Clients SHOULD tolerate seeing a null value in a dense map, and they SHOULD\ndrop the null key-value pair.",
                        "protocol": "aws.protocols#restJson1",
                        "appliesTo": "client",
                        "code": 200,
                        "body": "{\n    \"denseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"],\n        \"z\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonMapsInputOutput": {
            "type": "structure",
            "members": {
                "denseStructMap": {
                    "target": "aws.protocoltests.restjson#DenseStructMap"
                },
                "sparseStructMap": {
                    "target": "aws.protocoltests.restjson#SparseStructMap"
                },
                "denseNumberMap": {
                    "target": "aws.protocoltests.restjson#DenseNumberMap"
                },
                "denseBooleanMap": {
                    "target": "aws.protocoltests.restjson#DenseBooleanMap"
                },
                "denseStringMap": {
                    "target": "aws.protocoltests.restjson#DenseStringMap"
                },
                "sparseNumberMap": {
                    "target": "aws.protocoltests.restjson#SparseNumberMap"
                },
                "sparseBooleanMap": {
                    "target": "aws.protocoltests.restjson#SparseBooleanMap"
                },
                "sparseStringMap": {
                    "target": "aws.protocoltests.shared#SparseStringMap"
                },
                "denseSetMap": {
                    "target": "aws.protocoltests.restjson#DenseSetMap"
                },
                "sparseSetMap": {
                    "target": "aws.protocoltests.restjson#SparseSetMap"
                }
            }
        },
        "aws.protocoltests.restjson#JsonTimestamps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonTimestampsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonTimestampsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This tests how timestamps are serialized, including using the\ndefault format of date-time and various @timestampFormat trait\nvalues.",
                "smithy.api#http": {
                    "uri": "/JsonTimestamps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"normal\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"dateTime\": \"2014-04-29T18:30:38Z\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithDateTimeOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of date-time on the target shape works like normal timestamps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"dateTimeOnTarget\": \"2014-04-29T18:30:38Z\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "dateTimeOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"epochSeconds\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithEpochSecondsOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds on the target shape works",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"epochSecondsOnTarget\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "epochSecondsOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"httpDate\": \"Tue, 29 Apr 2014 18:30:38 GMT\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithHttpDateOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of http-date on the target shape works",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"httpDateOnTarget\": \"Tue, 29 Apr 2014 18:30:38 GMT\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "httpDateOnTarget": 1398796238
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"normal\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"dateTime\": \"2014-04-29T18:30:38Z\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithDateTimeOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of date-time on the target shape works like normal timestamps",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"dateTimeOnTarget\": \"2014-04-29T18:30:38Z\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "dateTimeOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"epochSeconds\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithEpochSecondsOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds on the target shape works",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"epochSecondsOnTarget\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "epochSecondsOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"httpDate\": \"Tue, 29 Apr 2014 18:30:38 GMT\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithHttpDateOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of http-date on the target shape works",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"httpDateOnTarget\": \"Tue, 29 Apr 2014 18:30:38 GMT\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "httpDateOnTarget": 1398796238
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonTimestampsInputOutput": {
            "type": "structure",
            "members": {
                "normal": {
                    "target": "smithy.api#Timestamp"
                },
                "dateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "dateTimeOnTarget": {
                    "target": "aws.protocoltests.shared#DateTime"
                },
                "epochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "epochSecondsOnTarget": {
                    "target": "aws.protocoltests.shared#EpochSeconds"
                },
                "httpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "httpDateOnTarget": {
                    "target": "aws.protocoltests.shared#HttpDate"
                }
            }
        },
        "aws.protocoltests.restjson#JsonUnions": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#UnionInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#UnionInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation uses unions for inputs and outputs.",
                "smithy.api#http": {
                    "uri": "/JsonUnions",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonSerializeStringUnionValue",
                        "documentation": "Serializes a string union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeBooleanUnionValue",
                        "documentation": "Serializes a boolean union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeNumberUnionValue",
                        "documentation": "Serializes a number union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeBlobUnionValue",
                        "documentation": "Serializes a blob union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeTimestampUnionValue",
                        "documentation": "Serializes a timestamp union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeEnumUnionValue",
                        "documentation": "Serializes an enum union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeListUnionValue",
                        "documentation": "Serializes a list union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeMapUnionValue",
                        "documentation": "Serializes a map union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeStructureUnionValue",
                        "documentation": "Serializes a structure union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeRenamedStructureUnionValue",
                        "documentation": "Serializes a renamed structure union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"renamedStructureValue\": {\n            \"salutation\": \"hello!\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "renamedStructureValue": {
                                    "salutation": "hello!"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonDeserializeStringUnionValue",
                        "documentation": "Deserializes a string union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeBooleanUnionValue",
                        "documentation": "Deserializes a boolean union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeNumberUnionValue",
                        "documentation": "Deserializes a number union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeBlobUnionValue",
                        "documentation": "Deserializes a blob union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeTimestampUnionValue",
                        "documentation": "Deserializes a timestamp union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeEnumUnionValue",
                        "documentation": "Deserializes an enum union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeListUnionValue",
                        "documentation": "Deserializes a list union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeMapUnionValue",
                        "documentation": "Deserializes a map union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeStructureUnionValue",
                        "documentation": "Deserializes a structure union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeIgnoreType",
                        "appliesTo": "client",
                        "documentation": "Ignores an unrecognized __type property",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"__type\": \"aws.protocoltests.json10#MyUnion\",\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonValue": {
            "type": "string",
            "traits": {
                "smithy.api#mediaType": "application/json"
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithBody": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedAcceptWithBody"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithBodyExpectsApplicationJsonAccept",
                        "documentation": "When there is modeled output, the accept must be application/json",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedAcceptWithBody",
                            "headers": {
                                "accept": "application/hal+json"
                            }
                        },
                        "response": {
                            "code": 406,
                            "headers": {
                                "x-amzn-errortype": "NotAcceptableException"
                            }
                        },
                        "tags": [
                            "accept"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithGenericString": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#MalformedAcceptWithGenericStringOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedAcceptWithGenericString"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsImpliedAccept",
                        "documentation": "When there is a payload without a mediaType trait, the accept must match the\nimplied content type of the shape.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedAcceptWithGenericString",
                            "headers": {
                                "accept": "application/json"
                            }
                        },
                        "response": {
                            "code": 406,
                            "headers": {
                                "x-amzn-errortype": "NotAcceptableException"
                            }
                        },
                        "tags": [
                            "accept"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithGenericStringOutput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithPayload": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#MalformedAcceptWithPayloadOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedAcceptWithPayload"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsModeledAccept",
                        "documentation": "When there is a payload with a mediaType trait, the accept must match.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedAcceptWithPayload",
                            "headers": {
                                "accept": "application/json"
                            }
                        },
                        "response": {
                            "code": 406,
                            "headers": {
                                "x-amzn-errortype": "NotAcceptableException"
                            }
                        },
                        "tags": [
                            "accept"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithPayloadOutput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.shared#JpegBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedBlob": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedBlobInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedBlob",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyMalformedBlobInvalidBase64",
                        "documentation": "When a blob member is not properly base64 encoded, or not encoded at\nall, the response should be a 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBlob",
                            "body": "{ \"blob\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "blob",
                                "\"xyz\"",
                                "\"YmxvYg=\"",
                                "[98, 108, 11, 98]",
                                "[\"b\", \"l\",\"o\",\"b\"]",
                                "981081198",
                                "true",
                                "[][]",
                                "-_=="
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedBlobInput": {
            "type": "structure",
            "members": {
                "blob": {
                    "target": "smithy.api#Blob"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedBoolean": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedBooleanInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedBoolean/{booleanInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "body": "{ \"booleanInBody\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "false",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonBodyBooleanBadLiteral",
                        "documentation": "YAML-style alternate boolean literals should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "body": "{ \"booleanInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonPathBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonQueryBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "queryParams": [
                                "booleanInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonHeaderBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "headers": {
                                "booleanInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedBooleanInput": {
            "type": "structure",
            "members": {
                "booleanInBody": {
                    "target": "smithy.api#Boolean"
                },
                "booleanInPath": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "booleanInQuery": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpQuery": "booleanInQuery"
                    }
                },
                "booleanInHeader": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "booleanInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedByte": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedByteInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedByte/{byteInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "body": "{ \"byteInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "queryParams": [
                                "byteInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "headers": {
                                "byteInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyByteMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "body": "{ \"byteInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathByteMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryByteMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "queryParams": [
                                "byteInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderByteMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "headers": {
                                "byteInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedByteInput": {
            "type": "structure",
            "members": {
                "byteInBody": {
                    "target": "smithy.api#Byte"
                },
                "byteInPath": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "byteInQuery": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpQuery": "byteInQuery"
                    }
                },
                "byteInHeader": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpHeader": "byteInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithBody": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithBody"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithBodyExpectsApplicationJsonContentType",
                        "documentation": "When there is modeled input, they content type must be application/json",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithBody",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/hal+json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithGenericString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedContentTypeWithGenericStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithGenericString"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithGenericStringInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedContentTypeWithPayloadInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithPayload"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsModeledContentType",
                        "documentation": "When there is a payload with a mediaType trait, the content type must match.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithPayload",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    },
                    {
                        "id": "RestJsonWithPayloadExpectsImpliedContentType",
                        "documentation": "When there is a payload without a mediaType trait, the content type must match the\nimplied content type of the shape.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithPayload",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.shared#JpegBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithoutBody": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithoutBody"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithoutBodyExpectsEmptyContentType",
                        "documentation": "When there is no modeled input, content type must not be set and the body must be empty.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithoutBody",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithoutBodyEmptyInput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedContentTypeWithoutBodyEmptyInputInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithoutBodyEmptyInput"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithoutBodyEmptyInputExpectsEmptyContentType",
                        "documentation": "When there is no modeled body input, content type must not be set and the body must be empty.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithoutBodyEmptyInput",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithoutBodyEmptyInputInput": {
            "type": "structure",
            "members": {
                "header": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "header"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedDouble": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedDoubleInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedDouble/{doubleInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyDoubleMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/1",
                            "body": "{ \"doubleInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathDoubleMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryDoubleMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/1",
                            "queryParams": [
                                "doubleInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderDoubleMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/1",
                            "headers": {
                                "doubleInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedDoubleInput": {
            "type": "structure",
            "members": {
                "doubleInBody": {
                    "target": "smithy.api#Double"
                },
                "doubleInPath": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "doubleInQuery": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpQuery": "doubleInQuery"
                    }
                },
                "doubleInHeader": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpHeader": "doubleInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedFloat": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedFloatInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedFloat/{floatInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyFloatMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/1",
                            "body": "{ \"floatInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathFloatMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryFloatMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/1",
                            "queryParams": [
                                "floatInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderFloatMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/1",
                            "headers": {
                                "floatInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedFloatInput": {
            "type": "structure",
            "members": {
                "floatInBody": {
                    "target": "smithy.api#Float"
                },
                "floatInPath": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "floatInQuery": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpQuery": "floatInQuery"
                    }
                },
                "floatInHeader": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpHeader": "floatInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedInteger": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedIntegerInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedInteger/{integerInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "body": "{ \"integerInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "queryParams": [
                                "integerInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "headers": {
                                "integerInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyIntegerMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "body": "{ \"integerInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathIntegerMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryIntegerMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "queryParams": [
                                "integerInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderIntegerMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "headers": {
                                "integerInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedIntegerInput": {
            "type": "structure",
            "members": {
                "integerInBody": {
                    "target": "smithy.api#Integer"
                },
                "integerInPath": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "integerInQuery": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpQuery": "integerInQuery"
                    }
                },
                "integerInHeader": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpHeader": "integerInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedList": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedListInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedList",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyMalformedListNullItem",
                        "documentation": "When a dense list contains null, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedList",
                            "body": "{ \"bodyList\" : [\"a\", null, \"b\", \"c\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonBodyMalformedListUnclosed",
                        "documentation": "When a list does not have a closing bracket, the response should be\na 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedList",
                            "body": "{ \"bodyList\" : [\"a\", \"b\", \"c\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedListInput": {
            "type": "structure",
            "members": {
                "bodyList": {
                    "target": "aws.protocoltests.restjson#SimpleList"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedLong": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedLongInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedLong/{longInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "body": "{ \"longInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "queryParams": [
                                "longInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "headers": {
                                "longInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyLongMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "body": "{ \"longInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathLongMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryLongMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "queryParams": [
                                "longInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderLongMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "headers": {
                                "longInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedLongInput": {
            "type": "structure",
            "members": {
                "longInBody": {
                    "target": "smithy.api#Long"
                },
                "longInPath": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "longInQuery": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpQuery": "longInQuery"
                    }
                },
                "longInHeader": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpHeader": "longInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedMap": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedMapInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedMap",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyMalformedMapNullKey",
                        "documentation": "When a map contains a null key, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedMap",
                            "body": "{ \"bodyMap\" : { null: \"abc\" }  }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonBodyMalformedMapNullValue",
                        "documentation": "When a dense map contains a null value, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedMap",
                            "body": "{ \"bodyMap\" : { \"abc\": null }  }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedMapInput": {
            "type": "structure",
            "members": {
                "bodyMap": {
                    "target": "aws.protocoltests.restjson#SimpleMap"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedRequestBody": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedRequestBodyInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedRequestBody",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonInvalidJsonBody",
                        "documentation": "When the request body is not valid JSON, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequestBody",
                            "body": "$value:L",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "{[",
                                "{ \"int\": 10 }abc",
                                "abc{ \"int\": 10 }",
                                "{\n    \"int\": 10 // the integer should be 10\n}",
                                "{\n    \"int\": 10 /* the integer should be 10 */\n}",
                                "{\"int\" :\u000c10}",
                                "{'int': 10}",
                                "{\"int\": 10,}"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonTechnicallyValidJsonBody",
                        "documentation": "When the request body is technically valid, but cannot map to a Smithy structure,\nthe response should be a 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequestBody",
                            "body": "$value:L",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[{ \"int\": 10}]",
                                "10",
                                "null"
                            ]
                        },
                        "tags": [
                            "technically_valid_json_body"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedRequestBodyInput": {
            "type": "structure",
            "members": {
                "int": {
                    "target": "smithy.api#Integer"
                },
                "float": {
                    "target": "smithy.api#Float"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedShort": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedShortInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedShort/{shortInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "body": "{ \"shortInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "queryParams": [
                                "shortInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "headers": {
                                "shortInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyShortMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "body": "{ \"shortInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathShortMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryShortMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "queryParams": [
                                "shortInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderShortMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "headers": {
                                "shortInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedShortInput": {
            "type": "structure",
            "members": {
                "shortInBody": {
                    "target": "smithy.api#Short"
                },
                "shortInPath": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "shortInQuery": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpQuery": "shortInQuery"
                    }
                },
                "shortInHeader": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpHeader": "shortInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedString",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderMalformedStringInvalidBase64MediaType",
                        "documentation": "When string with the mediaType trait is bound to a header, its value\nmust be base64 encoded. The server should reject values that aren't\nvalid base64 out of hand.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedString",
                            "headers": {
                                "content-type": "application/json",
                                "amz-media-typed-header": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "xyz",
                                "YmxvYg=",
                                "[][]",
                                "-_=="
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedStringInput": {
            "type": "structure",
            "members": {
                "blob": {
                    "target": "aws.protocoltests.restjson#JsonHeaderString",
                    "traits": {
                        "smithy.api#httpHeader": "amz-media-typed-header"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDateTime": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampBodyDateTimeInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampBodyDateTime",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsHttpDate",
                        "documentation": "When the format is date-time, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsEpochSeconds",
                        "documentation": "When the format is date-time, epoch-seconds timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsUTCOffsets",
                        "documentation": "When the format is date-time, RFC 3339 timestamps with a UTC offset are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsDifferent8601Formats",
                        "documentation": "When the format is date-time, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57+00",
                                "1996-12-19T16:39:57+00Z",
                                "1996-12-19T16:39:57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16:39:57Z",
                                "19961219T16:39:57",
                                "1996-12-19T16:39Z",
                                "1996-12-19T16:39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19 16:39:57Z",
                                "2011-12-03T10:15:30+01:00[Europe/Paris]"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDateTimeInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampBodyDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampBodyDefault",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsDateTime",
                        "documentation": "By default, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsStringifiedEpochSeconds",
                        "documentation": "By default, epoch second timestamps as strings are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsMalformedEpochSeconds",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsHttpDate",
                        "documentation": "By default, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyHttpDate": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampBodyHttpDateInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampBodyHttpDate",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyTimestampHttpDateRejectsDateTime",
                        "documentation": "When the format is http-date, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyHttpDate",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampHttpDateRejectsEpoch",
                        "documentation": "When the format is http-date, epoch-seconds timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyHttpDate",
                            "body": "{ \"timestamp\": $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyHttpDateInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDateTime": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDateTimeInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampHeaderDateTime",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderTimestampDateTimeRejectsHttpDate",
                        "documentation": "When the format is date-time, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDateTime",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampDateTimeRejectsEpochSeconds",
                        "documentation": "When the format is date-time, epoch-seconds timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDateTime",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampDateTimeRejectsDifferent8601Formats",
                        "documentation": "When the format is date-time, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDateTime",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57+00",
                                "1996-12-19T16:39:57+00Z",
                                "1996-12-19T16:39:57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16:39:57Z",
                                "19961219T16:39:57",
                                "1996-12-19T16:39Z",
                                "1996-12-19T16:39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19 16:39:57Z",
                                "2011-12-03T10:15:30+01:00[Europe/Paris]"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDateTimeInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampHeaderDefault",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderTimestampDefaultRejectsDateTime",
                        "documentation": "By default, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDefault",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampDefaultRejectsEpochSeconds",
                        "documentation": "By default, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDefault",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "timestamp",
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderEpoch": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampHeaderEpochInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampHeaderEpoch",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderTimestampEpochRejectsDateTime",
                        "documentation": "When the format is epoch-seconds, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderEpoch",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampEpochRejectsHttpDate",
                        "documentation": "When the format is epoch-seconds, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderEpoch",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampEpochRejectsMalformedValues",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderEpoch",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderEpochInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampPathDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampPathDefault/{timestamp}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsHttpDate",
                        "documentation": "By default, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsEpochSeconds",
                        "documentation": "By default, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsUTCOffsets",
                        "documentation": "UTC offsets must be rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/1996-12-19T16%3A39%3A57-08%3A00"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsDifferent8601Formats",
                        "documentation": "By default, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16%3A39%3A57%2B00",
                                "1996-12-19T16%3A39%3A57%2B00Z",
                                "1996-12-19T16%3A39%3A57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16%3A39%3A57Z",
                                "19961219T16%3A39%3A57",
                                "1996-12-19T16%3A39Z",
                                "1996-12-19T16%3A39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19%2016%3A39%3A57Z",
                                "2011-12-03T10%3A15%3A30%2B01%3A00%5BEurope%2FParis%5D"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathEpoch": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampPathEpochInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampPathEpoch/{timestamp}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonPathTimestampEpochRejectsDateTime",
                        "documentation": "When the format is epoch-seconds, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathEpoch/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampEpochRejectsHttpDate",
                        "documentation": "When the format is epoch-seconds, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathEpoch/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampEpochRejectsMalformedValues",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathEpoch/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathEpochInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathHttpDate": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampPathHttpDateInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampPathHttpDate/{timestamp}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonPathTimestampHttpDateRejectsDateTime",
                        "documentation": "When the format is http-date, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathHttpDate/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampHttpDateRejectsEpochSeconds",
                        "documentation": "When the format is http-date,  epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathHttpDate/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathHttpDateInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampQueryDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampQueryDefault",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsHttpDate",
                        "documentation": "By default, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsEpochSeconds",
                        "documentation": "By default, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsUTCOffsets",
                        "documentation": "UTC offsets must be rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsDifferent8601Formats",
                        "documentation": "By default, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57+00",
                                "1996-12-19T16:39:57+00Z",
                                "1996-12-19T16:39:57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16:39:57Z",
                                "19961219T16:39:57",
                                "1996-12-19T16:39Z",
                                "1996-12-19T16:39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19%2016:39:57Z",
                                "2011-12-03T10:15:30+01:00[Europe/Paris]"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "timestamp",
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryEpoch": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampQueryEpochInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampQueryEpoch",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonQueryTimestampEpochRejectsDateTime",
                        "documentation": "When the format is epoch-seconds, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryEpoch",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampEpochRejectsHttpDate",
                        "documentation": "When the format is epoch-seconds, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryEpoch",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampEpochRejectsMalformedValues",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryEpoch",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryEpochInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryHttpDate": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampQueryHttpDateInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampQueryHttpDate",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonQueryTimestampHttpDateRejectsDateTime",
                        "documentation": "When the format is http-date, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryHttpDate",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampHttpDateRejectsEpochSeconds",
                        "documentation": "When the format is http-date, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryHttpDate",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryHttpDateInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedUnion": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedUnionInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedUnion",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedUnionMultipleFieldsSet",
                        "documentation": "When the union has multiple fields set, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : { \"int\": 2, \"string\": \"three\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionKnownAndUnknownFieldsSet",
                        "documentation": "When the union has multiple fields set, even when only one is modeled,\nthe response should be a 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : { \"int\": 2, \"unknownField\": \"three\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionNoFieldsSet",
                        "documentation": "When the union has no fields set, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : { \"int\": null } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionValueIsArray",
                        "documentation": "When the union value is actually an array, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : [\"int\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionUnknownMember",
                        "documentation": "When an unknown union member is received, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{\n    \"union\": {\n        \"unknown\": \"hello\"\n    }\n}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedUnionInput": {
            "type": "structure",
            "members": {
                "union": {
                    "target": "aws.protocoltests.restjson#SimpleUnion"
                }
            }
        },
        "aws.protocoltests.restjson#MediaTypeHeader": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MediaTypeHeaderInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#MediaTypeHeaderOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example ensures that mediaType strings are base64 encoded in headers.",
                "smithy.api#http": {
                    "uri": "/MediaTypeHeader",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "MediaTypeHeaderInputBase64",
                        "documentation": "Headers that target strings with a mediaType are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/MediaTypeHeader",
                        "headers": {
                            "X-Json": "dHJ1ZQ=="
                        },
                        "body": "",
                        "params": {
                            "json": "true"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "MediaTypeHeaderOutputBase64",
                        "documentation": "Headers that target strings with a mediaType are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Json": "dHJ1ZQ=="
                        },
                        "params": {
                            "json": "true"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MediaTypeHeaderInput": {
            "type": "structure",
            "members": {
                "json": {
                    "target": "aws.protocoltests.restjson#JsonValue",
                    "traits": {
                        "smithy.api#httpHeader": "X-Json"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MediaTypeHeaderOutput": {
            "type": "structure",
            "members": {
                "json": {
                    "target": "aws.protocoltests.restjson#JsonValue",
                    "traits": {
                        "smithy.api#httpHeader": "X-Json"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MyUnion": {
            "type": "union",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "booleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "numberValue": {
                    "target": "smithy.api#Integer"
                },
                "blobValue": {
                    "target": "smithy.api#Blob"
                },
                "timestampValue": {
                    "target": "smithy.api#Timestamp"
                },
                "enumValue": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "listValue": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "mapValue": {
                    "target": "aws.protocoltests.shared#StringMap"
                },
                "structureValue": {
                    "target": "aws.protocoltests.shared#GreetingStruct"
                },
                "renamedStructureValue": {
                    "target": "aws.protocoltests.restjson.nested#GreetingStruct"
                }
            },
            "traits": {
                "smithy.api#documentation": "A union with a representative set of types for members."
            }
        },
        "aws.protocoltests.restjson#NestedPayload": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                },
                "name": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson#NoInputAndNoOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input or output.\nWhile this should be rare, code generators must support this.",
                "smithy.api#http": {
                    "uri": "/NoInputAndNoOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonNoInputAndNoOutput",
                        "documentation": "No input serializes no payload. When clients do not need to\nserialize any data in the payload, they should omit a payload\naltogether.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndNoOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonNoInputAllowsAccept",
                        "documentation": "Servers should allow the accept header to be set to the\ndefault content-type.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndNoOutput",
                        "body": "",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonNoInputAndNoOutput",
                        "documentation": "When an operation does not define output, the service will respond\nwith an empty payload, and may optionally include the content-type\nheader.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#NoInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#NoInputAndOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input and the\noutput is empty. While this should be rare, code generators must support\nthis.",
                "smithy.api#http": {
                    "uri": "/NoInputAndOutputOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonNoInputAndOutput",
                        "documentation": "No input serializes no payload. When clients do not need to\nserialize any data in the payload, they should omit a payload\naltogether.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndOutputOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonNoInputAndOutputAllowsAccept",
                        "documentation": "Servers should allow the accept header to be set to the\ndefault content-type.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndOutputOutput",
                        "body": "",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonNoInputAndOutputWithJson",
                        "documentation": "Operations that define output and do not bind anything to\nthe payload return a JSON object in the response.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        }
                    },
                    {
                        "id": "RestJsonNoInputAndOutputNoPayload",
                        "documentation": "This test is similar to RestJsonNoInputAndOutputWithJson, but\nit ensures that clients can gracefully handle responses that\nomit a JSON payload.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#NoInputAndOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#NullAndEmptyHeadersClient": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "Null and empty headers are not sent over the wire.",
                "smithy.api#http": {
                    "uri": "/NullAndEmptyHeadersClient",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonNullAndEmptyHeaders",
                        "documentation": "Do not send null values, empty strings, or empty lists over the wire in headers",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/NullAndEmptyHeadersClient",
                        "forbidHeaders": [
                            "X-A",
                            "X-B",
                            "X-C"
                        ],
                        "body": "",
                        "params": {
                            "a": null,
                            "b": "",
                            "c": []
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#NullAndEmptyHeadersIO": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-A"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-B"
                    }
                },
                "c": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpHeader": "X-C"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#NullAndEmptyHeadersServer": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "Null and empty headers are not sent over the wire.",
                "smithy.api#http": {
                    "uri": "/NullAndEmptyHeadersServer",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.api#tags": [
                    "server-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonNullAndEmptyHeaders",
                        "documentation": "Do not send null or empty headers",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "forbidHeaders": [
                            "X-A",
                            "X-B",
                            "X-C"
                        ],
                        "params": {
                            "a": null,
                            "b": "",
                            "c": []
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#OmitsNullSerializesEmptyString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#OmitsNullSerializesEmptyStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Omits null, but serializes empty string value.",
                "smithy.api#http": {
                    "uri": "/OmitsNullSerializesEmptyString",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonOmitsNullQuery",
                        "documentation": "Omits null query values",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "params": {
                            "nullValue": null
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonSerializesEmptyQueryValue",
                        "documentation": "Serializes empty query strings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "queryParams": [
                            "Empty="
                        ],
                        "params": {
                            "emptyString": ""
                        }
                    },
                    {
                        "id": "RestJsonServersAcceptStaticQueryParamAsEmptyString",
                        "documentation": "Servers accept static query params as empty strings.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "queryParams": [
                            "Empty"
                        ],
                        "params": {
                            "emptyString": ""
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#OmitsNullSerializesEmptyStringInput": {
            "type": "structure",
            "members": {
                "nullValue": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "Null"
                    }
                },
                "emptyString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "Empty"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#OmitsSerializingEmptyLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#OmitsSerializingEmptyListsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Omits serializing empty lists. Because empty strings are serilized as\n`Foo=`, empty lists cannot also be serialized as `Foo=` and instead\nmust be omitted.",
                "smithy.api#http": {
                    "uri": "/OmitsSerializingEmptyLists",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonOmitsEmptyListQueryValues",
                        "documentation": "Supports omitting empty lists.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/OmitsSerializingEmptyLists",
                        "body": "",
                        "queryParams": [],
                        "params": {
                            "queryStringList": [],
                            "queryIntegerList": [],
                            "queryDoubleList": [],
                            "queryBooleanList": [],
                            "queryTimestampList": [],
                            "queryEnumList": [],
                            "queryIntegerEnumList": []
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#OmitsSerializingEmptyListsInput": {
            "type": "structure",
            "members": {
                "queryStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpQuery": "StringList"
                    }
                },
                "queryIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerList"
                    }
                },
                "queryDoubleList": {
                    "target": "aws.protocoltests.shared#DoubleList",
                    "traits": {
                        "smithy.api#httpQuery": "DoubleList"
                    }
                },
                "queryBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpQuery": "BooleanList"
                    }
                },
                "queryTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpQuery": "TimestampList"
                    }
                },
                "queryEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "EnumList"
                    }
                },
                "queryIntegerEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerEnumList"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#PayloadConfig": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Integer"
                }
            }
        },
        "aws.protocoltests.restjson#PlayerAction": {
            "type": "union",
            "members": {
                "quit": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Quit the game."
                    }
                }
            }
        },
        "aws.protocoltests.restjson#PostPlayerAction": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#PostPlayerActionInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#PostPlayerActionOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation defines a union with a Unit member.",
                "smithy.api#http": {
                    "uri": "/PostPlayerAction",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonInputUnionWithUnitMember",
                        "documentation": "Unit types in unions are serialized like normal structures in requests.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostPlayerAction",
                        "body": "{\n    \"action\": {\n        \"quit\": {}\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "action": {
                                "quit": {}
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonOutputUnionWithUnitMember",
                        "documentation": "Unit types in unions are serialized like normal structures in responses.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"action\": {\n        \"quit\": {}\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "action": {
                                "quit": {}
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#PostPlayerActionInput": {
            "type": "structure",
            "members": {
                "action": {
                    "target": "aws.protocoltests.restjson#PlayerAction"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#PostPlayerActionOutput": {
            "type": "structure",
            "members": {
                "action": {
                    "target": "aws.protocoltests.restjson#PlayerAction",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#PostUnionWithJsonName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#PostUnionWithJsonNameInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#PostUnionWithJsonNameOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation defines a union that uses jsonName on some members.",
                "smithy.api#http": {
                    "uri": "/PostUnionWithJsonName",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "PostUnionWithJsonNameRequest1",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostUnionWithJsonName",
                        "body": "{\n    \"value\": {\n        \"FOO\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "foo": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameRequest2",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostUnionWithJsonName",
                        "body": "{\n    \"value\": {\n        \"_baz\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "baz": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameRequest3",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostUnionWithJsonName",
                        "body": "{\n    \"value\": {\n        \"bar\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "bar": "hi"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "PostUnionWithJsonNameResponse1",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"value\": {\n        \"FOO\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "foo": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameResponse2",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"value\": {\n        \"_baz\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "baz": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameResponse3",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"value\": {\n        \"bar\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "bar": "hi"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#PostUnionWithJsonNameInput": {
            "type": "structure",
            "members": {
                "value": {
                    "target": "aws.protocoltests.restjson#UnionWithJsonName"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#PostUnionWithJsonNameOutput": {
            "type": "structure",
            "members": {
                "value": {
                    "target": "aws.protocoltests.restjson#UnionWithJsonName",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#PutWithContentEncoding": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#PutWithContentEncodingInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/requestcompression/putcontentwithencoding"
                },
                "smithy.api#requestCompression": {
                    "encodings": [
                        "gzip"
                    ]
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SDKAppliedContentEncoding_restJson1",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header.",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/requestcompression/putcontentwithencoding",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    },
                    {
                        "id": "SDKAppendedGzipAfterProvidedEncoding_restJson1",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header, and the\nuser-provided content-encoding is in the Content-Encoding header before the\nrequest compression encoding from the HTTP binding.\n",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "encoding": "custom",
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/requestcompression/putcontentwithencoding",
                        "headers": {
                            "Content-Encoding": "custom, gzip"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#PutWithContentEncodingInput": {
            "type": "structure",
            "members": {
                "encoding": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Encoding"
                    }
                },
                "data": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFill": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFillInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Automatically adds idempotency tokens.",
                "smithy.api#http": {
                    "uri": "/QueryIdempotencyTokenAutoFill",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonQueryIdempotencyTokenAutoFill",
                        "documentation": "Automatically adds idempotency token when not set",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/QueryIdempotencyTokenAutoFill",
                        "body": "",
                        "queryParams": [
                            "token=00000000-0000-4000-8000-000000000000"
                        ],
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonQueryIdempotencyTokenAutoFillIsSet",
                        "documentation": "Uses the given idempotency token as-is",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/QueryIdempotencyTokenAutoFill",
                        "body": "",
                        "queryParams": [
                            "token=00000000-0000-4000-8000-000000000000"
                        ],
                        "params": {
                            "token": "00000000-0000-4000-8000-000000000000"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFillInput": {
            "type": "structure",
            "members": {
                "token": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "token",
                        "smithy.api#idempotencyToken": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#QueryParamsAsStringListMap": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#QueryParamsAsStringListMapInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/StringListMap",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonQueryParamsStringListMap",
                        "documentation": "Serialize query params from map of list strings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StringListMap",
                        "body": "",
                        "queryParams": [
                            "corge=named",
                            "baz=bar",
                            "baz=qux"
                        ],
                        "params": {
                            "qux": "named",
                            "foo": {
                                "baz": [
                                    "bar",
                                    "qux"
                                ]
                            }
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersQueryParamsStringListMap",
                        "documentation": "Servers put all query params in map",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StringListMap",
                        "body": "",
                        "queryParams": [
                            "corge=named",
                            "baz=bar",
                            "baz=qux"
                        ],
                        "params": {
                            "qux": "named",
                            "foo": {
                                "corge": [
                                    "named"
                                ],
                                "baz": [
                                    "bar",
                                    "qux"
                                ]
                            }
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#QueryParamsAsStringListMapInput": {
            "type": "structure",
            "members": {
                "qux": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "corge"
                    }
                },
                "foo": {
                    "target": "aws.protocoltests.shared#StringListMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#QueryPrecedence": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#QueryPrecedenceInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/Precedence",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonQueryPrecedence",
                        "documentation": "Prefer named query parameters when serializing",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/Precedence",
                        "body": "",
                        "queryParams": [
                            "bar=named",
                            "qux=alsoFromMap"
                        ],
                        "params": {
                            "foo": "named",
                            "baz": {
                                "bar": "fromMap",
                                "qux": "alsoFromMap"
                            }
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersPutAllQueryParamsInMap",
                        "documentation": "Servers put all query params in map",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/Precedence",
                        "body": "",
                        "queryParams": [
                            "bar=named",
                            "qux=fromMap"
                        ],
                        "params": {
                            "foo": "named",
                            "baz": {
                                "bar": "named",
                                "qux": "fromMap"
                            }
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#QueryPrecedenceInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "bar"
                    }
                },
                "baz": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#RecursiveShapes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#RecursiveShapesInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#RecursiveShapesInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "Recursive shapes",
                "smithy.api#http": {
                    "uri": "/RecursiveShapes",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonRecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/RecursiveShapes",
                        "body": "{\n    \"nested\": {\n        \"foo\": \"Foo1\",\n        \"nested\": {\n            \"bar\": \"Bar1\",\n            \"recursiveMember\": {\n                \"foo\": \"Foo2\",\n                \"nested\": {\n                    \"bar\": \"Bar2\"\n                }\n            }\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonRecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"nested\": {\n        \"foo\": \"Foo1\",\n        \"nested\": {\n            \"bar\": \"Bar1\",\n            \"recursiveMember\": {\n                \"foo\": \"Foo2\",\n                \"nested\": {\n                    \"bar\": \"Bar2\"\n                }\n            }\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#RecursiveShapesInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restjson#RecursiveShapesInputOutputNested1"
                }
            }
        },
        "aws.protocoltests.restjson#RecursiveShapesInputOutputNested1": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                },
                "nested": {
                    "target": "aws.protocoltests.restjson#RecursiveShapesInputOutputNested2"
                }
            }
        },
        "aws.protocoltests.restjson#RecursiveShapesInputOutputNested2": {
            "type": "structure",
            "members": {
                "bar": {
                    "target": "smithy.api#String"
                },
                "recursiveMember": {
                    "target": "aws.protocoltests.restjson#RecursiveShapesInputOutputNested1"
                }
            }
        },
        "aws.protocoltests.restjson#ResponseCodeHttpFallback": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#ResponseCodeHttpFallbackInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#ResponseCodeHttpFallbackInputOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/responseCodeHttpFallback",
                    "code": 201
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpResponseCodeNotSetFallsBackToHttpCode",
                        "documentation": "This test ensures that servers fall back to the code set\nby @http if @httpResponseCode is not set.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ResponseCodeHttpFallbackInputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.restjson#ResponseCodeRequired": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#ResponseCodeRequiredOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/responseCodeRequired",
                    "code": 200
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpResponseCodeRequired",
                        "documentation": "This test ensures that servers handle @httpResponseCode being @required.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {
                            "responseCode": 201
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ResponseCodeRequiredOutput": {
            "type": "structure",
            "members": {
                "responseCode": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpResponseCode": {},
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#RestJson": {
            "type": "service",
            "version": "2019-12-16",
            "operations": [
                {
                    "target": "aws.protocoltests.restjson#AllQueryStringTypes"
                },
                {
                    "target": "aws.protocoltests.restjson#ConstantAndVariableQueryString"
                },
                {
                    "target": "aws.protocoltests.restjson#ConstantQueryString"
                },
                {
                    "target": "aws.protocoltests.restjson#DatetimeOffsets"
                },
                {
                    "target": "aws.protocoltests.restjson#DocumentType"
                },
                {
                    "target": "aws.protocoltests.restjson#DocumentTypeAsMapValue"
                },
                {
                    "target": "aws.protocoltests.restjson#DocumentTypeAsPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#EmptyInputAndEmptyOutput"
                },
                {
                    "target": "aws.protocoltests.restjson#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.restjson#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.restjson#FractionalSeconds"
                },
                {
                    "target": "aws.protocoltests.restjson#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.restjson#HostWithPathOperation"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpChecksumRequired"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpEnumPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadTraits"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaType"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadWithStructure"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadWithUnion"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPrefixHeaders"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPrefixHeadersInResponse"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithFloatLabels"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPath"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithLabels"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormat"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithRegexLiteral"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpResponseCode"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpStringPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#IgnoreQueryParamsInResponse"
                },
                {
                    "target": "aws.protocoltests.restjson#InputAndOutputWithHeaders"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonBlobs"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonEnums"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonIntEnums"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonLists"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonMaps"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonTimestamps"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonUnions"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedAcceptWithBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedAcceptWithGenericString"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedAcceptWithPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedBlob"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedBoolean"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedByte"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithGenericString"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithoutBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedDouble"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedFloat"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedInteger"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedList"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedLong"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedMap"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedRequestBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedShort"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedString"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampBodyDateTime"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampBodyDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampBodyHttpDate"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDateTime"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampHeaderEpoch"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampPathDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampPathEpoch"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampPathHttpDate"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampQueryDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampQueryEpoch"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampQueryHttpDate"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedUnion"
                },
                {
                    "target": "aws.protocoltests.restjson#MediaTypeHeader"
                },
                {
                    "target": "aws.protocoltests.restjson#NoInputAndNoOutput"
                },
                {
                    "target": "aws.protocoltests.restjson#NoInputAndOutput"
                },
                {
                    "target": "aws.protocoltests.restjson#NullAndEmptyHeadersClient"
                },
                {
                    "target": "aws.protocoltests.restjson#NullAndEmptyHeadersServer"
                },
                {
                    "target": "aws.protocoltests.restjson#OmitsNullSerializesEmptyString"
                },
                {
                    "target": "aws.protocoltests.restjson#OmitsSerializingEmptyLists"
                },
                {
                    "target": "aws.protocoltests.restjson#PostPlayerAction"
                },
                {
                    "target": "aws.protocoltests.restjson#PostUnionWithJsonName"
                },
                {
                    "target": "aws.protocoltests.restjson#PutWithContentEncoding"
                },
                {
                    "target": "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFill"
                },
                {
                    "target": "aws.protocoltests.restjson#QueryParamsAsStringListMap"
                },
                {
                    "target": "aws.protocoltests.restjson#QueryPrecedence"
                },
                {
                    "target": "aws.protocoltests.restjson#RecursiveShapes"
                },
                {
                    "target": "aws.protocoltests.restjson#SimpleScalarProperties"
                },
                {
                    "target": "aws.protocoltests.restjson#StreamingTraits"
                },
                {
                    "target": "aws.protocoltests.restjson#StreamingTraitsRequireLength"
                },
                {
                    "target": "aws.protocoltests.restjson#StreamingTraitsWithMediaType"
                },
                {
                    "target": "aws.protocoltests.restjson#TestBodyStructure"
                },
                {
                    "target": "aws.protocoltests.restjson#TestNoPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#TestPayloadBlob"
                },
                {
                    "target": "aws.protocoltests.restjson#TestPayloadStructure"
                },
                {
                    "target": "aws.protocoltests.restjson#TimestampFormatHeaders"
                },
                {
                    "target": "aws.protocoltests.restjson#UnitInputAndOutput"
                }
            ],
            "rename": {
                "aws.protocoltests.restjson.nested#GreetingStruct": "RenamedGreeting"
            },
            "traits": {
                "aws.api#service": {
                    "sdkId": "Rest Json Protocol"
                },
                "aws.auth#sigv4": {
                    "name": "restjson"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#documentation": "A REST JSON service that sends JSON requests and responses.",
                "smithy.api#title": "Sample Rest Json Protocol Service"
            }
        },
        "aws.protocoltests.restjson#SimpleList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restjson#SimpleMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restjson#SimpleScalarProperties": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#SimpleScalarPropertiesInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#SimpleScalarPropertiesInputOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/SimpleScalarProperties",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonSimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"trueBooleanValue\": true,\n    \"falseBooleanValue\": false,\n    \"byteValue\": 1,\n    \"shortValue\": 2,\n    \"integerValue\": 3,\n    \"longValue\": 4,\n    \"floatValue\": 5.5,\n    \"DoubleDribble\": 6.5\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "RestJsonDoesntSerializeNullStructureValues",
                        "documentation": "Rest Json should not serialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": null
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersDontSerializeNullStructureValues",
                        "documentation": "Rest Json should not deserialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"stringValue\": null\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {},
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"DoubleDribble\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"DoubleDribble\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"DoubleDribble\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonSimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"trueBooleanValue\": true,\n    \"falseBooleanValue\": false,\n    \"byteValue\": 1,\n    \"shortValue\": 2,\n    \"integerValue\": 3,\n    \"longValue\": 4,\n    \"floatValue\": 5.5,\n    \"DoubleDribble\": 6.5\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "RestJsonDoesntDeserializeNullStructureValues",
                        "documentation": "Rest Json should not deserialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": null\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {},
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersDontSerializeNullStructureValues",
                        "documentation": "Rest Json should not serialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": null
                        },
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"DoubleDribble\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"DoubleDribble\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"DoubleDribble\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#SimpleScalarPropertiesInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "trueBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "falseBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#jsonName": "DoubleDribble"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#SimpleUnion": {
            "type": "union",
            "members": {
                "int": {
                    "target": "smithy.api#Integer"
                },
                "string": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson#SparseBooleanMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Boolean"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#SparseNumberMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Integer"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#SparseSetMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringSet"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#SparseStructMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#StreamingBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.restjson#StreamingTextPlainBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#mediaType": "text/plain",
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.restjson#StreamingTraits": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StreamingTraitsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#StreamingTraitsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a streaming blob shape in the request body.\n\nIn this example, no JSON document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/StreamingTraits",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraits",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "application/octet-stream"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonStreamingTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraits",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "application/octet-stream"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonStreamingTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.restjson#StreamingBlob",
                    "traits": {
                        "smithy.api#default": "",
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsRequireLength": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StreamingTraitsRequireLengthInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a streaming blob shape with a required content\nlength in the request body.\n\nIn this example, no JSON document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/StreamingTraitsRequireLength",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStreamingTraitsRequireLengthWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a required length",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraitsRequireLength",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "application/octet-stream"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonStreamingTraitsRequireLengthWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraitsRequireLength",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsRequireLengthInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.restjson#FiniteStreamingBlob",
                    "traits": {
                        "smithy.api#default": "",
                        "smithy.api#httpPayload": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsWithMediaType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StreamingTraitsWithMediaTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#StreamingTraitsWithMediaTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a streaming media-typed blob shape in the request body.\n\nThis examples uses a `@mediaType` trait on the payload to force a custom\ncontent-type to be serialized.",
                "smithy.api#http": {
                    "uri": "/StreamingTraitsWithMediaType",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraitsWithMediaType",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsWithMediaTypeInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.restjson#StreamingTextPlainBlob",
                    "traits": {
                        "smithy.api#default": "",
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#StringEnum": {
            "type": "enum",
            "members": {
                "V": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "enumvalue"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#StringPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#StructureList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson#StructureListMember"
            }
        },
        "aws.protocoltests.restjson#StructureListMember": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "value"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "other"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#TestBodyStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestBodyStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestBodyStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a structure in the HTTP body.\n\nIt should ensure Content-Type: application/json is\nused in all requests and that an \"empty\" body is\nan empty JSON document ({}).\n",
                "smithy.api#http": {
                    "uri": "/body",
                    "method": "POST"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonTestBodyStructure",
                        "documentation": "Serializes a structure",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/body",
                        "body": "{\"testConfig\":\n    {\"timeout\": 10}\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "testConfig": {
                                "timeout": 10
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpWithEmptyBody",
                        "documentation": "Serializes an empty structure in the body",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/body",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {}
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestBodyStructureInputOutput": {
            "type": "structure",
            "members": {
                "testId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-test-id"
                    }
                },
                "testConfig": {
                    "target": "aws.protocoltests.restjson#TestConfig"
                }
            }
        },
        "aws.protocoltests.restjson#TestConfig": {
            "type": "structure",
            "members": {
                "timeout": {
                    "target": "smithy.api#Integer"
                }
            }
        },
        "aws.protocoltests.restjson#TestNoPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestNoPayloadInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestNoPayloadInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a request without an HTTP body.\n\nThese tests are to ensure we do not attach a body or related headers\n(Content-Length, Content-Type) to operations that semantically\ncannot produce an HTTP body.\n",
                "smithy.api#http": {
                    "uri": "/no_payload",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpWithNoModeledBody",
                        "documentation": "Serializes a GET request with no modeled body",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/no_payload",
                        "body": "",
                        "forbidHeaders": [
                            "Content-Length",
                            "Content-Type"
                        ],
                        "params": {}
                    },
                    {
                        "id": "RestJsonHttpWithHeaderMemberNoModeledBody",
                        "documentation": "Serializes a GET request with header member but no modeled body",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/no_payload",
                        "body": "",
                        "headers": {
                            "X-Amz-Test-Id": "t-12345"
                        },
                        "forbidHeaders": [
                            "Content-Length",
                            "Content-Type"
                        ],
                        "params": {
                            "testId": "t-12345"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestNoPayloadInputOutput": {
            "type": "structure",
            "members": {
                "testId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Amz-Test-Id"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#TestPayloadBlob": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestPayloadBlobInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestPayloadBlobInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a payload targeting a blob.\n\nThe Blob shape is not structured content and we cannot\nmake assumptions about what data will be sent. This test ensures\nonly a generic \"Content-Type: application/octet-stream\" header\nis used, and that we are not treating an empty body as an\nempty JSON document.\n",
                "smithy.api#http": {
                    "uri": "/blob_payload",
                    "method": "POST"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpWithEmptyBlobPayload",
                        "documentation": "Serializes a payload targeting an empty blob",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/blob_payload",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "Content-Type": "application/octet-stream"
                        },
                        "params": {}
                    },
                    {
                        "id": "RestJsonTestPayloadBlob",
                        "documentation": "Serializes a payload targeting a blob",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/blob_payload",
                        "body": "1234",
                        "bodyMediaType": "image/jpg",
                        "headers": {
                            "Content-Type": "image/jpg"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "contentType": "image/jpg",
                            "data": "1234"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestPayloadBlobInputOutput": {
            "type": "structure",
            "members": {
                "contentType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Type"
                    }
                },
                "data": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#TestPayloadStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestPayloadStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestPayloadStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a payload targeting a structure.\n\nThis enforces the same requirements as TestBodyStructure\nbut with the body specified by the @httpPayload trait.\n",
                "smithy.api#http": {
                    "uri": "/payload",
                    "method": "POST"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpWithEmptyStructurePayload",
                        "documentation": "Serializes a payload targeting an empty structure",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/payload",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {}
                    },
                    {
                        "id": "RestJsonTestPayloadStructure",
                        "documentation": "Serializes a payload targeting a structure",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/payload",
                        "body": "{\"data\": 25\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "payloadConfig": {
                                "data": 25
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpWithHeadersButNoPayload",
                        "documentation": "Serializes an request with header members but no payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/payload",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Amz-Test-Id": "t-12345"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "testId": "t-12345"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestPayloadStructureInputOutput": {
            "type": "structure",
            "members": {
                "testId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-test-id"
                    }
                },
                "payloadConfig": {
                    "target": "aws.protocoltests.restjson#PayloadConfig",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#TimestampFormatHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TimestampFormatHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TimestampFormatHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "This example tests how timestamp request and response headers are serialized.",
                "smithy.api#http": {
                    "uri": "/TimestampFormatHeaders",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonTimestampFormatHeaders",
                        "documentation": "Tests how timestamp request headers are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/TimestampFormatHeaders",
                        "headers": {
                            "X-memberEpochSeconds": "1576540098",
                            "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-memberDateTime": "2019-12-16T23:48:18Z",
                            "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetEpochSeconds": "1576540098",
                            "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetDateTime": "2019-12-16T23:48:18Z"
                        },
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonTimestampFormatHeaders",
                        "documentation": "Tests how timestamp response headers are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-memberEpochSeconds": "1576540098",
                            "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-memberDateTime": "2019-12-16T23:48:18Z",
                            "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetEpochSeconds": "1576540098",
                            "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetDateTime": "2019-12-16T23:48:18Z"
                        },
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TimestampFormatHeadersIO": {
            "type": "structure",
            "members": {
                "memberEpochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberEpochSeconds",
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "memberHttpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberHttpDate",
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "memberDateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberDateTime",
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "defaultFormat": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-defaultFormat"
                    }
                },
                "targetEpochSeconds": {
                    "target": "aws.protocoltests.shared#EpochSeconds",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetEpochSeconds"
                    }
                },
                "targetHttpDate": {
                    "target": "aws.protocoltests.shared#HttpDate",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetHttpDate"
                    }
                },
                "targetDateTime": {
                    "target": "aws.protocoltests.shared#DateTime",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetDateTime"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#UnionInputOutput": {
            "type": "structure",
            "members": {
                "contents": {
                    "target": "aws.protocoltests.restjson#MyUnion"
                }
            },
            "traits": {
                "smithy.api#documentation": "A shared structure that contains a single union member."
            }
        },
        "aws.protocoltests.restjson#UnionPayload": {
            "type": "union",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson#UnionWithJsonName": {
            "type": "union",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "FOO"
                    }
                },
                "bar": {
                    "target": "smithy.api#String"
                },
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "_baz"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#UnitInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test is similar to NoInputAndNoOutput, but uses explicit Unit types.",
                "smithy.api#http": {
                    "uri": "/UnitInputAndOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonUnitInputAndOutput",
                        "documentation": "A unit type input serializes no payload. When clients do not\nneed to serialize any data in the payload, they should omit\na payload altogether.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/UnitInputAndOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonUnitInputAllowsAccept",
                        "documentation": "Servers should allow the accept header to be set to the\ndefault content-type.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/UnitInputAndOutput",
                        "body": "",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonUnitInputAndOutputNoOutput",
                        "documentation": "When an operation defines Unit output, the service will respond\nwith an empty payload, and may optionally include the content-type\nheader.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.nested#GreetingStruct": {
            "type": "structure",
            "members": {
                "salutation": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson.validation#EnumList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson.validation#EnumString"
            }
        },
        "aws.protocoltests.restjson.validation#EnumMap": {
            "type": "map",
            "key": {
                "target": "aws.protocoltests.restjson.validation#EnumString"
            },
            "value": {
                "target": "aws.protocoltests.restjson.validation#EnumString"
            }
        },
        "aws.protocoltests.restjson.validation#EnumString": {
            "type": "enum",
            "members": {
                "ABC": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "abc"
                    }
                },
                "DEF": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "def"
                    }
                },
                "GHI": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "ghi",
                        "smithy.api#internal": {}
                    }
                },
                "JKL": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "jkl",
                        "smithy.api#tags": [
                            "internal"
                        ]
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#EnumTraitString": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "abc",
                        "name": "ABC",
                        "tags": [
                            "external"
                        ]
                    },
                    {
                        "value": "def",
                        "name": "DEF"
                    },
                    {
                        "value": "ghi",
                        "name": "GHI",
                        "tags": [
                            "internal"
                        ]
                    }
                ],
                "smithy.api#suppress": [
                    "ModelDeprecation"
                ]
            }
        },
        "aws.protocoltests.restjson.validation#EnumUnion": {
            "type": "union",
            "members": {
                "first": {
                    "target": "aws.protocoltests.restjson.validation#EnumString"
                },
                "second": {
                    "target": "aws.protocoltests.restjson.validation#EnumString"
                }
            }
        },
        "aws.protocoltests.restjson.validation#EvilString": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^([0-9]+)+$"
            }
        },
        "aws.protocoltests.restjson.validation#LengthBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#length": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#LengthList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson.validation#LengthString"
            },
            "traits": {
                "smithy.api#length": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#LengthMap": {
            "type": "map",
            "key": {
                "target": "aws.protocoltests.restjson.validation#LengthString"
            },
            "value": {
                "target": "aws.protocoltests.restjson.validation#LengthList"
            },
            "traits": {
                "smithy.api#length": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#LengthString": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedEnum": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedEnumInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedEnum",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedEnumString",
                        "documentation": "When a string member does not contain a valid enum value,\nthe response should be a 400 ValidationException. Internal-only\nenum values are excluded from the response message.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedEnum",
                            "body": "{ \"string\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/string' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\",\n  \"fieldList\" : [{\"message\": \"Value at '/string' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\", \"path\": \"/string\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "XYZ"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedEnumTraitString",
                        "documentation": "When a string member does not contain a valid enum value,\nthe response should be a 400 ValidationException. Internal-only\nenum values are excluded from the response message.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedEnum",
                            "body": "{ \"stringWithEnumTrait\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/stringWithEnumTrait' failed to satisfy constraint: Member must satisfy enum value set: [abc, def]\",\n  \"fieldList\" : [{\"message\": \"Value at '/stringWithEnumTrait' failed to satisfy constraint: Member must satisfy enum value set: [abc, def]\", \"path\": \"/stringWithEnumTrait\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "XYZ"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedEnumList",
                        "documentation": "When a list member value does not contain a valid enum value,\nthe response should be a 400 ValidationException. Internal-only\nenum values are excluded from the response message.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedEnum",
                            "body": "{ \"list\" : [$value:S] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/list/0' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\",\n  \"fieldList\" : [{\"message\": \"Value at '/list/0' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\", \"path\": \"/list/0\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "XYZ"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedEnumMapKey",
                        "documentation": "When a map member's key does not contain a valid enum value,\nthe response should be a 400 ValidationException. Internal-only\nenum values are excluded from the response message.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedEnum",
                            "body": "{ \"map\" : { $value:S : \"abc\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/map' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\",\n  \"fieldList\" : [{\"message\": \"Value at '/map' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\", \"path\": \"/map\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "XYZ"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedEnumMapValue",
                        "documentation": "When a map member's value does not contain a valid enum value,\nthe response should be a 400 ValidationException. Internal-only\nenum values are excluded from the response message.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedEnum",
                            "body": "{ \"map\" : { \"abc\": $value:S } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/map/abc' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\",\n  \"fieldList\" : [{\"message\": \"Value at '/map/abc' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\", \"path\": \"/map/abc\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "XYZ"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedEnumUnion",
                        "documentation": "When a union member's value does not contain a valid enum value,\nthe response should be a 400 ValidationException. Internal-only\nenum values are excluded from the response message.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedEnum",
                            "body": "{ \"union\" : { \"first\": $value:S } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/union/first' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\",\n  \"fieldList\" : [{\"message\": \"Value at '/union/first' failed to satisfy constraint: Member must satisfy enum value set: [abc, def, jkl]\", \"path\": \"/union/first\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "XYZ"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedEnumInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#EnumString"
                },
                "stringWithEnumTrait": {
                    "target": "aws.protocoltests.restjson.validation#EnumTraitString"
                },
                "list": {
                    "target": "aws.protocoltests.restjson.validation#EnumList"
                },
                "map": {
                    "target": "aws.protocoltests.restjson.validation#EnumMap"
                },
                "union": {
                    "target": "aws.protocoltests.restjson.validation#EnumUnion"
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedLength": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedLengthInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedLength",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedLengthBlob",
                        "documentation": "When a blob member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"blob\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/blob' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/blob' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/blob\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "YQ==",
                                "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo="
                            ],
                            "inputLength": [
                                "1",
                                "26"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthString",
                        "documentation": "When a string member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"string\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/string' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/string' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/string\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "a",
                                "abcdefghijklmnopqrstuvwxyz",
                                "👍"
                            ],
                            "inputLength": [
                                "1",
                                "26",
                                "1"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMinString",
                        "documentation": "When a string member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"minString\" : \"a\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length 1 at '/minString' failed to satisfy constraint: Member must have length greater than or equal to 2\",\n  \"fieldList\" : [{\"message\": \"Value with length 1 at '/minString' failed to satisfy constraint: Member must have length greater than or equal to 2\", \"path\": \"/minString\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMaxString",
                        "documentation": "When a string member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"maxString\" : \"abcdefghijklmnopqrstuvwxyz\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length 26 at '/maxString' failed to satisfy constraint: Member must have length less than or equal to 8\",\n  \"fieldList\" : [{\"message\": \"Value with length 26 at '/maxString' failed to satisfy constraint: Member must have length less than or equal to 8\", \"path\": \"/maxString\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthList",
                        "documentation": "When a list member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"list\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/list' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/list' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/list\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[\"abc\"]",
                                "[\"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]"
                            ],
                            "inputLength": [
                                "1",
                                "10"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthListValue",
                        "documentation": "When a list member's value does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"list\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/list/0' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/list/0' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/list/0\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[\"a\", \"abc\"]",
                                "[\"abcdefghijklmnopqrstuvwxyz\", \"abc\"]"
                            ],
                            "inputLength": [
                                "1",
                                "26"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMap",
                        "documentation": "When a map member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"map\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/map' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/map' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/map\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "{\"abc\": [\"def\", \"efg\", \"fgh\"]}",
                                "{\"abc\": [\"abc\", \"def\", \"efg\"], \"bcd\": [\"abc\", \"def\", \"efg\"],\n \"cde\": [\"abc\", \"def\", \"efg\"], \"def\": [\"abc\", \"def\", \"efg\"],\n \"efg\": [\"abc\", \"def\", \"efg\"], \"fgh\": [\"abc\", \"def\", \"efg\"],\n \"ghi\": [\"abc\", \"def\", \"efg\"], \"jkl\": [\"abc\", \"def\", \"efg\"],\n \"klm\": [\"abc\", \"def\", \"efg\"], \"lmn\": [\"abc\", \"def\", \"efg\"] }"
                            ],
                            "inputLength": [
                                "1",
                                "10"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMapKey",
                        "documentation": "When a map member's key does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"map\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/map' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/map' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/map\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "{\"a\": [\"abc\", \"def\", \"efg\"], \"bcd\": [\"abc\", \"def\", \"efg\"], \"cde\": [\"abc\", \"def\", \"efg\"]}",
                                "{\"abcdefghijklmnopqrstuvwxyz\": [\"abc\", \"def\", \"efg\"], \"bcd\": [\"abc\", \"def\", \"efg\"], \"cde\": [\"abc\", \"def\", \"efg\"]}"
                            ],
                            "inputLength": [
                                "1",
                                "26"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMapValue",
                        "documentation": "When a map member's value does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLength",
                            "body": "{ \"map\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/map/abc' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/map/abc' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/map/abc\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "{\"abc\": [\"def\"], \"bcd\": [\"abc\", \"def\", \"efg\"], \"cde\": [\"abc\", \"def\", \"efg\"]}",
                                "{\"abc\": [\"def\", \"efg\", \"fgh\", \"def\", \"efg\", \"fgh\", \"def\", \"efg\", \"fgh\", \"def\"],\n \"bcd\": [\"abc\", \"def\", \"efg\"],\n \"cde\": [\"abc\", \"def\", \"efg\"]}"
                            ],
                            "inputLength": [
                                "1",
                                "10"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedLengthInput": {
            "type": "structure",
            "members": {
                "blob": {
                    "target": "aws.protocoltests.restjson.validation#LengthBlob"
                },
                "string": {
                    "target": "aws.protocoltests.restjson.validation#LengthString"
                },
                "minString": {
                    "target": "aws.protocoltests.restjson.validation#MinLengthString"
                },
                "maxString": {
                    "target": "aws.protocoltests.restjson.validation#MaxLengthString"
                },
                "list": {
                    "target": "aws.protocoltests.restjson.validation#LengthList"
                },
                "map": {
                    "target": "aws.protocoltests.restjson.validation#LengthMap"
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedLengthOverride": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedLengthOverrideInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedLengthOverride",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedLengthBlobOverride",
                        "documentation": "When a blob member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthOverride",
                            "body": "{ \"blob\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/blob' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/blob' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\", \"path\": \"/blob\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "YWJj",
                                "YWJjZGVmZw=="
                            ],
                            "inputLength": [
                                "3",
                                "7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthStringOverride",
                        "documentation": "When a string member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthOverride",
                            "body": "{ \"string\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/string' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/string' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\", \"path\": \"/string\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "abc",
                                "abcdefg",
                                "👍👍👍"
                            ],
                            "inputLength": [
                                "3",
                                "7",
                                "3"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMinStringOverride",
                        "documentation": "When a string member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthOverride",
                            "body": "{ \"minString\" : \"abc\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length 3 at '/minString' failed to satisfy constraint: Member must have length greater than or equal to 4\",\n  \"fieldList\" : [{\"message\": \"Value with length 3 at '/minString' failed to satisfy constraint: Member must have length greater than or equal to 4\", \"path\": \"/minString\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMaxStringOverride",
                        "documentation": "When a string member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthOverride",
                            "body": "{ \"maxString\" : \"abcdefg\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length 7 at '/maxString' failed to satisfy constraint: Member must have length less than or equal to 6\",\n  \"fieldList\" : [{\"message\": \"Value with length 7 at '/maxString' failed to satisfy constraint: Member must have length less than or equal to 6\", \"path\": \"/maxString\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthListOverride",
                        "documentation": "When a list member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthOverride",
                            "body": "{ \"list\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/list' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/list' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\", \"path\": \"/list\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[\"abc\", \"def\", \"ghi\"]",
                                "[\"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]"
                            ],
                            "inputLength": [
                                "3",
                                "7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedLengthMapOverride",
                        "documentation": "When a map member does not fit within length bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthOverride",
                            "body": "{ \"map\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length $inputLength:L at '/map' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length $inputLength:L at '/map' failed to satisfy constraint: Member must have length between 4 and 6, inclusive\", \"path\": \"/map\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "{\"abc\": [\"def\", \"efg\", \"fgh\"], \"bcd\": [\"abc\", \"def\", \"efg\"], \"def\": [\"abc\", \"def\", \"efg\"]}",
                                "{\"abc\": [\"abc\", \"def\", \"efg\"], \"bcd\": [\"abc\", \"def\", \"efg\"],\n \"cde\": [\"abc\", \"def\", \"efg\"], \"def\": [\"abc\", \"def\", \"efg\"],\n \"efg\": [\"abc\", \"def\", \"efg\"], \"fgh\": [\"abc\", \"def\", \"efg\"],\n \"ghi\": [\"abc\", \"def\", \"efg\"] }"
                            ],
                            "inputLength": [
                                "3",
                                "7"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedLengthOverrideInput": {
            "type": "structure",
            "members": {
                "blob": {
                    "target": "aws.protocoltests.restjson.validation#LengthBlob",
                    "traits": {
                        "smithy.api#length": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "string": {
                    "target": "aws.protocoltests.restjson.validation#LengthString",
                    "traits": {
                        "smithy.api#length": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "minString": {
                    "target": "aws.protocoltests.restjson.validation#MinLengthString",
                    "traits": {
                        "smithy.api#length": {
                            "min": 4
                        }
                    }
                },
                "maxString": {
                    "target": "aws.protocoltests.restjson.validation#MaxLengthString",
                    "traits": {
                        "smithy.api#length": {
                            "max": 6
                        }
                    }
                },
                "list": {
                    "target": "aws.protocoltests.restjson.validation#LengthList",
                    "traits": {
                        "smithy.api#length": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "map": {
                    "target": "aws.protocoltests.restjson.validation#LengthMap",
                    "traits": {
                        "smithy.api#length": {
                            "min": 4,
                            "max": 6
                        }
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedLengthQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedLengthQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedLengthQueryString",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedLengthQueryStringNoValue",
                        "documentation": "When a required member has no value in the query string,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLengthQueryString",
                            "body": "{}",
                            "queryParams": [
                                "string"
                            ],
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value with length 0 at '/string' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value with length 0 at '/string' failed to satisfy constraint: Member must have length between 2 and 8, inclusive\", \"path\": \"/string\"}]}"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedLengthQueryStringInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#LengthString",
                    "traits": {
                        "smithy.api#httpQuery": "string"
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedPattern": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedPatternInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedPattern",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedPatternString",
                        "documentation": "When a string member does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPattern",
                            "body": "{ \"string\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/string' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/string' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\", \"path\": \"/string\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternReDOSString",
                        "documentation": "When the specified pattern is susceptible to ReDOS, the service will not\nhang indefinitely while evaluating the pattern",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPattern",
                            "body": "{ \"evilString\" : \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000!\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value 000000000000000000000000000000000000000000000000000000000000000000000000000000000000! at '/evilString' failed to satisfy constraint: Member must satisfy regular expression pattern: ^([0-9]+)+$$\",\n  \"fieldList\" : [{\"message\": \"Value 000000000000000000000000000000000000000000000000000000000000000000000000000000000000! at '/evilString' failed to satisfy constraint: Member must satisfy regular expression pattern: ^([0-9]+)+$$\", \"path\": \"/evilString\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternList",
                        "documentation": "When a list member value does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPattern",
                            "body": "{ \"list\" : [$value:S] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/list/0' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/list/0' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\", \"path\": \"/list/0\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternMapKey",
                        "documentation": "When a map member's key does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPattern",
                            "body": "{ \"map\" : { $value:S : \"abc\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/map' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/map' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\", \"path\": \"/map\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternMapValue",
                        "documentation": "When a map member's value does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPattern",
                            "body": "{ \"map\" : { \"abc\": $value:S } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/map/abc' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/map/abc' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\", \"path\": \"/map/abc\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternUnion",
                        "documentation": "When a union member's value does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPattern",
                            "body": "{ \"union\" : { \"first\": $value:S } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/union/first' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/union/first' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$$\", \"path\": \"/union/first\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "ABC",
                                "xyz"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedPatternInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#PatternString"
                },
                "evilString": {
                    "target": "aws.protocoltests.restjson.validation#EvilString"
                },
                "list": {
                    "target": "aws.protocoltests.restjson.validation#PatternList"
                },
                "map": {
                    "target": "aws.protocoltests.restjson.validation#PatternMap"
                },
                "union": {
                    "target": "aws.protocoltests.restjson.validation#PatternUnion"
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedPatternOverride": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedPatternOverrideInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedPatternOverride",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedPatternStringOverride",
                        "documentation": "When a string member does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPatternOverride",
                            "body": "{ \"string\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/string' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/string' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\", \"path\": \"/string\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "abc",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternListOverride",
                        "documentation": "When a list member value does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPatternOverride",
                            "body": "{ \"list\" : [$value:S] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/list/0' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/list/0' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\", \"path\": \"/list/0\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "abc",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternMapKeyOverride",
                        "documentation": "When a map member's key does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPatternOverride",
                            "body": "{ \"map\" : { $value:S : \"ghi\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/map' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/map' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\", \"path\": \"/map\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "abc",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternMapValueOverride",
                        "documentation": "When a map member's value does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPatternOverride",
                            "body": "{ \"map\" : { \"ghi\": $value:S } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/map/ghi' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/map/ghi' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\", \"path\": \"/map/ghi\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "abc",
                                "xyz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedPatternUnionOverride",
                        "documentation": "When a union member's value does not match the specified pattern,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedPatternOverride",
                            "body": "{ \"union\" : { \"first\": $value:S } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/union/first' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\",\n  \"fieldList\" : [{\"message\": \"Value at '/union/first' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[g-m]+$$\", \"path\": \"/union/first\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "abc",
                                "xyz"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedPatternOverrideInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#PatternString",
                    "traits": {
                        "smithy.api#pattern": "^[g-m]+$"
                    }
                },
                "list": {
                    "target": "aws.protocoltests.restjson.validation#PatternListOverride"
                },
                "map": {
                    "target": "aws.protocoltests.restjson.validation#PatternMapOverride"
                },
                "union": {
                    "target": "aws.protocoltests.restjson.validation#PatternUnionOverride"
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedRange": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedRangeInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedRange",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedRangeByte",
                        "documentation": "When a byte member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"byte\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/byte' failed to satisfy constraint: Member must be between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/byte' failed to satisfy constraint: Member must be between 2 and 8, inclusive\", \"path\": \"/byte\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1",
                                "9"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinByte",
                        "documentation": "When a byte member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"minByte\" : 1 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minByte' failed to satisfy constraint: Member must be greater than or equal to 2\",\n  \"fieldList\" : [{\"message\": \"Value at '/minByte' failed to satisfy constraint: Member must be greater than or equal to 2\", \"path\": \"/minByte\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxByte",
                        "documentation": "When a byte member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"maxByte\" : 9 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxByte' failed to satisfy constraint: Member must be less than or equal to 8\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxByte' failed to satisfy constraint: Member must be less than or equal to 8\", \"path\": \"/maxByte\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeFloat",
                        "documentation": "When a float member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"float\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/float' failed to satisfy constraint: Member must be between 2.2 and 8.8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/float' failed to satisfy constraint: Member must be between 2.2 and 8.8, inclusive\", \"path\": \"/float\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "2.1",
                                "8.9"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinFloat",
                        "documentation": "When a float member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"minFloat\" : 2.1 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minFloat' failed to satisfy constraint: Member must be greater than or equal to 2.2\",\n  \"fieldList\" : [{\"message\": \"Value at '/minFloat' failed to satisfy constraint: Member must be greater than or equal to 2.2\", \"path\": \"/minFloat\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxFloat",
                        "documentation": "When a float member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"maxFloat\" : 8.9 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxFloat' failed to satisfy constraint: Member must be less than or equal to 8.8\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxFloat' failed to satisfy constraint: Member must be less than or equal to 8.8\", \"path\": \"/maxFloat\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeShort",
                        "documentation": "When a short member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"short\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/short' failed to satisfy constraint: Member must be between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/short' failed to satisfy constraint: Member must be between 2 and 8, inclusive\", \"path\": \"/short\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1",
                                "9"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinShort",
                        "documentation": "When a short member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"minShort\" : 1 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minShort' failed to satisfy constraint: Member must be greater than or equal to 2\",\n  \"fieldList\" : [{\"message\": \"Value at '/minShort' failed to satisfy constraint: Member must be greater than or equal to 2\", \"path\": \"/minShort\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxShort",
                        "documentation": "When a short member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"maxShort\" : 9 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxShort' failed to satisfy constraint: Member must be less than or equal to 8\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxShort' failed to satisfy constraint: Member must be less than or equal to 8\", \"path\": \"/maxShort\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeInteger",
                        "documentation": "When a integer member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"integer\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/integer' failed to satisfy constraint: Member must be between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/integer' failed to satisfy constraint: Member must be between 2 and 8, inclusive\", \"path\": \"/integer\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1",
                                "9"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinInteger",
                        "documentation": "When a integer member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"minInteger\" : 1 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minInteger' failed to satisfy constraint: Member must be greater than or equal to 2\",\n  \"fieldList\" : [{\"message\": \"Value at '/minInteger' failed to satisfy constraint: Member must be greater than or equal to 2\", \"path\": \"/minInteger\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxInteger",
                        "documentation": "When a integer member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"maxInteger\" : 9 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxInteger' failed to satisfy constraint: Member must be less than or equal to 8\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxInteger' failed to satisfy constraint: Member must be less than or equal to 8\", \"path\": \"/maxInteger\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeLong",
                        "documentation": "When a long member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"long\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/long' failed to satisfy constraint: Member must be between 2 and 8, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/long' failed to satisfy constraint: Member must be between 2 and 8, inclusive\", \"path\": \"/long\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1",
                                "9"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinLong",
                        "documentation": "When a long member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"minLong\" : 1 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minLong' failed to satisfy constraint: Member must be greater than or equal to 2\",\n  \"fieldList\" : [{\"message\": \"Value at '/minLong' failed to satisfy constraint: Member must be greater than or equal to 2\", \"path\": \"/minLong\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxLong",
                        "documentation": "When a long member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRange",
                            "body": "{ \"maxLong\" : 9 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxLong' failed to satisfy constraint: Member must be less than or equal to 8\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxLong' failed to satisfy constraint: Member must be less than or equal to 8\", \"path\": \"/maxLong\"}]}"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedRangeInput": {
            "type": "structure",
            "members": {
                "byte": {
                    "target": "aws.protocoltests.restjson.validation#RangeByte"
                },
                "minByte": {
                    "target": "aws.protocoltests.restjson.validation#MinByte"
                },
                "maxByte": {
                    "target": "aws.protocoltests.restjson.validation#MaxByte"
                },
                "short": {
                    "target": "aws.protocoltests.restjson.validation#RangeShort"
                },
                "minShort": {
                    "target": "aws.protocoltests.restjson.validation#MinShort"
                },
                "maxShort": {
                    "target": "aws.protocoltests.restjson.validation#MaxShort"
                },
                "integer": {
                    "target": "aws.protocoltests.restjson.validation#RangeInteger"
                },
                "minInteger": {
                    "target": "aws.protocoltests.restjson.validation#MinInteger"
                },
                "maxInteger": {
                    "target": "aws.protocoltests.restjson.validation#MaxInteger"
                },
                "long": {
                    "target": "aws.protocoltests.restjson.validation#RangeLong"
                },
                "minLong": {
                    "target": "aws.protocoltests.restjson.validation#MinLong"
                },
                "maxLong": {
                    "target": "aws.protocoltests.restjson.validation#MaxLong"
                },
                "float": {
                    "target": "aws.protocoltests.restjson.validation#RangeFloat"
                },
                "minFloat": {
                    "target": "aws.protocoltests.restjson.validation#MinFloat"
                },
                "maxFloat": {
                    "target": "aws.protocoltests.restjson.validation#MaxFloat"
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedRangeOverride": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedRangeOverrideInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedRangeOverride",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedRangeByteOverride",
                        "documentation": "When a byte member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"byte\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/byte' failed to satisfy constraint: Member must be between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/byte' failed to satisfy constraint: Member must be between 4 and 6, inclusive\", \"path\": \"/byte\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "3",
                                "7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinByteOverride",
                        "documentation": "When a byte member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"minByte\" : 3 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minByte' failed to satisfy constraint: Member must be greater than or equal to 4\",\n  \"fieldList\" : [{\"message\": \"Value at '/minByte' failed to satisfy constraint: Member must be greater than or equal to 4\", \"path\": \"/minByte\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxByteOverride",
                        "documentation": "When a byte member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"maxByte\" : 7 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxByte' failed to satisfy constraint: Member must be less than or equal to 6\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxByte' failed to satisfy constraint: Member must be less than or equal to 6\", \"path\": \"/maxByte\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeFloatOverride",
                        "documentation": "When a float member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"float\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/float' failed to satisfy constraint: Member must be between 4.4 and 6.6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/float' failed to satisfy constraint: Member must be between 4.4 and 6.6, inclusive\", \"path\": \"/float\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "4.3",
                                "6.7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinFloatOverride",
                        "documentation": "When a float member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"minFloat\" : 4.3 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minFloat' failed to satisfy constraint: Member must be greater than or equal to 4.4\",\n  \"fieldList\" : [{\"message\": \"Value at '/minFloat' failed to satisfy constraint: Member must be greater than or equal to 4.4\", \"path\": \"/minFloat\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxFloatOverride",
                        "documentation": "When a float member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"maxFloat\" : 6.7 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxFloat' failed to satisfy constraint: Member must be less than or equal to 6.6\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxFloat' failed to satisfy constraint: Member must be less than or equal to 6.6\", \"path\": \"/maxFloat\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeShortOverride",
                        "documentation": "When a short member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"short\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/short' failed to satisfy constraint: Member must be between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/short' failed to satisfy constraint: Member must be between 4 and 6, inclusive\", \"path\": \"/short\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "3",
                                "7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinShortOverride",
                        "documentation": "When a short member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"minShort\" : 3 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minShort' failed to satisfy constraint: Member must be greater than or equal to 4\",\n  \"fieldList\" : [{\"message\": \"Value at '/minShort' failed to satisfy constraint: Member must be greater than or equal to 4\", \"path\": \"/minShort\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxShortOverride",
                        "documentation": "When a short member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"maxShort\" : 7 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxShort' failed to satisfy constraint: Member must be less than or equal to 6\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxShort' failed to satisfy constraint: Member must be less than or equal to 6\", \"path\": \"/maxShort\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeIntegerOverride",
                        "documentation": "When a integer member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"integer\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/integer' failed to satisfy constraint: Member must be between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/integer' failed to satisfy constraint: Member must be between 4 and 6, inclusive\", \"path\": \"/integer\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "3",
                                "7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinIntegerOverride",
                        "documentation": "When a integer member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"minInteger\" : 3 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minInteger' failed to satisfy constraint: Member must be greater than or equal to 4\",\n  \"fieldList\" : [{\"message\": \"Value at '/minInteger' failed to satisfy constraint: Member must be greater than or equal to 4\", \"path\": \"/minInteger\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxIntegerOverride",
                        "documentation": "When a integer member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"maxInteger\" : 7 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxInteger' failed to satisfy constraint: Member must be less than or equal to 6\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxInteger' failed to satisfy constraint: Member must be less than or equal to 6\", \"path\": \"/maxInteger\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeLongOverride",
                        "documentation": "When a long member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"long\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/long' failed to satisfy constraint: Member must be between 4 and 6, inclusive\",\n  \"fieldList\" : [{\"message\": \"Value at '/long' failed to satisfy constraint: Member must be between 4 and 6, inclusive\", \"path\": \"/long\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "3",
                                "7"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMinLongOverride",
                        "documentation": "When a long member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"minLong\" : 3 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/minLong' failed to satisfy constraint: Member must be greater than or equal to 4\",\n  \"fieldList\" : [{\"message\": \"Value at '/minLong' failed to satisfy constraint: Member must be greater than or equal to 4\", \"path\": \"/minLong\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRangeMaxLongOverride",
                        "documentation": "When a long member does not fit within range bounds,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRangeOverride",
                            "body": "{ \"maxLong\" : 7 }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/maxLong' failed to satisfy constraint: Member must be less than or equal to 6\",\n  \"fieldList\" : [{\"message\": \"Value at '/maxLong' failed to satisfy constraint: Member must be less than or equal to 6\", \"path\": \"/maxLong\"}]}"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedRangeOverrideInput": {
            "type": "structure",
            "members": {
                "byte": {
                    "target": "aws.protocoltests.restjson.validation#RangeByte",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "minByte": {
                    "target": "aws.protocoltests.restjson.validation#MinByte",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4
                        }
                    }
                },
                "maxByte": {
                    "target": "aws.protocoltests.restjson.validation#MaxByte",
                    "traits": {
                        "smithy.api#range": {
                            "max": 6
                        }
                    }
                },
                "short": {
                    "target": "aws.protocoltests.restjson.validation#RangeShort",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "minShort": {
                    "target": "aws.protocoltests.restjson.validation#MinShort",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4
                        }
                    }
                },
                "maxShort": {
                    "target": "aws.protocoltests.restjson.validation#MaxShort",
                    "traits": {
                        "smithy.api#range": {
                            "max": 6
                        }
                    }
                },
                "integer": {
                    "target": "aws.protocoltests.restjson.validation#RangeInteger",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "minInteger": {
                    "target": "aws.protocoltests.restjson.validation#MinInteger",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4
                        }
                    }
                },
                "maxInteger": {
                    "target": "aws.protocoltests.restjson.validation#MaxInteger",
                    "traits": {
                        "smithy.api#range": {
                            "max": 6
                        }
                    }
                },
                "long": {
                    "target": "aws.protocoltests.restjson.validation#RangeLong",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4,
                            "max": 6
                        }
                    }
                },
                "minLong": {
                    "target": "aws.protocoltests.restjson.validation#MinLong",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4
                        }
                    }
                },
                "maxLong": {
                    "target": "aws.protocoltests.restjson.validation#MaxLong",
                    "traits": {
                        "smithy.api#range": {
                            "max": 6
                        }
                    }
                },
                "float": {
                    "target": "aws.protocoltests.restjson.validation#RangeFloat",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4.4,
                            "max": 6.6
                        }
                    }
                },
                "minFloat": {
                    "target": "aws.protocoltests.restjson.validation#MinFloat",
                    "traits": {
                        "smithy.api#range": {
                            "min": 4.4
                        }
                    }
                },
                "maxFloat": {
                    "target": "aws.protocoltests.restjson.validation#MaxFloat",
                    "traits": {
                        "smithy.api#range": {
                            "max": 6.6
                        }
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedRequired": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedRequiredInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedRequired",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedRequiredBodyUnset",
                        "documentation": "When a required member is not set in the message body,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequired",
                            "body": "{  }",
                            "queryParams": [
                                "stringInQuery=abc"
                            ],
                            "headers": {
                                "content-type": "application/json",
                                "string-in-headers": "abc"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/string' failed to satisfy constraint: Member must not be null\",\n  \"fieldList\" : [{\"message\": \"Value at '/string' failed to satisfy constraint: Member must not be null\", \"path\": \"/string\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRequiredBodyExplicitNull",
                        "documentation": "When a required member is set to null in the message body,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequired",
                            "body": "{ \"string\": null }",
                            "queryParams": [
                                "stringInQuery=abc"
                            ],
                            "headers": {
                                "content-type": "application/json",
                                "string-in-headers": "abc"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/string' failed to satisfy constraint: Member must not be null\",\n  \"fieldList\" : [{\"message\": \"Value at '/string' failed to satisfy constraint: Member must not be null\", \"path\": \"/string\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedRequiredHeaderUnset",
                        "documentation": "When a required member is not set in headers,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequired",
                            "body": "{ \"string\": \"abc\" }",
                            "queryParams": [
                                "stringInQuery=abc"
                            ],
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/stringInHeader' failed to satisfy constraint: Member must not be null\",\n  \"fieldList\" : [{\"message\": \"Value at '/stringInHeader' failed to satisfy constraint: Member must not be null\", \"path\": \"/stringInHeader\"}]}"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedRequiredInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "stringInQuery": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "stringInQuery",
                        "smithy.api#required": {}
                    }
                },
                "stringInHeader": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "string-in-headers",
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#MalformedUniqueItems": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#MalformedUniqueItemsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedUniqueItems",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedUniqueItemsBlobList",
                        "documentation": "When a blob list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"blobList\" : [\"YQ==\", \"YQ==\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/blobList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/blobList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/blobList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsBooleanList",
                        "documentation": "When a boolean list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"booleanList\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/booleanList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/booleanList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/booleanList\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[true, true]",
                                "[false, false]"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsStringList",
                        "documentation": "When a string list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"stringList\" : [\"abc\", \"abc\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/stringList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/stringList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/stringList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsByteList",
                        "documentation": "When a byte list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"byteList\" : [1, 1] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/byteList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/byteList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/byteList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsShortList",
                        "documentation": "When a short list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"shortList\" : [2, 2] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/shortList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/shortList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/shortList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsIntegerList",
                        "documentation": "When an integer list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"integerList\" : [3, 3] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/integerList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/integerList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/integerList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsLongList",
                        "documentation": "When an integer list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"longList\" : [4, 4] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/longList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/longList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/longList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsTimestampList",
                        "documentation": "When a timestamp list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"timestampList\" : [1676660607, 1676660607] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/timestampList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/timestampList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/timestampList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsDateTimeList",
                        "documentation": "When a date-time timestamp list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"dateTimeList\" : [\"1985-04-12T23:20:50.52Z\", \"1985-04-12T23:20:50.52Z\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/dateTimeList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/dateTimeList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/dateTimeList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsHttpDateList",
                        "documentation": "When a http-date timestamp list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"httpDateList\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/httpDateList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/httpDateList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/httpDateList\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[\"Tue, 29 Apr 2014 18:30:38 GMT\", \"Tue, 29 Apr 2014 18:30:38 GMT\"]"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsEnumList",
                        "documentation": "When an enum list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"enumList\" : [\"Foo\", \"Foo\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/enumList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/enumList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/enumList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsIntEnumList",
                        "documentation": "When an intEnum list contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"intEnumList\" : [3, 3] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/intEnumList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/intEnumList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/intEnumList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsListList",
                        "documentation": "When an list of lists contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"listList\" : [[\"foo\",\"bar\"], [\"foo\",\"bar\"]] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/listList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/listList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/listList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsStructureList",
                        "documentation": "When an list of structures contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"structureList\" : [{\"hi\": \"hello\"}, {\"hi\": \"hello\"}] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/structureList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/structureList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/structureList\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsStructureMissingKeyList",
                        "documentation": "When a list of structures does not contain required keys,\nthe response should be a 400 ValidationException and not\na 500 error.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"structureListWithNoKey\" : [{\"hi2\": \"bar\"}] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/structureListWithNoKey/0/hi' failed to satisfy constraint: Member must not be null\",\n  \"fieldList\" : [{\"message\": \"Value at '/structureListWithNoKey/0/hi' failed to satisfy constraint: Member must not be null\", \"path\": \"/structureListWithNoKey/0/hi\"}]}"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUniqueItemsUnionList",
                        "documentation": "When an list of unions contains non-unique values,\nthe response should be a 400 ValidationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUniqueItems",
                            "body": "{ \"unionList\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/unionList' failed to satisfy constraint: Member must have unique values\",\n  \"fieldList\" : [{\"message\": \"Value at '/unionList' failed to satisfy constraint: Member must have unique values\", \"path\": \"/unionList\"}]}"
                                }
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[{\"string\": \"foo\"}, {\"string\": \"foo\"}]",
                                "[{\"integer\": 1}, {\"integer\": 1}]"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#MalformedUniqueItemsInput": {
            "type": "structure",
            "members": {
                "blobList": {
                    "target": "aws.protocoltests.shared#BlobSet"
                },
                "booleanList": {
                    "target": "aws.protocoltests.shared#BooleanSet"
                },
                "stringList": {
                    "target": "aws.protocoltests.shared#StringSet"
                },
                "byteList": {
                    "target": "aws.protocoltests.shared#ByteSet"
                },
                "shortList": {
                    "target": "aws.protocoltests.shared#ShortSet"
                },
                "integerList": {
                    "target": "aws.protocoltests.shared#IntegerSet"
                },
                "longList": {
                    "target": "aws.protocoltests.shared#LongSet"
                },
                "timestampList": {
                    "target": "aws.protocoltests.shared#TimestampSet"
                },
                "dateTimeList": {
                    "target": "aws.protocoltests.shared#DateTimeSet"
                },
                "httpDateList": {
                    "target": "aws.protocoltests.shared#HttpDateSet"
                },
                "enumList": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumSet"
                },
                "listList": {
                    "target": "aws.protocoltests.shared#ListSet"
                },
                "structureList": {
                    "target": "aws.protocoltests.shared#StructureSet"
                },
                "structureListWithNoKey": {
                    "target": "aws.protocoltests.restjson.validation#StructureSetWithNoKey"
                },
                "unionList": {
                    "target": "aws.protocoltests.shared#UnionSet"
                }
            }
        },
        "aws.protocoltests.restjson.validation#MaxByte": {
            "type": "byte",
            "traits": {
                "smithy.api#range": {
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MaxFloat": {
            "type": "float",
            "traits": {
                "smithy.api#range": {
                    "max": 8.8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MaxInteger": {
            "type": "integer",
            "traits": {
                "smithy.api#range": {
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MaxLengthString": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MaxLong": {
            "type": "long",
            "traits": {
                "smithy.api#range": {
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MaxShort": {
            "type": "short",
            "traits": {
                "smithy.api#range": {
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#MinByte": {
            "type": "byte",
            "traits": {
                "smithy.api#range": {
                    "min": 2
                }
            }
        },
        "aws.protocoltests.restjson.validation#MinFloat": {
            "type": "float",
            "traits": {
                "smithy.api#range": {
                    "min": 2.2
                }
            }
        },
        "aws.protocoltests.restjson.validation#MinInteger": {
            "type": "integer",
            "traits": {
                "smithy.api#range": {
                    "min": 2
                }
            }
        },
        "aws.protocoltests.restjson.validation#MinLengthString": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 2
                }
            }
        },
        "aws.protocoltests.restjson.validation#MinLong": {
            "type": "long",
            "traits": {
                "smithy.api#range": {
                    "min": 2
                }
            }
        },
        "aws.protocoltests.restjson.validation#MinShort": {
            "type": "short",
            "traits": {
                "smithy.api#range": {
                    "min": 2
                }
            }
        },
        "aws.protocoltests.restjson.validation#MissingKeyStructure": {
            "type": "structure",
            "members": {
                "hi": {
                    "target": "aws.protocoltests.restjson.validation#MyStringKey",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#MyStringKey": {
            "type": "string"
        },
        "aws.protocoltests.restjson.validation#PatternList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson.validation#PatternString"
            }
        },
        "aws.protocoltests.restjson.validation#PatternListOverride": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson.validation#PatternString",
                "traits": {
                    "smithy.api#pattern": "^[g-m]+$"
                }
            }
        },
        "aws.protocoltests.restjson.validation#PatternMap": {
            "type": "map",
            "key": {
                "target": "aws.protocoltests.restjson.validation#PatternString"
            },
            "value": {
                "target": "aws.protocoltests.restjson.validation#PatternString"
            }
        },
        "aws.protocoltests.restjson.validation#PatternMapOverride": {
            "type": "map",
            "key": {
                "target": "aws.protocoltests.restjson.validation#PatternString",
                "traits": {
                    "smithy.api#pattern": "^[g-m]+$"
                }
            },
            "value": {
                "target": "aws.protocoltests.restjson.validation#PatternString",
                "traits": {
                    "smithy.api#pattern": "^[g-m]+$"
                }
            }
        },
        "aws.protocoltests.restjson.validation#PatternString": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^[a-m]+$"
            }
        },
        "aws.protocoltests.restjson.validation#PatternUnion": {
            "type": "union",
            "members": {
                "first": {
                    "target": "aws.protocoltests.restjson.validation#PatternString"
                },
                "second": {
                    "target": "aws.protocoltests.restjson.validation#PatternString"
                }
            }
        },
        "aws.protocoltests.restjson.validation#PatternUnionOverride": {
            "type": "union",
            "members": {
                "first": {
                    "target": "aws.protocoltests.restjson.validation#PatternString",
                    "traits": {
                        "smithy.api#pattern": "^[g-m]+$"
                    }
                },
                "second": {
                    "target": "aws.protocoltests.restjson.validation#PatternString",
                    "traits": {
                        "smithy.api#pattern": "^[g-m]+$"
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#RangeByte": {
            "type": "byte",
            "traits": {
                "smithy.api#range": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#RangeFloat": {
            "type": "float",
            "traits": {
                "smithy.api#range": {
                    "min": 2.2,
                    "max": 8.8
                }
            }
        },
        "aws.protocoltests.restjson.validation#RangeInteger": {
            "type": "integer",
            "traits": {
                "smithy.api#range": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#RangeLong": {
            "type": "long",
            "traits": {
                "smithy.api#range": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#RangeShort": {
            "type": "short",
            "traits": {
                "smithy.api#range": {
                    "min": 2,
                    "max": 8
                }
            }
        },
        "aws.protocoltests.restjson.validation#RecursiveEnumString": {
            "type": "enum",
            "members": {
                "ABC": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "abc"
                    }
                },
                "DEF": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "def"
                    }
                }
            }
        },
        "aws.protocoltests.restjson.validation#RecursiveStructures": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#RecursiveStructuresInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/RecursiveStructures",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedRecursiveStructures",
                        "documentation": "When a value deeply nested in a recursive structure does not meet constraints,\na 400 ValidationException is returned.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/RecursiveStructures",
                            "body": "{ \"union\" : {\n    \"union\" : {\n        \"union\" : { \"string\" : \"XYZ\" }\n     }\n  }\n}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/union/union/union/string' failed to satisfy constraint: Member must satisfy enum value set: [abc, def]\",\n  \"fieldList\" : [{\"message\": \"Value at '/union/union/union/string' failed to satisfy constraint: Member must satisfy enum value set: [abc, def]\", \"path\": \"/union/union/union/string\"}]}"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonRecursiveStructuresValidate",
                        "documentation": "Validation should work with recursive structures.",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "union": {
                                "union": {
                                    "union": {
                                        "string": "abc"
                                    }
                                }
                            }
                        },
                        "method": "POST",
                        "uri": "/RecursiveStructures",
                        "headers": {
                            "content-type": "application/json"
                        },
                        "body": "{ \"union\" : {\n    \"union\" : {\n        \"union\" : { \"string\" : \"abc\" }\n    }\n  }\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#RecursiveStructuresInput": {
            "type": "structure",
            "members": {
                "union": {
                    "target": "aws.protocoltests.restjson.validation#RecursiveUnionOne"
                }
            }
        },
        "aws.protocoltests.restjson.validation#RecursiveUnionOne": {
            "type": "union",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#RecursiveEnumString"
                },
                "union": {
                    "target": "aws.protocoltests.restjson.validation#RecursiveUnionTwo"
                }
            }
        },
        "aws.protocoltests.restjson.validation#RecursiveUnionTwo": {
            "type": "union",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#RecursiveEnumString"
                },
                "union": {
                    "target": "aws.protocoltests.restjson.validation#RecursiveUnionOne"
                }
            }
        },
        "aws.protocoltests.restjson.validation#RestJsonValidation": {
            "type": "service",
            "version": "2021-08-19",
            "operations": [
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedEnum"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedLength"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedLengthOverride"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedLengthQueryString"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedPattern"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedPatternOverride"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedRange"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedRangeOverride"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedRequired"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#MalformedUniqueItems"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#RecursiveStructures"
                },
                {
                    "target": "aws.protocoltests.restjson.validation#SensitiveValidation"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Rest Json Validation Protocol"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#documentation": "A REST JSON service that sends JSON requests and responses with validation applied"
            }
        },
        "aws.protocoltests.restjson.validation#SensitivePatternString": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^[a-m]+$",
                "smithy.api#sensitive": {}
            }
        },
        "aws.protocoltests.restjson.validation#SensitiveValidation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson.validation#SensitiveValidationInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "errors": [
                {
                    "target": "smithy.framework#ValidationException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "uri": "/SensitiveValidation",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedPatternSensitiveString",
                        "documentation": "When a sensitive member fails validation, the resultant\nValidationException will omit the value of the input.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/SensitiveValidation",
                            "body": "{ \"string\" : \"ABC\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "ValidationException"
                            },
                            "body": {
                                "mediaType": "application/json",
                                "assertion": {
                                    "contents": "{ \"message\" : \"1 validation error detected. Value at '/string' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$\",\n  \"fieldList\" : [{\"message\": \"Value at '/string' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[a-m]+$\", \"path\": \"/string\"}]}"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson.validation#SensitiveValidationInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "aws.protocoltests.restjson.validation#SensitivePatternString"
                }
            }
        },
        "aws.protocoltests.restjson.validation#StructureSetWithNoKey": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson.validation#MissingKeyStructure"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.restxml#AllQueryStringTypes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#AllQueryStringTypesInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses all query string types.",
                "smithy.api#http": {
                    "uri": "/AllQueryStringTypesInput",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "AllQueryStringTypes",
                        "documentation": "Serializes query string parameters with all supported types",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "String=Hello%20there",
                            "StringList=a",
                            "StringList=b",
                            "StringList=c",
                            "StringSet=a",
                            "StringSet=b",
                            "StringSet=c",
                            "Byte=1",
                            "Short=2",
                            "Integer=3",
                            "IntegerList=1",
                            "IntegerList=2",
                            "IntegerList=3",
                            "IntegerSet=1",
                            "IntegerSet=2",
                            "IntegerSet=3",
                            "Long=4",
                            "Float=1.1",
                            "Double=1.1",
                            "DoubleList=1.1",
                            "DoubleList=2.1",
                            "DoubleList=3.1",
                            "Boolean=true",
                            "BooleanList=true",
                            "BooleanList=false",
                            "BooleanList=true",
                            "Timestamp=1970-01-01T00%3A00%3A01Z",
                            "TimestampList=1970-01-01T00%3A00%3A01Z",
                            "TimestampList=1970-01-01T00%3A00%3A02Z",
                            "TimestampList=1970-01-01T00%3A00%3A03Z",
                            "Enum=Foo",
                            "EnumList=Foo",
                            "EnumList=Baz",
                            "EnumList=Bar",
                            "IntegerEnum=1",
                            "IntegerEnumList=1",
                            "IntegerEnumList=2"
                        ],
                        "params": {
                            "queryString": "Hello there",
                            "queryStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "queryStringSet": [
                                "a",
                                "b",
                                "c"
                            ],
                            "queryByte": 1,
                            "queryShort": 2,
                            "queryInteger": 3,
                            "queryIntegerList": [
                                1,
                                2,
                                3
                            ],
                            "queryIntegerSet": [
                                1,
                                2,
                                3
                            ],
                            "queryLong": 4,
                            "queryFloat": 1.1,
                            "queryDouble": 1.1,
                            "queryDoubleList": [
                                1.1,
                                2.1,
                                3.1
                            ],
                            "queryBoolean": true,
                            "queryBooleanList": [
                                true,
                                false,
                                true
                            ],
                            "queryTimestamp": 1,
                            "queryTimestampList": [
                                1,
                                2,
                                3
                            ],
                            "queryEnum": "Foo",
                            "queryEnumList": [
                                "Foo",
                                "Baz",
                                "Bar"
                            ],
                            "queryIntegerEnum": 1,
                            "queryIntegerEnumList": [
                                1,
                                2
                            ]
                        }
                    },
                    {
                        "id": "RestXmlQueryStringMap",
                        "documentation": "Handles query string maps",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "QueryParamsStringKeyA=Foo",
                            "QueryParamsStringKeyB=Bar"
                        ],
                        "params": {
                            "queryParamsMapOfStrings": {
                                "QueryParamsStringKeyA": "Foo",
                                "QueryParamsStringKeyB": "Bar"
                            }
                        }
                    },
                    {
                        "id": "RestXmlQueryStringEscaping",
                        "documentation": "Handles escaping all required characters in the query string.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "String=%20%25%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%F0%9F%98%B9"
                        ],
                        "params": {
                            "queryString": " %:/?#[]@!$&'()*+,;=😹"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNaNFloatQueryValues",
                        "documentation": "Supports handling NaN float query values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=NaN",
                            "Double=NaN"
                        ],
                        "params": {
                            "queryFloat": "NaN",
                            "queryDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestXmlSupportsInfinityFloatQueryValues",
                        "documentation": "Supports handling Infinity float query values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=Infinity",
                            "Double=Infinity"
                        ],
                        "params": {
                            "queryFloat": "Infinity",
                            "queryDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNegativeInfinityFloatQueryValues",
                        "documentation": "Supports handling -Infinity float query values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=-Infinity",
                            "Double=-Infinity"
                        ],
                        "params": {
                            "queryFloat": "-Infinity",
                            "queryDouble": "-Infinity"
                        }
                    },
                    {
                        "id": "RestXmlZeroAndFalseQueryValues",
                        "documentation": "Query values of 0 and false are serialized",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Integer=0",
                            "Boolean=false"
                        ],
                        "params": {
                            "queryInteger": 0,
                            "queryBoolean": false
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#AllQueryStringTypesInput": {
            "type": "structure",
            "members": {
                "queryString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "String"
                    }
                },
                "queryStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpQuery": "StringList"
                    }
                },
                "queryStringSet": {
                    "target": "aws.protocoltests.shared#StringSet",
                    "traits": {
                        "smithy.api#httpQuery": "StringSet"
                    }
                },
                "queryByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpQuery": "Byte"
                    }
                },
                "queryShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpQuery": "Short"
                    }
                },
                "queryInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpQuery": "Integer"
                    }
                },
                "queryIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerList"
                    }
                },
                "queryIntegerSet": {
                    "target": "aws.protocoltests.shared#IntegerSet",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerSet"
                    }
                },
                "queryLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpQuery": "Long"
                    }
                },
                "queryFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpQuery": "Float"
                    }
                },
                "queryDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpQuery": "Double"
                    }
                },
                "queryDoubleList": {
                    "target": "aws.protocoltests.shared#DoubleList",
                    "traits": {
                        "smithy.api#httpQuery": "DoubleList"
                    }
                },
                "queryBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpQuery": "Boolean"
                    }
                },
                "queryBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpQuery": "BooleanList"
                    }
                },
                "queryTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "Timestamp"
                    }
                },
                "queryTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpQuery": "TimestampList"
                    }
                },
                "queryEnum": {
                    "target": "aws.protocoltests.shared#FooEnum",
                    "traits": {
                        "smithy.api#httpQuery": "Enum"
                    }
                },
                "queryEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "EnumList"
                    }
                },
                "queryIntegerEnum": {
                    "target": "aws.protocoltests.shared#IntegerEnum",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerEnum"
                    }
                },
                "queryIntegerEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerEnumList"
                    }
                },
                "queryParamsMapOfStrings": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restxml#BodyWithXmlName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#BodyWithXmlNameInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#BodyWithXmlNameInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The following example serializes a body that uses an XML name,\nchanging the wrapper name.",
                "smithy.api#http": {
                    "uri": "/BodyWithXmlName",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "BodyWithXmlName",
                        "documentation": "Serializes a payload using a wrapper name based on the xmlName",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/BodyWithXmlName",
                        "body": "<Ahoy><nested><name>Phreddy</name></nested></Ahoy>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "BodyWithXmlName",
                        "documentation": "Serializes a payload using a wrapper name based on the xmlName",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<Ahoy><nested><name>Phreddy</name></nested></Ahoy>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#BodyWithXmlNameInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#PayloadWithXmlName"
                }
            },
            "traits": {
                "smithy.api#xmlName": "Ahoy"
            }
        },
        "aws.protocoltests.restxml#ComplexError": {
            "type": "structure",
            "members": {
                "Header": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Header"
                    }
                },
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.restxml#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.api#httpError": 403,
                "smithy.test#httpResponseTests": [
                    {
                        "id": "ComplexError",
                        "protocol": "aws.protocols#restXml",
                        "params": {
                            "Header": "Header",
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Header": "Header"
                        },
                        "body": "<ErrorResponse>\n   <Error>\n      <Type>Sender</Type>\n      <Code>ComplexError</Code>\n      <Message>Hi</Message>\n      <TopLevel>Top level</TopLevel>\n      <Nested>\n          <Foo>bar</Foo>\n      </Nested>\n   </Error>\n   <RequestId>foo-id</RequestId>\n</ErrorResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restxml#ConstantAndVariableQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#ConstantAndVariableQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses fixed query string params and variable query string params.\nThe fixed query string parameters and variable parameters must both be\nserialized (implementations may need to merge them together).",
                "smithy.api#http": {
                    "uri": "/ConstantAndVariableQueryString?foo=bar",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "ConstantAndVariableQueryStringMissingOneValue",
                        "documentation": "Mixes constant and variable query string parameters",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/ConstantAndVariableQueryString",
                        "queryParams": [
                            "foo=bar",
                            "baz=bam"
                        ],
                        "forbidQueryParams": [
                            "maybeSet"
                        ],
                        "body": "",
                        "params": {
                            "baz": "bam"
                        }
                    },
                    {
                        "id": "ConstantAndVariableQueryStringAllValues",
                        "documentation": "Mixes constant and variable query string parameters",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/ConstantAndVariableQueryString",
                        "queryParams": [
                            "foo=bar",
                            "baz=bam",
                            "maybeSet=yes"
                        ],
                        "body": "",
                        "params": {
                            "baz": "bam",
                            "maybeSet": "yes"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#ConstantAndVariableQueryStringInput": {
            "type": "structure",
            "members": {
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "baz"
                    }
                },
                "maybeSet": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "maybeSet"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#ConstantQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#ConstantQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses a constant query string parameters and a label.\nThis simply tests that labels and query string parameters are\ncompatible. The fixed query string parameter named \"hello\" should\nin no way conflict with the label, `{hello}`.",
                "smithy.api#http": {
                    "uri": "/ConstantQueryString/{hello}?foo=bar&hello",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "ConstantQueryString",
                        "documentation": "Includes constant query string parameters",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/ConstantQueryString/hi",
                        "queryParams": [
                            "foo=bar",
                            "hello"
                        ],
                        "body": "",
                        "params": {
                            "hello": "hi"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#ConstantQueryStringInput": {
            "type": "structure",
            "members": {
                "hello": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#DatetimeOffsets": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#DatetimeOffsetsOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/DatetimeOffsets",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlDateTimeWithNegativeOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<DatetimeOffsetsOutput>\n    <datetime>2019-12-16T22:48:18-01:00</datetime>\n</DatetimeOffsetsOutput>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "datetime": 1576540098
                        }
                    },
                    {
                        "id": "RestXmlDateTimeWithPositiveOffset",
                        "documentation": "Ensures that clients can correctly parse datetime (timestamps) with offsets",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<DatetimeOffsetsOutput>\n    <datetime>2019-12-17T00:48:18+01:00</datetime>\n</DatetimeOffsetsOutput>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "datetime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#DatetimeOffsetsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.restxml#EmptyInputAndEmptyOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#EmptyInputAndEmptyOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#EmptyInputAndEmptyOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has an empty input\nand empty output structure that reuses the same shape. While this should\nbe rare, code generators must support this.",
                "smithy.api#http": {
                    "uri": "/EmptyInputAndEmptyOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "EmptyInputAndEmptyOutput",
                        "documentation": "Empty input serializes no payload",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/EmptyInputAndEmptyOutput",
                        "body": ""
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "EmptyInputAndEmptyOutput",
                        "documentation": "Empty output serializes no payload",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#EmptyInputAndEmptyOutputInput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.restxml#EmptyInputAndEmptyOutputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.restxml#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.api#http": {
                    "uri": "/EndpointOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlEndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/EndpointOperation",
                        "body": "",
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#EndpointWithHostLabelHeaderOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HostLabelHeaderInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "{accountId}."
                },
                "smithy.api#http": {
                    "uri": "/EndpointWithHostLabelHeaderOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlEndpointTraitWithHostLabelAndHttpBinding",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input. The label must also\nbe serialized in into any other location it is bound to, such\nas the body or in this case an http header.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/EndpointWithHostLabelHeaderOperation",
                        "body": "",
                        "bodyMediaType": "application/xml",
                        "host": "example.com",
                        "resolvedHost": "bar.example.com",
                        "headers": {
                            "X-Amz-Account-Id": "bar"
                        },
                        "params": {
                            "accountId": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#EndpointWithHostLabelOperationRequest"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.api#http": {
                    "uri": "/EndpointWithHostLabelOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlEndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/EndpointWithHostLabelOperation",
                        "body": "<EndpointWithHostLabelOperationRequest>\n    <label>bar</label>\n</EndpointWithHostLabelOperationRequest>\n",
                        "bodyMediaType": "application/xml",
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#EndpointWithHostLabelOperationRequest": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#EnumPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.restxml#StringEnum",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMap": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#FlattenedXmlMapRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#FlattenedXmlMapResponse"
            },
            "traits": {
                "smithy.api#documentation": "Flattened maps",
                "smithy.api#http": {
                    "uri": "/FlattenedXmlMap",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "FlattenedXmlMap",
                        "documentation": "Serializes flattened XML maps in requests",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/FlattenedXmlMap",
                        "body": "<FlattenedXmlMapRequest>\n    <myMap>\n        <key>foo</key>\n        <value>Foo</value>\n    </myMap>\n    <myMap>\n        <key>baz</key>\n        <value>Baz</value>\n    </myMap>\n</FlattenedXmlMapRequest>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": "Foo",
                                "baz": "Baz"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "FlattenedXmlMap",
                        "documentation": "Serializes flattened XML maps in responses",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<FlattenedXmlMapResponse>\n    <myMap>\n        <key>foo</key>\n        <value>Foo</value>\n    </myMap>\n    <myMap>\n        <key>baz</key>\n        <value>Baz</value>\n    </myMap>\n</FlattenedXmlMapResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": "Foo",
                                "baz": "Baz"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapRequest": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapResponse": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameResponse"
            },
            "traits": {
                "smithy.api#documentation": "Flattened maps with @xmlName",
                "smithy.api#http": {
                    "uri": "/FlattenedXmlMapWithXmlName",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "FlattenedXmlMapWithXmlName",
                        "documentation": "Serializes flattened XML maps in requests that have xmlName on members",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/FlattenedXmlMapWithXmlName",
                        "body": "<FlattenedXmlMapWithXmlNameRequest>\n    <KVP>\n        <K>a</K>\n        <V>A</V>\n    </KVP>\n    <KVP>\n        <K>b</K>\n        <V>B</V>\n    </KVP>\n</FlattenedXmlMapWithXmlNameRequest>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "FlattenedXmlMapWithXmlName",
                        "documentation": "Serializes flattened XML maps in responses that have xmlName on members",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<FlattenedXmlMapWithXmlNameResponse>\n    <KVP>\n        <K>a</K>\n        <V>A</V>\n    </KVP>\n    <KVP>\n        <K>b</K>\n        <V>B</V>\n    </KVP>\n</FlattenedXmlMapWithXmlNameResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameInputOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "K"
                }
            },
            "value": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "V"
                }
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameRequest": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameInputOutputMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "KVP"
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameResponse": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNameInputOutputMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "KVP"
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNamespace": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNamespaceOutput"
            },
            "traits": {
                "smithy.api#documentation": "Flattened maps with @xmlNamespace and @xmlName",
                "smithy.api#http": {
                    "uri": "/FlattenedXmlMapWithXmlNamespace",
                    "method": "POST"
                },
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlFlattenedXmlMapWithXmlNamespace",
                        "documentation": "Serializes flattened XML maps in responses that have xmlNamespace and xmlName on members",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<FlattenedXmlMapWithXmlNamespaceOutput>\n    <KVP xmlns=\"https://the-member.example.com\">\n        <K xmlns=\"https://the-key.example.com\">a</K>\n        <V xmlns=\"https://the-value.example.com\">A</V>\n    </KVP>\n    <KVP xmlns=\"https://the-member.example.com\">\n        <K xmlns=\"https://the-key.example.com\">b</K>\n        <V xmlns=\"https://the-value.example.com\">B</V>\n    </KVP>\n</FlattenedXmlMapWithXmlNamespaceOutput>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNamespaceOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNamespaceOutputMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "KVP",
                        "smithy.api#xmlNamespace": {
                            "uri": "https://the-member.example.com"
                        }
                    }
                }
            }
        },
        "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNamespaceOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "K",
                    "smithy.api#xmlNamespace": {
                        "uri": "https://the-key.example.com"
                    }
                }
            },
            "value": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "V",
                    "smithy.api#xmlNamespace": {
                        "uri": "https://the-value.example.com"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#FooPrefixHeaders": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restxml#FractionalSeconds": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#FractionalSecondsOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/FractionalSeconds",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlDateTimeWithFractionalSeconds",
                        "documentation": "Ensures that clients can correctly parse datetime timestamps with fractional seconds",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<FractionalSecondsOutput>\n    <datetime>2000-01-02T20:34:56.123Z</datetime>\n</FractionalSecondsOutput>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "datetime": 9.46845296123E8
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#FractionalSecondsOutput": {
            "type": "structure",
            "members": {
                "datetime": {
                    "target": "aws.protocoltests.shared#DateTime"
                }
            }
        },
        "aws.protocoltests.restxml#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.restxml#ComplexError"
                },
                {
                    "target": "aws.protocoltests.restxml#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has three possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A BadRequest error.\n\nImplementations must be able to successfully take a response and\nproperly (de)serialize successful and error responses based on the\nthe presence of the",
                "smithy.api#http": {
                    "uri": "/GreetingWithErrors",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "GreetingWithErrors",
                        "documentation": "Ensures that operations with errors successfully know how to deserialize the successful response",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "X-Greeting": "Hello"
                        },
                        "params": {
                            "greeting": "Hello"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Greeting"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HostLabelHeaderInput": {
            "type": "structure",
            "members": {
                "accountId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#httpHeader": "X-Amz-Account-Id",
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpEnumPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#EnumPayloadInput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#EnumPayloadInput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/EnumPayload",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlEnumPayloadRequest",
                        "uri": "/EnumPayload",
                        "body": "enumvalue",
                        "params": {
                            "payload": "enumvalue"
                        },
                        "method": "POST",
                        "protocol": "aws.protocols#restXml"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlEnumPayloadResponse",
                        "body": "enumvalue",
                        "params": {
                            "payload": "enumvalue"
                        },
                        "protocol": "aws.protocols#restXml",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadTraits": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadTraitsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadTraitsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a blob shape in the payload.\n\nIn this example, no XML document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadTraits",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "blobby blob blob",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "HttpPayloadTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "blobby blob blob",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "HttpPayloadTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadTraitsInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadTraitsWithMediaType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadTraitsWithMediaTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadTraitsWithMediaTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example uses a `@mediaType` trait on the payload to force a custom\ncontent-type to be serialized.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadTraitsWithMediaType",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/HttpPayloadTraitsWithMediaType",
                        "body": "blobby blob blob",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "blobby blob blob",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadTraitsWithMediaTypeInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.shared#TextPlainBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithMemberXmlName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithMemberXmlNameInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithMemberXmlNameInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The following example serializes a payload that uses an XML name\non the member, changing the wrapper name.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithMemberXmlName",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadWithMemberXmlName",
                        "documentation": "Serializes a structure in the payload using a wrapper name based on member xmlName",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithMemberXmlName",
                        "body": "<Hola><name>Phreddy</name></Hola>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadWithMemberXmlName",
                        "documentation": "Serializes a structure in the payload using a wrapper name based on member xmlName",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<Hola><name>Phreddy</name></Hola>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithMemberXmlNameInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#PayloadWithXmlName",
                    "traits": {
                        "smithy.api#httpPayload": {},
                        "smithy.api#xmlName": "Hola"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a structure in the payload.\n\nNote that serializing a structure changes the wrapper element name\nto match the targeted structure.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithStructure",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadWithStructure",
                        "documentation": "Serializes a structure in the payload",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithStructure",
                        "body": "<NestedPayload>\n    <greeting>hello</greeting>\n    <name>Phreddy</name>\n</NestedPayload>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "greeting": "hello",
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadWithStructure",
                        "documentation": "Serializes a structure in the payload",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<NestedPayload>\n    <greeting>hello</greeting>\n    <name>Phreddy</name>\n</NestedPayload>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "greeting": "hello",
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithStructureInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#NestedPayload",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithUnion": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithUnionInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithUnionInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a union in the payload.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithUnion",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlHttpPayloadWithUnion",
                        "documentation": "Serializes a union in the payload.",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithUnion",
                        "body": "<UnionPayload>\n    <greeting>hello</greeting>\n</UnionPayload>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "greeting": "hello"
                            }
                        }
                    },
                    {
                        "id": "RestXmlHttpPayloadWithUnsetUnion",
                        "documentation": "No payload is sent if the union has no value.",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithUnion",
                        "body": "",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {}
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlHttpPayloadWithUnion",
                        "documentation": "Serializes a union in the payload.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<UnionPayload>\n    <greeting>hello</greeting>\n</UnionPayload>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "greeting": "hello"
                            }
                        }
                    },
                    {
                        "id": "RestXmlHttpPayloadWithUnsetUnion",
                        "documentation": "No payload is sent if the union has no value.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "Content-Length": "0"
                        },
                        "params": {}
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithUnionInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#UnionPayload",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithXmlName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNameInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNameInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The following example serializes a payload that uses an XML name,\nchanging the wrapper name.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithXmlName",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadWithXmlName",
                        "documentation": "Serializes a structure in the payload using a wrapper name based on xmlName",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithXmlName",
                        "body": "<Hello><name>Phreddy</name></Hello>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadWithXmlName",
                        "documentation": "Serializes a structure in the payload using a wrapper name based on xmlName",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<Hello><name>Phreddy</name></Hello>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithXmlNameInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#PayloadWithXmlName",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithXmlNamespace": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The following example serializes a payload that uses an XML namespace.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithXmlNamespace",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadWithXmlNamespace",
                        "documentation": "Serializes a structure in the payload using a wrapper with an XML namespace",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithXmlNamespace",
                        "body": "<PayloadWithXmlNamespace xmlns=\"http://foo.com\">\n    <name>Phreddy</name>\n</PayloadWithXmlNamespace>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadWithXmlNamespace",
                        "documentation": "Serializes a structure in the payload using a wrapper with an XML namespace",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<PayloadWithXmlNamespace xmlns=\"http://foo.com\">\n    <name>Phreddy</name>\n</PayloadWithXmlNamespace>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceAndPrefix": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceAndPrefixInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceAndPrefixInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The following example serializes a payload that uses an XML namespace.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithXmlNamespaceAndPrefix",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPayloadWithXmlNamespaceAndPrefix",
                        "documentation": "Serializes a structure in the payload using a wrapper with an XML namespace",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithXmlNamespaceAndPrefix",
                        "body": "<PayloadWithXmlNamespaceAndPrefix xmlns:baz=\"http://foo.com\">\n    <name>Phreddy</name>\n</PayloadWithXmlNamespaceAndPrefix>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPayloadWithXmlNamespaceAndPrefix",
                        "documentation": "Serializes a structure in the payload using a wrapper with an XML namespace",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<PayloadWithXmlNamespaceAndPrefix xmlns:baz=\"http://foo.com\">\n    <name>Phreddy</name>\n</PayloadWithXmlNamespaceAndPrefix>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceAndPrefixInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#PayloadWithXmlNamespaceAndPrefix",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#PayloadWithXmlNamespace",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpPrefixHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpPrefixHeadersInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpPrefixHeadersInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples adds headers to the input of a request and response by prefix.",
                "smithy.api#externalDocumentation": {
                    "httpPrefixHeaders Trait": "https://smithy.io/2.0/spec/http-bindings.html#httpprefixheaders-trait"
                },
                "smithy.api#http": {
                    "uri": "/HttpPrefixHeaders",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpPrefixHeadersArePresent",
                        "documentation": "Adds headers by prefix",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/HttpPrefixHeaders",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo",
                            "X-Foo-Abc": "Abc value",
                            "X-Foo-Def": "Def value"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {
                                "Abc": "Abc value",
                                "Def": "Def value"
                            }
                        }
                    },
                    {
                        "id": "HttpPrefixHeadersAreNotPresent",
                        "documentation": "No prefix headers are serialized because the value is empty",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/HttpPrefixHeaders",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {}
                        },
                        "appliesTo": "client"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPrefixHeadersArePresent",
                        "documentation": "Adds headers by prefix",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo",
                            "X-Foo-Abc": "Abc value",
                            "X-Foo-Def": "Def value"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {
                                "Abc": "Abc value",
                                "Def": "Def value"
                            }
                        }
                    },
                    {
                        "id": "HttpPrefixHeadersAreNotPresent",
                        "documentation": "No prefix headers are serialized because the value is empty",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {}
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpPrefixHeadersInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "fooMap": {
                    "target": "aws.protocoltests.restxml#FooPrefixHeaders",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": "X-Foo-"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithFloatLabels": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpRequestWithFloatLabelsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/FloatHttpLabels/{float}/{double}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlSupportsNaNFloatLabels",
                        "documentation": "Supports handling NaN float label values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/NaN/NaN",
                        "body": "",
                        "params": {
                            "float": "NaN",
                            "double": "NaN"
                        }
                    },
                    {
                        "id": "RestXmlSupportsInfinityFloatLabels",
                        "documentation": "Supports handling Infinity float label values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/Infinity/Infinity",
                        "body": "",
                        "params": {
                            "float": "Infinity",
                            "double": "Infinity"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNegativeInfinityFloatLabels",
                        "documentation": "Supports handling -Infinity float label values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/-Infinity/-Infinity",
                        "body": "",
                        "params": {
                            "float": "-Infinity",
                            "double": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithFloatLabelsInput": {
            "type": "structure",
            "members": {
                "float": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "double": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithGreedyLabelInPath": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpRequestWithGreedyLabelInPathInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithGreedyLabelInPath/foo/{foo}/baz/{baz+}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpRequestWithGreedyLabelInPath",
                        "documentation": "Serializes greedy labels and normal labels",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/HttpRequestWithGreedyLabelInPath/foo/hello/baz/there/guy",
                        "body": "",
                        "params": {
                            "foo": "hello",
                            "baz": "there/guy"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithGreedyLabelInPathInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithLabels": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpRequestWithLabelsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests are serialized when there's no input\npayload but there are HTTP labels.",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithLabels/{string}/{short}/{integer}/{long}/{float}/{double}/{boolean}/{timestamp}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "InputWithHeadersAndAllParams",
                        "documentation": "Sends a GET request that uses URI label bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabels/string/1/2/3/4.1/5.1/true/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "string": "string",
                            "short": 1,
                            "integer": 2,
                            "long": 3,
                            "float": 4.1,
                            "double": 5.1,
                            "boolean": true,
                            "timestamp": 1576540098
                        }
                    },
                    {
                        "id": "HttpRequestLabelEscaping",
                        "documentation": "Sends a GET request that uses URI label bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabels/%20%25%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%F0%9F%98%B9/1/2/3/4.1/5.1/true/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "string": " %:/?#[]@!$&'()*+,;=😹",
                            "short": 1,
                            "integer": 2,
                            "long": 3,
                            "float": 4.1,
                            "double": 5.1,
                            "boolean": true,
                            "timestamp": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithLabelsAndTimestampFormat": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#HttpRequestWithLabelsAndTimestampFormatInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests serialize different timestamp formats in the\nURI path.",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithLabelsAndTimestampFormat/{memberEpochSeconds}/{memberHttpDate}/{memberDateTime}/{defaultFormat}/{targetEpochSeconds}/{targetHttpDate}/{targetDateTime}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "HttpRequestWithLabelsAndTimestampFormat",
                        "documentation": "Serializes different timestamp formats in URI labels",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabelsAndTimestampFormat/1576540098/Mon%2C%2016%20Dec%202019%2023%3A48%3A18%20GMT/2019-12-16T23%3A48%3A18Z/2019-12-16T23%3A48%3A18Z/1576540098/Mon%2C%2016%20Dec%202019%2023%3A48%3A18%20GMT/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithLabelsAndTimestampFormatInput": {
            "type": "structure",
            "members": {
                "memberEpochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "memberHttpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "memberDateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "defaultFormat": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetEpochSeconds": {
                    "target": "aws.protocoltests.shared#EpochSeconds",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetHttpDate": {
                    "target": "aws.protocoltests.shared#HttpDate",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetDateTime": {
                    "target": "aws.protocoltests.shared#DateTime",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpRequestWithLabelsInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "short": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "integer": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "long": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "float": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "double": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "boolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Serialized in the path as true or false.",
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#documentation": "Note that this member has no format, so it's serialized as an RFC 3399 date-time.",
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpResponseCode": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#HttpResponseCodeOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/HttpResponseCode",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlHttpResponseCode",
                        "documentation": "Binds the http response code to an output structure.",
                        "protocol": "aws.protocols#restXml",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "body": "",
                        "bodyMediaType": "application/xml",
                        "params": {
                            "Status": 201
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#HttpResponseCodeOutput": {
            "type": "structure",
            "members": {
                "Status": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpResponseCode": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#HttpStringPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#StringPayloadInput"
            },
            "output": {
                "target": "aws.protocoltests.restxml#StringPayloadInput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/StringPayload",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlStringPayloadRequest",
                        "uri": "/StringPayload",
                        "body": "rawstring",
                        "params": {
                            "payload": "rawstring"
                        },
                        "method": "POST",
                        "protocol": "aws.protocols#restXml"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlStringPayloadResponse",
                        "body": "rawstring",
                        "params": {
                            "payload": "rawstring"
                        },
                        "protocol": "aws.protocols#restXml",
                        "code": 200
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#IgnoreQueryParamsInResponse": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#IgnoreQueryParamsInResponseOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example ensures that query string bound request parameters are\nserialized in the body of responses if the structure is used in both\nthe request and response.",
                "smithy.api#http": {
                    "uri": "/IgnoreQueryParamsInResponse",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "IgnoreQueryParamsInResponse",
                        "documentation": "Query parameters must be ignored when serializing the output of an operation",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "body": "<IgnoreQueryParamsInResponseOutput><baz>bam</baz></IgnoreQueryParamsInResponseOutput>",
                        "bodyMediaType": "application/xml",
                        "params": {
                            "baz": "bam"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#IgnoreQueryParamsInResponseOutput": {
            "type": "structure",
            "members": {
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "baz",
                        "smithy.api#suppress": [
                            "HttpBindingTraitIgnored"
                        ]
                    }
                }
            }
        },
        "aws.protocoltests.restxml#InputAndOutputWithHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#InputAndOutputWithHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restxml#InputAndOutputWithHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there is\nno input or output payload but there are HTTP header bindings.",
                "smithy.api#http": {
                    "uri": "/InputAndOutputWithHeaders",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "InputAndOutputWithStringHeaders",
                        "documentation": "Tests requests with string header bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-String": "Hello",
                            "X-StringList": "a, b, c",
                            "X-StringSet": "a, b, c"
                        },
                        "body": "",
                        "params": {
                            "headerString": "Hello",
                            "headerStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "headerStringSet": [
                                "a",
                                "b",
                                "c"
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithNumericHeaders",
                        "documentation": "Tests requests with numeric header bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Byte": "1",
                            "X-Short": "123",
                            "X-Integer": "123",
                            "X-Long": "123",
                            "X-Float": "1.1",
                            "X-Double": "1.1",
                            "X-IntegerList": "1, 2, 3"
                        },
                        "body": "",
                        "params": {
                            "headerByte": 1,
                            "headerShort": 123,
                            "headerInteger": 123,
                            "headerLong": 123,
                            "headerFloat": 1.1,
                            "headerDouble": 1.1,
                            "headerIntegerList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithBooleanHeaders",
                        "documentation": "Tests requests with boolean header bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Boolean1": "true",
                            "X-Boolean2": "false",
                            "X-BooleanList": "true, false, true"
                        },
                        "body": "",
                        "params": {
                            "headerTrueBool": true,
                            "headerFalseBool": false,
                            "headerBooleanList": [
                                true,
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithTimestampHeaders",
                        "documentation": "Tests requests with timestamp header bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
                        },
                        "body": "",
                        "params": {
                            "headerTimestampList": [
                                1576540098,
                                1576540098
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithEnumHeaders",
                        "documentation": "Tests requests with enum header bindings",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Enum": "Foo",
                            "X-EnumList": "Foo, Bar, Baz"
                        },
                        "body": "",
                        "params": {
                            "headerEnum": "Foo",
                            "headerEnumList": [
                                "Foo",
                                "Bar",
                                "Baz"
                            ]
                        }
                    },
                    {
                        "id": "RestXmlSupportsNaNFloatHeaderInputs",
                        "documentation": "Supports handling NaN float header values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "NaN",
                            "X-Double": "NaN"
                        },
                        "params": {
                            "headerFloat": "NaN",
                            "headerDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestXmlSupportsInfinityFloatHeaderInputs",
                        "documentation": "Supports handling Infinity float header values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "Infinity",
                            "X-Double": "Infinity"
                        },
                        "params": {
                            "headerFloat": "Infinity",
                            "headerDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNegativeInfinityFloatHeaderInputs",
                        "documentation": "Supports handling -Infinity float header values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "-Infinity",
                            "X-Double": "-Infinity"
                        },
                        "params": {
                            "headerFloat": "-Infinity",
                            "headerDouble": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "InputAndOutputWithStringHeaders",
                        "documentation": "Tests responses with string header bindings",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-String": "Hello",
                            "X-StringList": "a, b, c",
                            "X-StringSet": "a, b, c"
                        },
                        "body": "",
                        "params": {
                            "headerString": "Hello",
                            "headerStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "headerStringSet": [
                                "a",
                                "b",
                                "c"
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithNumericHeaders",
                        "documentation": "Tests responses with numeric header bindings",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-Byte": "1",
                            "X-Short": "123",
                            "X-Integer": "123",
                            "X-Long": "123",
                            "X-Float": "1.1",
                            "X-Double": "1.1",
                            "X-IntegerList": "1, 2, 3"
                        },
                        "body": "",
                        "params": {
                            "headerByte": 1,
                            "headerShort": 123,
                            "headerInteger": 123,
                            "headerLong": 123,
                            "headerFloat": 1.1,
                            "headerDouble": 1.1,
                            "headerIntegerList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithBooleanHeaders",
                        "documentation": "Tests responses with boolean header bindings",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-Boolean1": "true",
                            "X-Boolean2": "false",
                            "X-BooleanList": "true, false, true"
                        },
                        "body": "",
                        "params": {
                            "headerTrueBool": true,
                            "headerFalseBool": false,
                            "headerBooleanList": [
                                true,
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithTimestampHeaders",
                        "documentation": "Tests responses with timestamp header bindings",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
                        },
                        "body": "",
                        "params": {
                            "headerTimestampList": [
                                1576540098,
                                1576540098
                            ]
                        }
                    },
                    {
                        "id": "InputAndOutputWithEnumHeaders",
                        "documentation": "Tests responses with enum header bindings",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-Enum": "Foo",
                            "X-EnumList": "Foo, Bar, Baz"
                        },
                        "body": "",
                        "params": {
                            "headerEnum": "Foo",
                            "headerEnumList": [
                                "Foo",
                                "Bar",
                                "Baz"
                            ]
                        }
                    },
                    {
                        "id": "RestXmlSupportsNaNFloatHeaderOutputs",
                        "documentation": "Supports handling NaN float header values.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-Float": "NaN",
                            "X-Double": "NaN"
                        },
                        "body": "",
                        "params": {
                            "headerFloat": "NaN",
                            "headerDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestXmlSupportsInfinityFloatHeaderOutputs",
                        "documentation": "Supports handling Infinity float header values.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-Float": "Infinity",
                            "X-Double": "Infinity"
                        },
                        "body": "",
                        "params": {
                            "headerFloat": "Infinity",
                            "headerDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNegativeInfinityFloatHeaderOutputs",
                        "documentation": "Supports handling -Infinity float header values.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-Float": "-Infinity",
                            "X-Double": "-Infinity"
                        },
                        "body": "",
                        "params": {
                            "headerFloat": "-Infinity",
                            "headerDouble": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#InputAndOutputWithHeadersIO": {
            "type": "structure",
            "members": {
                "headerString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-String"
                    }
                },
                "headerByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpHeader": "X-Byte"
                    }
                },
                "headerShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpHeader": "X-Short"
                    }
                },
                "headerInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpHeader": "X-Integer"
                    }
                },
                "headerLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpHeader": "X-Long"
                    }
                },
                "headerFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpHeader": "X-Float"
                    }
                },
                "headerDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpHeader": "X-Double"
                    }
                },
                "headerTrueBool": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "X-Boolean1"
                    }
                },
                "headerFalseBool": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "X-Boolean2"
                    }
                },
                "headerStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpHeader": "X-StringList"
                    }
                },
                "headerStringSet": {
                    "target": "aws.protocoltests.shared#StringSet",
                    "traits": {
                        "smithy.api#httpHeader": "X-StringSet"
                    }
                },
                "headerIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpHeader": "X-IntegerList"
                    }
                },
                "headerBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpHeader": "X-BooleanList"
                    }
                },
                "headerTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpHeader": "X-TimestampList"
                    }
                },
                "headerEnum": {
                    "target": "aws.protocoltests.shared#FooEnum",
                    "traits": {
                        "smithy.api#httpHeader": "X-Enum"
                    }
                },
                "headerEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpHeader": "X-EnumList"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.api#httpError": 400,
                "smithy.test#httpResponseTests": [
                    {
                        "id": "InvalidGreetingError",
                        "documentation": "Parses simple XML errors",
                        "protocol": "aws.protocols#restXml",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "body": "<ErrorResponse>\n   <Error>\n      <Type>Sender</Type>\n      <Code>InvalidGreeting</Code>\n      <Message>Hi</Message>\n      <AnotherSetting>setting</AnotherSetting>\n   </Error>\n   <RequestId>foo-id</RequestId>\n</ErrorResponse>\n",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#ListWithMemberNamespace": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlNamespace": {
                        "uri": "https://xml-member.example.com"
                    }
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "https://xml-list.example.com"
                }
            }
        },
        "aws.protocoltests.restxml#ListWithNamespace": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "https://xml-list.example.com"
                }
            }
        },
        "aws.protocoltests.restxml#NestedMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#FooEnumMap"
            }
        },
        "aws.protocoltests.restxml#NestedPayload": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                },
                "name": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restxml#NestedXmlMaps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#NestedXmlMapsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#NestedXmlMapsResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/NestedXmlMaps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "NestedXmlMapRequest",
                        "documentation": "Tests requests with nested maps.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/NestedXmlMaps",
                        "body": "<NestedXmlMapsRequest>\n    <nestedMap>\n        <entry>\n            <key>foo</key>\n            <value>\n                <entry>\n                    <key>bar</key>\n                    <value>Bar</value>\n                </entry>\n            </value>\n        </entry>\n    </nestedMap>\n</NestedXmlMapsRequest>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nestedMap": {
                                "foo": {
                                    "bar": "Bar"
                                }
                            }
                        }
                    },
                    {
                        "id": "FlatNestedXmlMapRequest",
                        "documentation": "Tests requests with nested flat maps. Since maps can only be\nflattened when they're structure members, only the outer map is flat.",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/NestedXmlMaps",
                        "body": "<NestedXmlMapsRequest>\n    <flatNestedMap>\n        <key>foo</key>\n        <value>\n            <entry>\n                <key>bar</key>\n                <value>Bar</value>\n            </entry>\n        </value>\n    </flatNestedMap>\n</NestedXmlMapsRequest>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "flatNestedMap": {
                                "foo": {
                                    "bar": "Bar"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "NestedXmlMapResponse",
                        "documentation": "Tests responses with nested maps.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<NestedXmlMapsResponse>\n    <nestedMap>\n        <entry>\n            <key>foo</key>\n            <value>\n                <entry>\n                    <key>bar</key>\n                    <value>Bar</value>\n                </entry>\n            </value>\n        </entry>\n    </nestedMap>\n</NestedXmlMapsResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nestedMap": {
                                "foo": {
                                    "bar": "Bar"
                                }
                            }
                        }
                    },
                    {
                        "id": "FlatNestedXmlMapResponse",
                        "documentation": "Tests responses with nested flat maps. Since maps can only be\nflattened when they're structure members, only the outer map is flat.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<NestedXmlMapsResponse>\n    <flatNestedMap>\n        <key>foo</key>\n        <value>\n            <entry>\n                <key>bar</key>\n                <value>Bar</value>\n            </entry>\n        </value>\n    </flatNestedMap>\n</NestedXmlMapsResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "flatNestedMap": {
                                "foo": {
                                    "bar": "Bar"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#NestedXmlMapsInputOutput": {
            "type": "structure",
            "members": {
                "nestedMap": {
                    "target": "aws.protocoltests.restxml#NestedMap"
                },
                "flatNestedMap": {
                    "target": "aws.protocoltests.restxml#NestedMap",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#NestedXmlMapsRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#NestedXmlMapsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#NestedXmlMapsResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#NestedXmlMapsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#NoInputAndNoOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input or output.\nWhile this should be rare, code generators must support this.",
                "smithy.api#http": {
                    "uri": "/NoInputAndNoOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "NoInputAndNoOutput",
                        "documentation": "No input serializes no payload",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/NoInputAndNoOutput",
                        "body": ""
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "NoInputAndNoOutput",
                        "documentation": "No output serializes no payload",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#NoInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restxml#NoInputAndOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input and the\noutput is empty. While this should be rare, code generators must support\nthis.",
                "smithy.api#http": {
                    "uri": "/NoInputAndOutputOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "NoInputAndOutput",
                        "documentation": "No input serializes no payload",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/NoInputAndOutputOutput",
                        "body": ""
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "NoInputAndOutput",
                        "documentation": "Empty output serializes no payload",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#NoInputAndOutputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.restxml#NullAndEmptyHeadersClient": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#NullAndEmptyHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restxml#NullAndEmptyHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "Null and empty headers are not sent over the wire.",
                "smithy.api#http": {
                    "uri": "/NullAndEmptyHeadersClient",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "NullAndEmptyHeaders",
                        "documentation": "Do not send null values, empty strings, or empty lists over the wire in headers",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/NullAndEmptyHeadersClient",
                        "forbidHeaders": [
                            "X-A",
                            "X-B",
                            "X-C"
                        ],
                        "body": "",
                        "params": {
                            "a": null,
                            "b": "",
                            "c": []
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#NullAndEmptyHeadersIO": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-A"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-B"
                    }
                },
                "c": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpHeader": "X-C"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#NullAndEmptyHeadersServer": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#NullAndEmptyHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restxml#NullAndEmptyHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "Null and empty headers are not sent over the wire.",
                "smithy.api#http": {
                    "uri": "/NullAndEmptyHeadersServer",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.api#tags": [
                    "server-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "NullAndEmptyHeaders",
                        "documentation": "Do not send null or empty headers",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "forbidHeaders": [
                            "X-A",
                            "X-B",
                            "X-C"
                        ],
                        "body": "",
                        "params": {
                            "a": null,
                            "b": "",
                            "c": []
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#OmitsNullSerializesEmptyString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#OmitsNullSerializesEmptyStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Omits null, but serializes empty string value.",
                "smithy.api#http": {
                    "uri": "/OmitsNullSerializesEmptyString",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlOmitsNullQuery",
                        "documentation": "Omits null query values",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "params": {
                            "nullValue": null
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestXmlSerializesEmptyString",
                        "documentation": "Serializes empty query strings",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "queryParams": [
                            "Empty="
                        ],
                        "params": {
                            "emptyString": ""
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#OmitsNullSerializesEmptyStringInput": {
            "type": "structure",
            "members": {
                "nullValue": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "Null"
                    }
                },
                "emptyString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "Empty"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#PayloadWithXmlName": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#xmlName": "Hello"
            }
        },
        "aws.protocoltests.restxml#PayloadWithXmlNamespace": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com"
                }
            }
        },
        "aws.protocoltests.restxml#PayloadWithXmlNamespaceAndPrefix": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com",
                    "prefix": "baz"
                }
            }
        },
        "aws.protocoltests.restxml#PutWithContentEncoding": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#PutWithContentEncodingInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/requestcompression/putcontentwithencoding"
                },
                "smithy.api#requestCompression": {
                    "encodings": [
                        "gzip"
                    ]
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SDKAppliedContentEncoding_restXml",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header.",
                        "protocol": "aws.protocols#restXml",
                        "params": {
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/requestcompression/putcontentwithencoding",
                        "headers": {
                            "Content-Encoding": "gzip"
                        }
                    },
                    {
                        "id": "SDKAppendedGzipAfterProvidedEncoding_restXml",
                        "documentation": "Compression algorithm encoding is appended to the Content-Encoding header, and the\nuser-provided content-encoding is in the Content-Encoding header before the\nrequest compression encoding from the HTTP binding.\n",
                        "protocol": "aws.protocols#restXml",
                        "params": {
                            "encoding": "custom",
                            "data": "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\n"
                        },
                        "method": "POST",
                        "uri": "/requestcompression/putcontentwithencoding",
                        "headers": {
                            "Content-Encoding": "custom, gzip"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#PutWithContentEncodingInput": {
            "type": "structure",
            "members": {
                "encoding": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Encoding"
                    }
                },
                "data": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#QueryIdempotencyTokenAutoFill": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#QueryIdempotencyTokenAutoFillInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Automatically adds idempotency tokens.",
                "smithy.api#http": {
                    "uri": "/QueryIdempotencyTokenAutoFill",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "QueryIdempotencyTokenAutoFill",
                        "documentation": "Automatically adds idempotency token when not set",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/QueryIdempotencyTokenAutoFill",
                        "body": "",
                        "queryParams": [
                            "token=00000000-0000-4000-8000-000000000000"
                        ],
                        "appliesTo": "client"
                    },
                    {
                        "id": "QueryIdempotencyTokenAutoFillIsSet",
                        "documentation": "Uses the given idempotency token as-is",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/QueryIdempotencyTokenAutoFill",
                        "body": "",
                        "queryParams": [
                            "token=00000000-0000-4000-8000-000000000000"
                        ],
                        "params": {
                            "token": "00000000-0000-4000-8000-000000000000"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#QueryIdempotencyTokenAutoFillInput": {
            "type": "structure",
            "members": {
                "token": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "token",
                        "smithy.api#idempotencyToken": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#QueryParamsAsStringListMap": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#QueryParamsAsStringListMapInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/StringListMap",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlQueryParamsStringListMap",
                        "documentation": "Serialize query params from map of list strings",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/StringListMap",
                        "body": "",
                        "queryParams": [
                            "corge=named",
                            "baz=bar",
                            "baz=qux"
                        ],
                        "params": {
                            "qux": "named",
                            "foo": {
                                "baz": [
                                    "bar",
                                    "qux"
                                ]
                            }
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestXmlServersQueryParamsStringListMap",
                        "documentation": "Servers put all query params in map",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/StringListMap",
                        "body": "",
                        "queryParams": [
                            "corge=named",
                            "baz=bar",
                            "baz=qux"
                        ],
                        "params": {
                            "qux": "named",
                            "foo": {
                                "corge": [
                                    "named"
                                ],
                                "baz": [
                                    "bar",
                                    "qux"
                                ]
                            }
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#QueryParamsAsStringListMapInput": {
            "type": "structure",
            "members": {
                "qux": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "corge"
                    }
                },
                "foo": {
                    "target": "aws.protocoltests.shared#StringListMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restxml#QueryPrecedence": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#QueryPrecedenceInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/Precedence",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlQueryPrecedence",
                        "documentation": "Prefer named query parameters when serializing",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/Precedence",
                        "body": "",
                        "queryParams": [
                            "bar=named",
                            "qux=alsoFromMap"
                        ],
                        "params": {
                            "foo": "named",
                            "baz": {
                                "bar": "fromMap",
                                "qux": "alsoFromMap"
                            }
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestXmlServersPutAllQueryParamsInMap",
                        "documentation": "Servers put all query params in map",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/Precedence",
                        "body": "",
                        "queryParams": [
                            "bar=named",
                            "qux=fromMap"
                        ],
                        "params": {
                            "foo": "named",
                            "baz": {
                                "bar": "named",
                                "qux": "fromMap"
                            }
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#QueryPrecedenceInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "bar"
                    }
                },
                "baz": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restxml#RecursiveShapes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#RecursiveShapesRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#RecursiveShapesResponse"
            },
            "traits": {
                "smithy.api#documentation": "Recursive shapes",
                "smithy.api#http": {
                    "uri": "/RecursiveShapes",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/RecursiveShapes",
                        "body": "<RecursiveShapesRequest>\n    <nested>\n        <foo>Foo1</foo>\n        <nested>\n            <bar>Bar1</bar>\n            <recursiveMember>\n                <foo>Foo2</foo>\n                <nested>\n                    <bar>Bar2</bar>\n                </nested>\n            </recursiveMember>\n        </nested>\n    </nested>\n</RecursiveShapesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<RecursiveShapesResponse>\n    <nested>\n        <foo>Foo1</foo>\n        <nested>\n            <bar>Bar1</bar>\n            <recursiveMember>\n                <foo>Foo2</foo>\n                <nested>\n                    <bar>Bar2</bar>\n                </nested>\n            </recursiveMember>\n        </nested>\n    </nested>\n</RecursiveShapesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#RecursiveShapesInputOutputNested1": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                },
                "nested": {
                    "target": "aws.protocoltests.restxml#RecursiveShapesInputOutputNested2"
                }
            }
        },
        "aws.protocoltests.restxml#RecursiveShapesInputOutputNested2": {
            "type": "structure",
            "members": {
                "bar": {
                    "target": "smithy.api#String"
                },
                "recursiveMember": {
                    "target": "aws.protocoltests.restxml#RecursiveShapesInputOutputNested1"
                }
            }
        },
        "aws.protocoltests.restxml#RecursiveShapesRequest": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#RecursiveShapesInputOutputNested1"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#RecursiveShapesResponse": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#RecursiveShapesInputOutputNested1"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#RenamedListMembers": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.restxml#RestXml": {
            "type": "service",
            "version": "2019-12-16",
            "operations": [
                {
                    "target": "aws.protocoltests.restxml#AllQueryStringTypes"
                },
                {
                    "target": "aws.protocoltests.restxml#BodyWithXmlName"
                },
                {
                    "target": "aws.protocoltests.restxml#ConstantAndVariableQueryString"
                },
                {
                    "target": "aws.protocoltests.restxml#ConstantQueryString"
                },
                {
                    "target": "aws.protocoltests.restxml#DatetimeOffsets"
                },
                {
                    "target": "aws.protocoltests.restxml#EmptyInputAndEmptyOutput"
                },
                {
                    "target": "aws.protocoltests.restxml#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.restxml#EndpointWithHostLabelHeaderOperation"
                },
                {
                    "target": "aws.protocoltests.restxml#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.restxml#FlattenedXmlMap"
                },
                {
                    "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlName"
                },
                {
                    "target": "aws.protocoltests.restxml#FlattenedXmlMapWithXmlNamespace"
                },
                {
                    "target": "aws.protocoltests.restxml#FractionalSeconds"
                },
                {
                    "target": "aws.protocoltests.restxml#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpEnumPayload"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadTraits"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadTraitsWithMediaType"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadWithMemberXmlName"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadWithStructure"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadWithUnion"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadWithXmlName"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNamespace"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPayloadWithXmlNamespaceAndPrefix"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpPrefixHeaders"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpRequestWithFloatLabels"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpRequestWithGreedyLabelInPath"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpRequestWithLabels"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpRequestWithLabelsAndTimestampFormat"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpResponseCode"
                },
                {
                    "target": "aws.protocoltests.restxml#HttpStringPayload"
                },
                {
                    "target": "aws.protocoltests.restxml#IgnoreQueryParamsInResponse"
                },
                {
                    "target": "aws.protocoltests.restxml#InputAndOutputWithHeaders"
                },
                {
                    "target": "aws.protocoltests.restxml#NestedXmlMaps"
                },
                {
                    "target": "aws.protocoltests.restxml#NoInputAndNoOutput"
                },
                {
                    "target": "aws.protocoltests.restxml#NoInputAndOutput"
                },
                {
                    "target": "aws.protocoltests.restxml#NullAndEmptyHeadersClient"
                },
                {
                    "target": "aws.protocoltests.restxml#NullAndEmptyHeadersServer"
                },
                {
                    "target": "aws.protocoltests.restxml#OmitsNullSerializesEmptyString"
                },
                {
                    "target": "aws.protocoltests.restxml#PutWithContentEncoding"
                },
                {
                    "target": "aws.protocoltests.restxml#QueryIdempotencyTokenAutoFill"
                },
                {
                    "target": "aws.protocoltests.restxml#QueryParamsAsStringListMap"
                },
                {
                    "target": "aws.protocoltests.restxml#QueryPrecedence"
                },
                {
                    "target": "aws.protocoltests.restxml#RecursiveShapes"
                },
                {
                    "target": "aws.protocoltests.restxml#SimpleScalarProperties"
                },
                {
                    "target": "aws.protocoltests.restxml#TimestampFormatHeaders"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlAttributes"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlAttributesOnPayload"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlBlobs"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlEmptyBlobs"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlEmptyLists"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlEmptyMaps"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlEmptyStrings"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlEnums"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlIntEnums"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlLists"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlMaps"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlMapsXmlName"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlMapWithXmlNamespace"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlNamespaces"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlTimestamps"
                },
                {
                    "target": "aws.protocoltests.restxml#XmlUnions"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Rest Xml Protocol"
                },
                "aws.auth#sigv4": {
                    "name": "restxml"
                },
                "aws.protocols#restXml": {},
                "smithy.api#documentation": "A REST XML service that sends XML requests and responses.",
                "smithy.api#title": "Sample Rest Xml Protocol Service"
            }
        },
        "aws.protocoltests.restxml#SimpleScalarProperties": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#SimpleScalarPropertiesRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#SimpleScalarPropertiesResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/SimpleScalarProperties",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "SimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <stringValue>string</stringValue>\n    <trueBooleanValue>true</trueBooleanValue>\n    <falseBooleanValue>false</falseBooleanValue>\n    <byteValue>1</byteValue>\n    <shortValue>2</shortValue>\n    <integerValue>3</integerValue>\n    <longValue>4</longValue>\n    <floatValue>5.5</floatValue>\n    <DoubleDribble>6.5</DoubleDribble>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesWithEscapedCharacter",
                        "documentation": "Serializes string with escaping",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <stringValue>&lt;string&gt;</stringValue>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "<string>"
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesWithWhiteSpace",
                        "documentation": "Serializes string containing white space",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <stringValue>  string with white    space  </stringValue>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "  string with white    space  "
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesPureWhiteSpace",
                        "documentation": "Serializes string containing exclusively whitespace",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <stringValue>   </stringValue>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "   "
                        }
                    },
                    {
                        "id": "RestXmlSupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <floatValue>NaN</floatValue>\n    <DoubleDribble>NaN</DoubleDribble>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "RestXmlSupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <floatValue>Infinity</floatValue>\n    <DoubleDribble>Infinity</DoubleDribble>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesRequest>\n    <floatValue>-Infinity</floatValue>\n    <DoubleDribble>-Infinity</DoubleDribble>\n</SimpleScalarPropertiesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "SimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesResponse>\n    <stringValue>string</stringValue>\n    <trueBooleanValue>true</trueBooleanValue>\n    <falseBooleanValue>false</falseBooleanValue>\n    <byteValue>1</byteValue>\n    <shortValue>2</shortValue>\n    <integerValue>3</integerValue>\n    <longValue>4</longValue>\n    <floatValue>5.5</floatValue>\n    <DoubleDribble>6.5</DoubleDribble>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesComplexEscapes",
                        "documentation": "Serializes string with escaping.\n\nThis validates the three escape types: literal, decimal and hexadecimal. It also validates that unescaping properly\nhandles the case where unescaping an & produces a newly formed escape sequence (this should not be re-unescaped).\n\nServers may produce different output, this test is designed different unescapes clients must handle\n",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesResponse>\n    <stringValue>escaped data: &amp;lt;&#xD;&#10;</stringValue>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "escaped data: &lt;\r\n"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "SimpleScalarPropertiesWithEscapedCharacter",
                        "documentation": "Serializes string with escaping",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesResponse>\n    <stringValue>&lt;string&gt;</stringValue>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "<string>"
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesWithXMLPreamble",
                        "documentation": "Serializes simple scalar properties with xml preamble, comments and CDATA",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<SimpleScalarPropertiesResponse>\n    <![CDATA[characters representing CDATA]]>\n    <stringValue>string</stringValue>\n    <!--xml comment-->\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string"
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesWithWhiteSpace",
                        "documentation": "Serializes string containing white space",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<SimpleScalarPropertiesResponse>\n    <stringValue> string with white    space </stringValue>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": " string with white    space "
                        }
                    },
                    {
                        "id": "SimpleScalarPropertiesPureWhiteSpace",
                        "documentation": "Serializes string containing white space",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<SimpleScalarPropertiesResponse>\n    <stringValue>  </stringValue>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "  "
                        }
                    },
                    {
                        "id": "RestXmlSupportsNaNFloatOutputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesResponse>\n    <floatValue>NaN</floatValue>\n    <DoubleDribble>NaN</DoubleDribble>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "RestXmlSupportsInfinityFloatOutputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesResponse>\n    <floatValue>Infinity</floatValue>\n    <DoubleDribble>Infinity</DoubleDribble>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "RestXmlSupportsNegativeInfinityFloatOutputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesResponse>\n    <floatValue>-Infinity</floatValue>\n    <DoubleDribble>-Infinity</DoubleDribble>\n</SimpleScalarPropertiesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#SimpleScalarPropertiesInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "trueBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "falseBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#xmlName": "DoubleDribble"
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#SimpleScalarPropertiesRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#SimpleScalarPropertiesInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#SimpleScalarPropertiesResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#SimpleScalarPropertiesInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#StringEnum": {
            "type": "enum",
            "members": {
                "V": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "enumvalue"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#StringPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restxml#StructureList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restxml#StructureListMember",
                "traits": {
                    "smithy.api#xmlName": "item"
                }
            }
        },
        "aws.protocoltests.restxml#StructureListMember": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "value"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlName": "other"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#TimestampFormatHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#TimestampFormatHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restxml#TimestampFormatHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how timestamp request and response headers are serialized.",
                "smithy.api#http": {
                    "uri": "/TimestampFormatHeaders",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "TimestampFormatHeaders",
                        "documentation": "Tests how timestamp request headers are serialized",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/TimestampFormatHeaders",
                        "headers": {
                            "X-memberEpochSeconds": "1576540098",
                            "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-memberDateTime": "2019-12-16T23:48:18Z",
                            "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetEpochSeconds": "1576540098",
                            "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetDateTime": "2019-12-16T23:48:18Z"
                        },
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "TimestampFormatHeaders",
                        "documentation": "Tests how timestamp response headers are serialized",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "headers": {
                            "X-memberEpochSeconds": "1576540098",
                            "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-memberDateTime": "2019-12-16T23:48:18Z",
                            "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetEpochSeconds": "1576540098",
                            "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetDateTime": "2019-12-16T23:48:18Z"
                        },
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#TimestampFormatHeadersIO": {
            "type": "structure",
            "members": {
                "memberEpochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberEpochSeconds",
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "memberHttpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberHttpDate",
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "memberDateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberDateTime",
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "defaultFormat": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-defaultFormat"
                    }
                },
                "targetEpochSeconds": {
                    "target": "aws.protocoltests.shared#EpochSeconds",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetEpochSeconds"
                    }
                },
                "targetHttpDate": {
                    "target": "aws.protocoltests.shared#HttpDate",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetHttpDate"
                    }
                },
                "targetDateTime": {
                    "target": "aws.protocoltests.shared#DateTime",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetDateTime"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#UnionPayload": {
            "type": "union",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restxml#XmlAttributes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlAttributesRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlAttributesResponse"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes an XML attributes on synthesized document.",
                "smithy.api#http": {
                    "uri": "/XmlAttributes",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlAttributes",
                        "documentation": "Serializes XML attributes on the synthesized document",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlAttributes",
                        "body": "<XmlAttributesRequest test=\"test\">\n    <foo>hi</foo>\n</XmlAttributesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "foo": "hi",
                            "attr": "test"
                        }
                    },
                    {
                        "id": "XmlAttributesWithEscaping",
                        "documentation": "Serializes XML attributes with escaped characters on the synthesized document",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlAttributes",
                        "body": "<XmlAttributesRequest test=\"&lt;test&amp;mock&gt;\">\n    <foo>hi</foo>\n</XmlAttributesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "foo": "hi",
                            "attr": "<test&mock>"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlAttributes",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlAttributesResponse test=\"test\">\n    <foo>hi</foo>\n</XmlAttributesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "foo": "hi",
                            "attr": "test"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlAttributesInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                },
                "attr": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlAttribute": {},
                        "smithy.api#xmlName": "test"
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#XmlAttributesOnPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlAttributesOnPayloadRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlAttributesOnPayloadResponse"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes an XML attributes on a document targeted by httpPayload.",
                "smithy.api#http": {
                    "uri": "/XmlAttributesOnPayload",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlAttributesOnPayload",
                        "documentation": "Serializes XML attributes on the synthesized document",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlAttributesOnPayload",
                        "body": "<XmlAttributesPayloadRequest test=\"test\">\n    <foo>hi</foo>\n</XmlAttributesPayloadRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "payload": {
                                "foo": "hi",
                                "attr": "test"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlAttributesOnPayload",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlAttributesPayloadResponse test=\"test\">\n    <foo>hi</foo>\n</XmlAttributesPayloadResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "payload": {
                                "foo": "hi",
                                "attr": "test"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlAttributesOnPayloadRequest": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.restxml#XmlAttributesPayloadRequest",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlAttributesOnPayloadResponse": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.restxml#XmlAttributesPayloadResponse",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlAttributesPayloadRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlAttributesInputOutput"
                }
            ],
            "members": {}
        },
        "aws.protocoltests.restxml#XmlAttributesPayloadResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlAttributesInputOutput"
                }
            ],
            "members": {}
        },
        "aws.protocoltests.restxml#XmlAttributesRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlAttributesInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlAttributesResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlAttributesInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlBlobs": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlBlobsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlBlobsResponse"
            },
            "traits": {
                "smithy.api#documentation": "Blobs are base64 encoded",
                "smithy.api#http": {
                    "uri": "/XmlBlobs",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlBlobs",
                        "body": "<XmlBlobsRequest>\n    <data>dmFsdWU=</data>\n</XmlBlobsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlBlobsResponse>\n    <data>dmFsdWU=</data>\n</XmlBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlBlobsRequest": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlBlobsResponse": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyBlobs": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlEmptyBlobsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlEmptyBlobsResponse"
            },
            "traits": {
                "smithy.api#documentation": "Blobs are base64 encoded",
                "smithy.api#http": {
                    "uri": "/XmlEmptyBlobs",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlEmptyBlobs",
                        "documentation": "Empty blobs are deserialized as empty string",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyBlobsResponse>\n    <data></data>\n</XmlEmptyBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "data": ""
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "XmlEmptySelfClosedBlobs",
                        "documentation": "Empty self closed blobs are deserialized as empty string",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyBlobsResponse>\n    <data/>\n</XmlEmptyBlobsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "data": ""
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlEmptyBlobsRequest": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyBlobsResponse": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlEmptyListsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlEmptyListsResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/XmlEmptyLists",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlEmptyLists",
                        "documentation": "Serializes Empty XML lists",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlEmptyLists",
                        "body": "<XmlEmptyListsRequest>\n        <stringList></stringList>\n        <stringSet></stringSet>\n</XmlEmptyListsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "stringList": [],
                            "stringSet": []
                        },
                        "appliesTo": "client"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlEmptyLists",
                        "documentation": "Deserializes Empty XML lists",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyListsResponse>\n        <stringList/>\n        <stringSet></stringSet>\n</XmlEmptyListsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "stringList": [],
                            "stringSet": []
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlEmptyListsRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlListsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyListsResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlListsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyMaps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlEmptyMapsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlEmptyMapsResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/XmlEmptyMaps",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlEmptyMaps",
                        "documentation": "Serializes Empty XML maps",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlEmptyMaps",
                        "body": "<XmlEmptyMapsRequest>\n    <myMap></myMap>\n</XmlEmptyMapsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {}
                        },
                        "appliesTo": "client"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlEmptyMaps",
                        "documentation": "Deserializes Empty XML maps",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyMapsResponse>\n    <myMap></myMap>\n</XmlEmptyMapsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {}
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "XmlEmptySelfClosedMaps",
                        "documentation": "Deserializes Empty Self-closed XML maps",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyMapsResponse>\n    <myMap/>\n</XmlEmptyMapsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {}
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlEmptyMapsRequest": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapsInputOutputMap"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyMapsResponse": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapsInputOutputMap"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyStrings": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlEmptyStringsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlEmptyStringsResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/XmlEmptyStrings",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlEmptyStrings",
                        "documentation": "Serializes xml empty strings",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlEmptyStrings",
                        "body": "<XmlEmptyStringsRequest>\n    <emptyString></emptyString>\n</XmlEmptyStringsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "emptyString": ""
                        },
                        "appliesTo": "client"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlEmptyStrings",
                        "documentation": "Deserializes xml empty strings",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyStringsResponse>\n    <emptyString></emptyString>\n</XmlEmptyStringsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "emptyString": ""
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "XmlEmptySelfClosedStrings",
                        "documentation": "Empty self closed string are deserialized as empty string",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEmptyStringsResponse>\n    <emptyString/>\n</XmlEmptyStringsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "emptyString": ""
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlEmptyStringsRequest": {
            "type": "structure",
            "members": {
                "emptyString": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlEmptyStringsResponse": {
            "type": "structure",
            "members": {
                "emptyString": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlEnumsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlEnumsResponse"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.api#http": {
                    "uri": "/XmlEnums",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlEnums",
                        "body": "<XmlEnumsRequest>\n    <fooEnum1>Foo</fooEnum1>\n    <fooEnum2>0</fooEnum2>\n    <fooEnum3>1</fooEnum3>\n    <fooEnumList>\n        <member>Foo</member>\n        <member>0</member>\n    </fooEnumList>\n    <fooEnumSet>\n        <member>Foo</member>\n        <member>0</member>\n    </fooEnumSet>\n    <fooEnumMap>\n        <entry>\n            <key>hi</key>\n            <value>Foo</value>\n        </entry>\n        <entry>\n            <key>zero</key>\n            <value>0</value>\n        </entry>\n    </fooEnumMap>\n</XmlEnumsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlEnumsResponse>\n    <fooEnum1>Foo</fooEnum1>\n    <fooEnum2>0</fooEnum2>\n    <fooEnum3>1</fooEnum3>\n    <fooEnumList>\n        <member>Foo</member>\n        <member>0</member>\n    </fooEnumList>\n    <fooEnumSet>\n        <member>Foo</member>\n        <member>0</member>\n    </fooEnumSet>\n    <fooEnumMap>\n        <entry>\n            <key>hi</key>\n            <value>Foo</value>\n        </entry>\n        <entry>\n            <key>zero</key>\n            <value>0</value>\n        </entry>\n    </fooEnumMap>\n</XmlEnumsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlEnumsInputOutput": {
            "type": "structure",
            "members": {
                "fooEnum1": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum2": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum3": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "fooEnumSet": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "fooEnumMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap"
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#XmlEnumsRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlEnumsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlEnumsResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlEnumsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlIntEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlIntEnumsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlIntEnumsResponse"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.api#http": {
                    "uri": "/XmlIntEnums",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlIntEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlIntEnums",
                        "body": "<XmlIntEnumsRequest>\n    <intEnum1>1</intEnum1>\n    <intEnum2>2</intEnum2>\n    <intEnum3>3</intEnum3>\n    <intEnumList>\n        <member>1</member>\n        <member>2</member>\n    </intEnumList>\n    <intEnumSet>\n        <member>1</member>\n        <member>2</member>\n    </intEnumSet>\n    <intEnumMap>\n        <entry>\n            <key>a</key>\n            <value>1</value>\n        </entry>\n        <entry>\n            <key>b</key>\n            <value>2</value>\n        </entry>\n    </intEnumMap>\n</XmlIntEnumsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "intEnum1": 1,
                            "intEnum2": 2,
                            "intEnum3": 3,
                            "intEnumList": [
                                1,
                                2
                            ],
                            "intEnumSet": [
                                1,
                                2
                            ],
                            "intEnumMap": {
                                "a": 1,
                                "b": 2
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlIntEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlIntEnumsResponse>\n    <intEnum1>1</intEnum1>\n    <intEnum2>2</intEnum2>\n    <intEnum3>3</intEnum3>\n    <intEnumList>\n        <member>1</member>\n        <member>2</member>\n    </intEnumList>\n    <intEnumSet>\n        <member>1</member>\n        <member>2</member>\n    </intEnumSet>\n    <intEnumMap>\n        <entry>\n            <key>a</key>\n            <value>1</value>\n        </entry>\n        <entry>\n            <key>b</key>\n            <value>2</value>\n        </entry>\n    </intEnumMap>\n</XmlIntEnumsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "intEnum1": 1,
                            "intEnum2": 2,
                            "intEnum3": 3,
                            "intEnumList": [
                                1,
                                2
                            ],
                            "intEnumSet": [
                                1,
                                2
                            ],
                            "intEnumMap": {
                                "a": 1,
                                "b": 2
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlIntEnumsInputOutput": {
            "type": "structure",
            "members": {
                "intEnum1": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum2": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnum3": {
                    "target": "aws.protocoltests.shared#IntegerEnum"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "intEnumSet": {
                    "target": "aws.protocoltests.shared#IntegerEnumSet"
                },
                "intEnumMap": {
                    "target": "aws.protocoltests.shared#IntegerEnumMap"
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#XmlIntEnumsRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlIntEnumsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlIntEnumsResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlIntEnumsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlListsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlListsResponse"
            },
            "traits": {
                "smithy.api#documentation": "This test case serializes XML lists for the following cases for both\ninput and output:\n\n1. Normal XML lists.\n2. Normal XML sets.\n3. XML lists of lists.\n4. XML lists with @xmlName on its members\n5. Flattened XML lists.\n6. Flattened XML lists with @xmlName.\n7. Flattened XML lists with @xmlNamespace.\n8. Lists of structures.\n9. Flattened XML list of structures",
                "smithy.api#http": {
                    "uri": "/XmlLists",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlLists",
                        "documentation": "Tests for XML list serialization",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlLists",
                        "body": "<XmlListsRequest>\n    <stringList>\n        <member>foo</member>\n        <member>bar</member>\n    </stringList>\n    <stringSet>\n        <member>foo</member>\n        <member>bar</member>\n    </stringSet>\n    <integerList>\n        <member>1</member>\n        <member>2</member>\n    </integerList>\n    <booleanList>\n        <member>true</member>\n        <member>false</member>\n    </booleanList>\n    <timestampList>\n        <member>2014-04-29T18:30:38Z</member>\n        <member>2014-04-29T18:30:38Z</member>\n    </timestampList>\n    <enumList>\n        <member>Foo</member>\n        <member>0</member>\n    </enumList>\n    <intEnumList>\n        <member>1</member>\n        <member>2</member>\n    </intEnumList>\n    <nestedStringList>\n        <member>\n            <member>foo</member>\n            <member>bar</member>\n        </member>\n        <member>\n            <member>baz</member>\n            <member>qux</member>\n        </member>\n    </nestedStringList>\n    <renamed>\n        <item>foo</item>\n        <item>bar</item>\n    </renamed>\n    <flattenedList>hi</flattenedList>\n    <flattenedList>bye</flattenedList>\n    <customName>yep</customName>\n    <customName>nope</customName>\n    <myStructureList>\n        <item>\n            <value>1</value>\n            <other>2</other>\n        </item>\n        <item>\n            <value>3</value>\n            <other>4</other>\n        </item>\n    </myStructureList>\n    <flattenedStructureList>\n        <value>5</value>\n        <other>6</other>\n    </flattenedStructureList>\n    <flattenedStructureList>\n        <value>7</value>\n        <other>8</other>\n    </flattenedStructureList>\n</XmlListsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "intEnumList": [
                                1,
                                2
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "renamedListMembers": [
                                "foo",
                                "bar"
                            ],
                            "flattenedList": [
                                "hi",
                                "bye"
                            ],
                            "flattenedList2": [
                                "yep",
                                "nope"
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ],
                            "flattenedStructureList": [
                                {
                                    "a": "5",
                                    "b": "6"
                                },
                                {
                                    "a": "7",
                                    "b": "8"
                                }
                            ]
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlLists",
                        "documentation": "Tests for XML list serialization",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlListsResponse>\n    <stringList>\n        <member>foo</member>\n        <member>bar</member>\n    </stringList>\n    <stringSet>\n        <member>foo</member>\n        <member>bar</member>\n    </stringSet>\n    <integerList>\n        <member>1</member>\n        <member>2</member>\n    </integerList>\n    <booleanList>\n        <member>true</member>\n        <member>false</member>\n    </booleanList>\n    <timestampList>\n        <member>2014-04-29T18:30:38Z</member>\n        <member>2014-04-29T18:30:38Z</member>\n    </timestampList>\n    <enumList>\n        <member>Foo</member>\n        <member>0</member>\n    </enumList>\n    <intEnumList>\n        <member>1</member>\n        <member>2</member>\n    </intEnumList>\n    <nestedStringList>\n        <member>\n            <member>foo</member>\n            <member>bar</member>\n        </member>\n        <member>\n            <member>baz</member>\n            <member>qux</member>\n        </member>\n    </nestedStringList>\n    <renamed>\n        <item>foo</item>\n        <item>bar</item>\n    </renamed>\n    <flattenedList>hi</flattenedList>\n    <flattenedList>bye</flattenedList>\n    <customName>yep</customName>\n    <customName>nope</customName>\n    <flattenedListWithMemberNamespace xmlns=\"https://xml-member.example.com\">a</flattenedListWithMemberNamespace>\n    <flattenedListWithMemberNamespace xmlns=\"https://xml-member.example.com\">b</flattenedListWithMemberNamespace>\n    <flattenedListWithNamespace>a</flattenedListWithNamespace>\n    <flattenedListWithNamespace>b</flattenedListWithNamespace>\n    <myStructureList>\n        <item>\n            <value>1</value>\n            <other>2</other>\n        </item>\n        <item>\n            <value>3</value>\n            <other>4</other>\n        </item>\n    </myStructureList>\n    <flattenedStructureList>\n        <value>5</value>\n        <other>6</other>\n    </flattenedStructureList>\n    <flattenedStructureList>\n        <value>7</value>\n        <other>8</other>\n    </flattenedStructureList>\n</XmlListsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "intEnumList": [
                                1,
                                2
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "renamedListMembers": [
                                "foo",
                                "bar"
                            ],
                            "flattenedList": [
                                "hi",
                                "bye"
                            ],
                            "flattenedList2": [
                                "yep",
                                "nope"
                            ],
                            "flattenedListWithMemberNamespace": [
                                "a",
                                "b"
                            ],
                            "flattenedListWithNamespace": [
                                "a",
                                "b"
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ],
                            "flattenedStructureList": [
                                {
                                    "a": "5",
                                    "b": "6"
                                },
                                {
                                    "a": "7",
                                    "b": "8"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlListsInputOutput": {
            "type": "structure",
            "members": {
                "stringList": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "stringSet": {
                    "target": "aws.protocoltests.shared#StringSet"
                },
                "integerList": {
                    "target": "aws.protocoltests.shared#IntegerList"
                },
                "booleanList": {
                    "target": "aws.protocoltests.shared#BooleanList"
                },
                "timestampList": {
                    "target": "aws.protocoltests.shared#TimestampList"
                },
                "enumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "intEnumList": {
                    "target": "aws.protocoltests.shared#IntegerEnumList"
                },
                "nestedStringList": {
                    "target": "aws.protocoltests.shared#NestedStringList"
                },
                "renamedListMembers": {
                    "target": "aws.protocoltests.restxml#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlName": "renamed"
                    }
                },
                "flattenedList": {
                    "target": "aws.protocoltests.restxml#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "flattenedList2": {
                    "target": "aws.protocoltests.restxml#RenamedListMembers",
                    "traits": {
                        "smithy.api#xmlFlattened": {},
                        "smithy.api#xmlName": "customName"
                    }
                },
                "flattenedListWithMemberNamespace": {
                    "target": "aws.protocoltests.restxml#ListWithMemberNamespace",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "flattenedListWithNamespace": {
                    "target": "aws.protocoltests.restxml#ListWithNamespace",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "structureList": {
                    "target": "aws.protocoltests.restxml#StructureList",
                    "traits": {
                        "smithy.api#xmlName": "myStructureList"
                    }
                },
                "flattenedStructureList": {
                    "target": "aws.protocoltests.restxml#StructureList",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#XmlListsRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlListsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlListsResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlListsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlMapWithXmlNamespace": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlMapWithXmlNamespaceRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlMapWithXmlNamespaceResponse"
            },
            "traits": {
                "smithy.api#documentation": "Maps with @xmlNamespace and @xmlName",
                "smithy.api#http": {
                    "uri": "/XmlMapWithXmlNamespace",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestXmlXmlMapWithXmlNamespace",
                        "documentation": "Serializes XML maps in requests that have xmlNamespace and xmlName on members",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlMapWithXmlNamespace",
                        "body": "<XmlMapWithXmlNamespaceRequest>\n    <KVP xmlns=\"https://the-member.example.com\">\n        <entry>\n            <K xmlns=\"https://the-key.example.com\">a</K>\n            <V xmlns=\"https://the-value.example.com\">A</V>\n        </entry>\n        <entry>\n            <K xmlns=\"https://the-key.example.com\">b</K>\n            <V xmlns=\"https://the-value.example.com\">B</V>\n        </entry>\n    </KVP>\n</XmlMapWithXmlNamespaceRequest>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestXmlXmlMapWithXmlNamespace",
                        "documentation": "Serializes XML maps in responses that have xmlNamespace and xmlName on members",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlMapWithXmlNamespaceResponse>\n    <KVP xmlns=\"https://the-member.example.com\">\n        <entry>\n            <K xmlns=\"https://the-key.example.com\">a</K>\n            <V xmlns=\"https://the-value.example.com\">A</V>\n        </entry>\n        <entry>\n            <K xmlns=\"https://the-key.example.com\">b</K>\n            <V xmlns=\"https://the-value.example.com\">B</V>\n        </entry>\n    </KVP>\n</XmlMapWithXmlNamespaceResponse>",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "a": "A",
                                "b": "B"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlMapWithXmlNamespaceInputOutput": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapWithXmlNamespaceInputOutputMap",
                    "traits": {
                        "smithy.api#xmlName": "KVP",
                        "smithy.api#xmlNamespace": {
                            "uri": "https://the-member.example.com"
                        }
                    }
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#XmlMapWithXmlNamespaceInputOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "K",
                    "smithy.api#xmlNamespace": {
                        "uri": "https://the-key.example.com"
                    }
                }
            },
            "value": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "V",
                    "smithy.api#xmlNamespace": {
                        "uri": "https://the-value.example.com"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#XmlMapWithXmlNamespaceRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlMapWithXmlNamespaceInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlMapWithXmlNamespaceResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlMapWithXmlNamespaceInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlMaps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlMapsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlMapsResponse"
            },
            "traits": {
                "smithy.api#documentation": "The example tests basic map serialization.",
                "smithy.api#http": {
                    "uri": "/XmlMaps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlMaps",
                        "documentation": "Tests for XML map serialization",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlMaps",
                        "body": "<XmlMapsRequest>\n    <myMap>\n        <entry>\n            <key>foo</key>\n            <value>\n                <hi>there</hi>\n            </value>\n        </entry>\n        <entry>\n            <key>baz</key>\n            <value>\n                <hi>bye</hi>\n            </value>\n        </entry>\n    </myMap>\n</XmlMapsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlMaps",
                        "documentation": "Tests for XML map serialization",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlMapsResponse>\n    <myMap>\n        <entry>\n            <key>foo</key>\n            <value>\n                <hi>there</hi>\n            </value>\n        </entry>\n        <entry>\n            <key>baz</key>\n            <value>\n                <hi>bye</hi>\n            </value>\n        </entry>\n    </myMap>\n</XmlMapsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlMapsInputOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.restxml#XmlMapsRequest": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapsInputOutputMap"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlMapsResponse": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapsInputOutputMap"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlMapsXmlName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlMapsXmlNameRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlMapsXmlNameResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/XmlMapsXmlName",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlMapsXmlName",
                        "documentation": "Serializes XML maps that have xmlName on members",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlMapsXmlName",
                        "body": "<XmlMapsXmlNameRequest>\n    <myMap>\n        <entry>\n            <Attribute>foo</Attribute>\n            <Setting>\n                <hi>there</hi>\n            </Setting>\n        </entry>\n        <entry>\n            <Attribute>baz</Attribute>\n            <Setting>\n                <hi>bye</hi>\n            </Setting>\n        </entry>\n    </myMap>\n</XmlMapsXmlNameRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlMapsXmlName",
                        "documentation": "Serializes XML lists",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlMapsXmlNameResponse>\n    <myMap>\n        <entry>\n            <Attribute>foo</Attribute>\n            <Setting>\n                <hi>there</hi>\n            </Setting>\n        </entry>\n        <entry>\n            <Attribute>baz</Attribute>\n            <Setting>\n                <hi>bye</hi>\n            </Setting>\n        </entry>\n    </myMap>\n</XmlMapsXmlNameResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "myMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlMapsXmlNameInputOutputMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlName": "Attribute"
                }
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct",
                "traits": {
                    "smithy.api#xmlName": "Setting"
                }
            }
        },
        "aws.protocoltests.restxml#XmlMapsXmlNameRequest": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapsXmlNameInputOutputMap"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlMapsXmlNameResponse": {
            "type": "structure",
            "members": {
                "myMap": {
                    "target": "aws.protocoltests.restxml#XmlMapsXmlNameInputOutputMap"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlNamespaceNested": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "uri": "http://baz.com",
                            "prefix": "baz"
                        }
                    }
                },
                "values": {
                    "target": "aws.protocoltests.restxml#XmlNamespacedList",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "uri": "http://qux.com"
                        }
                    }
                }
            },
            "traits": {
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com"
                }
            }
        },
        "aws.protocoltests.restxml#XmlNamespacedList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#xmlNamespace": {
                        "uri": "http://bux.com"
                    }
                }
            }
        },
        "aws.protocoltests.restxml#XmlNamespaces": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlNamespacesRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlNamespacesResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/XmlNamespaces",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlNamespaces",
                        "documentation": "Serializes XML namespaces",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlNamespaces",
                        "body": "<XmlNamespacesRequest xmlns=\"http://foo.com\">\n    <nested>\n        <foo xmlns:baz=\"http://baz.com\">Foo</foo>\n        <values xmlns=\"http://qux.com\">\n            <member xmlns=\"http://bux.com\">Bar</member>\n            <member xmlns=\"http://bux.com\">Baz</member>\n        </values>\n    </nested>\n</XmlNamespacesRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo",
                                "values": [
                                    "Bar",
                                    "Baz"
                                ]
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlNamespaces",
                        "documentation": "Serializes XML namespaces",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlNamespacesResponse xmlns=\"http://foo.com\">\n    <nested>\n        <foo xmlns:baz=\"http://baz.com\">Foo</foo>\n        <values xmlns=\"http://qux.com\">\n            <member xmlns=\"http://bux.com\">Bar</member>\n            <member xmlns=\"http://bux.com\">Baz</member>\n        </values>\n    </nested>\n</XmlNamespacesResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo",
                                "values": [
                                    "Bar",
                                    "Baz"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlNamespacesInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restxml#XmlNamespaceNested"
                }
            },
            "traits": {
                "smithy.api#mixin": {},
                "smithy.api#xmlNamespace": {
                    "uri": "http://foo.com"
                }
            }
        },
        "aws.protocoltests.restxml#XmlNamespacesRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlNamespacesInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlNamespacesResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlNamespacesInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlNestedUnionStruct": {
            "type": "structure",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "booleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double"
                }
            }
        },
        "aws.protocoltests.restxml#XmlTimestamps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlTimestampsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlTimestampsResponse"
            },
            "traits": {
                "smithy.api#documentation": "This tests how timestamps are serialized, including using the\ndefault format of date-time and various @timestampFormat trait\nvalues.",
                "smithy.api#http": {
                    "uri": "/XmlTimestamps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <normal>2014-04-29T18:30:38Z</normal>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <dateTime>2014-04-29T18:30:38Z</dateTime>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithDateTimeOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of date-time on the target shape works like normal timestamps",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <dateTimeOnTarget>2014-04-29T18:30:38Z</dateTimeOnTarget>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "dateTimeOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <epochSeconds>1398796238</epochSeconds>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithEpochSecondsOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds on the target shape works",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <epochSecondsOnTarget>1398796238</epochSecondsOnTarget>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "epochSecondsOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <httpDate>Tue, 29 Apr 2014 18:30:38 GMT</httpDate>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithHttpDateOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of http-date on the target shape works",
                        "protocol": "aws.protocols#restXml",
                        "method": "POST",
                        "uri": "/XmlTimestamps",
                        "body": "<XmlTimestampsRequest>\n    <httpDateOnTarget>Tue, 29 Apr 2014 18:30:38 GMT</httpDateOnTarget>\n</XmlTimestampsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "httpDateOnTarget": 1398796238
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <normal>2014-04-29T18:30:38Z</normal>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <dateTime>2014-04-29T18:30:38Z</dateTime>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithDateTimeOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of date-time on the target shape works like normal timestamps",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <dateTimeOnTarget>2014-04-29T18:30:38Z</dateTimeOnTarget>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "dateTimeOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <epochSeconds>1398796238</epochSeconds>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithEpochSecondsOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds on the target shape works",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <epochSecondsOnTarget>1398796238</epochSecondsOnTarget>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "epochSecondsOnTarget": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <httpDate>Tue, 29 Apr 2014 18:30:38 GMT</httpDate>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    },
                    {
                        "id": "XmlTimestampsWithHttpDateOnTargetFormat",
                        "documentation": "Ensures that the timestampFormat of http-date on the target shape works",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlTimestampsResponse>\n    <httpDateOnTarget>Tue, 29 Apr 2014 18:30:38 GMT</httpDateOnTarget>\n</XmlTimestampsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "httpDateOnTarget": 1398796238
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlTimestampsInputOutput": {
            "type": "structure",
            "members": {
                "normal": {
                    "target": "smithy.api#Timestamp"
                },
                "dateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "dateTimeOnTarget": {
                    "target": "aws.protocoltests.shared#DateTime"
                },
                "epochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "epochSecondsOnTarget": {
                    "target": "aws.protocoltests.shared#EpochSeconds"
                },
                "httpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "httpDateOnTarget": {
                    "target": "aws.protocoltests.shared#HttpDate"
                }
            },
            "traits": {
                "smithy.api#mixin": {}
            }
        },
        "aws.protocoltests.restxml#XmlTimestampsRequest": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlTimestampsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlTimestampsResponse": {
            "type": "structure",
            "mixins": [
                {
                    "target": "aws.protocoltests.restxml#XmlTimestampsInputOutput"
                }
            ],
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml#XmlUnionShape": {
            "type": "union",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "booleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double"
                },
                "unionValue": {
                    "target": "aws.protocoltests.restxml#XmlUnionShape"
                },
                "structValue": {
                    "target": "aws.protocoltests.restxml#XmlNestedUnionStruct"
                }
            }
        },
        "aws.protocoltests.restxml#XmlUnions": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml#XmlUnionsRequest"
            },
            "output": {
                "target": "aws.protocoltests.restxml#XmlUnionsResponse"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/XmlUnions",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlUnionsWithStructMember",
                        "documentation": "Serializes union struct member",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlUnions",
                        "body": "<XmlUnionsRequest>\n    <unionValue>\n       <structValue>\n          <stringValue>string</stringValue>\n          <booleanValue>true</booleanValue>\n          <byteValue>1</byteValue>\n          <shortValue>2</shortValue>\n          <integerValue>3</integerValue>\n          <longValue>4</longValue>\n          <floatValue>5.5</floatValue>\n          <doubleValue>6.5</doubleValue>\n       </structValue>\n    </unionValue>\n</XmlUnionsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "structValue": {
                                    "stringValue": "string",
                                    "booleanValue": true,
                                    "byteValue": 1,
                                    "shortValue": 2,
                                    "integerValue": 3,
                                    "longValue": 4,
                                    "floatValue": 5.5,
                                    "doubleValue": 6.5
                                }
                            }
                        }
                    },
                    {
                        "id": "XmlUnionsWithStringMember",
                        "documentation": "serialize union string member",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlUnions",
                        "body": "<XmlUnionsRequest>\n   <unionValue>\n      <stringValue>some string</stringValue>\n   </unionValue>\n</XmlUnionsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "stringValue": "some string"
                            }
                        }
                    },
                    {
                        "id": "XmlUnionsWithBooleanMember",
                        "documentation": "Serializes union boolean member",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlUnions",
                        "body": "<XmlUnionsRequest>\n   <unionValue>\n      <booleanValue>true</booleanValue>\n   </unionValue>\n</XmlUnionsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "XmlUnionsWithUnionMember",
                        "documentation": "Serializes union member",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/XmlUnions",
                        "body": "<XmlUnionsRequest>\n   <unionValue>\n      <unionValue>\n         <booleanValue>true</booleanValue>\n      </unionValue>\n   </unionValue>\n</XmlUnionsRequest>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "unionValue": {
                                    "booleanValue": true
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlUnionsWithStructMember",
                        "documentation": "Serializes union struct member",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlUnionsResponse>\n    <unionValue>\n       <structValue>\n          <stringValue>string</stringValue>\n          <booleanValue>true</booleanValue>\n          <byteValue>1</byteValue>\n          <shortValue>2</shortValue>\n          <integerValue>3</integerValue>\n          <longValue>4</longValue>\n          <floatValue>5.5</floatValue>\n          <doubleValue>6.5</doubleValue>\n       </structValue>\n    </unionValue>\n</XmlUnionsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "structValue": {
                                    "stringValue": "string",
                                    "booleanValue": true,
                                    "byteValue": 1,
                                    "shortValue": 2,
                                    "integerValue": 3,
                                    "longValue": 4,
                                    "floatValue": 5.5,
                                    "doubleValue": 6.5
                                }
                            }
                        }
                    },
                    {
                        "id": "XmlUnionsWithStringMember",
                        "documentation": "Serializes union string member",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlUnionsResponse>\n   <unionValue>\n      <stringValue>some string</stringValue>\n   </unionValue>\n</XmlUnionsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "stringValue": "some string"
                            }
                        }
                    },
                    {
                        "id": "XmlUnionsWithBooleanMember",
                        "documentation": "Serializes union boolean member",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlUnionsResponse>\n   <unionValue>\n      <booleanValue>true</booleanValue>\n   </unionValue>\n</XmlUnionsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "XmlUnionsWithUnionMember",
                        "documentation": "Serializes union member",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<XmlUnionsResponse>\n   <unionValue>\n      <unionValue>\n         <booleanValue>true</booleanValue>\n      </unionValue>\n   </unionValue>\n</XmlUnionsResponse>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "params": {
                            "unionValue": {
                                "unionValue": {
                                    "booleanValue": true
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml#XmlUnionsRequest": {
            "type": "structure",
            "members": {
                "unionValue": {
                    "target": "aws.protocoltests.restxml#XmlUnionShape"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restxml#XmlUnionsResponse": {
            "type": "structure",
            "members": {
                "unionValue": {
                    "target": "aws.protocoltests.restxml#XmlUnionShape"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restxml.xmlns#NestedWithNamespace": {
            "type": "structure",
            "members": {
                "attrField": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#xmlAttribute": {},
                        "smithy.api#xmlName": "xsi:someName"
                    }
                }
            }
        },
        "aws.protocoltests.restxml.xmlns#RestXmlWithNamespace": {
            "type": "service",
            "version": "2019-12-16",
            "operations": [
                {
                    "target": "aws.protocoltests.restxml.xmlns#SimpleScalarProperties"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Rest Xml Protocol Namespace"
                },
                "aws.auth#sigv4": {
                    "name": "restxmlwithnamespace"
                },
                "aws.protocols#restXml": {},
                "smithy.api#documentation": "A REST XML service that sends XML requests and responses.\n\nThis service and test case is complementary to the test cases\nin the `restXml` directory, but the service under test here has\nthe `xmlNamespace` trait applied to it.\n\nSee https://github.com/awslabs/smithy/issues/616",
                "smithy.api#title": "Sample Rest Xml Protocol Service With Namespace",
                "smithy.api#xmlNamespace": {
                    "uri": "https://example.com"
                }
            }
        },
        "aws.protocoltests.restxml.xmlns#SimpleScalarProperties": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restxml.xmlns#SimpleScalarPropertiesInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restxml.xmlns#SimpleScalarPropertiesInputOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/SimpleScalarProperties",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "XmlNamespaceSimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "<SimpleScalarPropertiesInputOutput xmlns=\"https://example.com\">\n    <stringValue>string</stringValue>\n    <trueBooleanValue>true</trueBooleanValue>\n    <falseBooleanValue>false</falseBooleanValue>\n    <byteValue>1</byteValue>\n    <shortValue>2</shortValue>\n    <integerValue>3</integerValue>\n    <longValue>4</longValue>\n    <floatValue>5.5</floatValue>\n    <DoubleDribble>6.5</DoubleDribble>\n    <Nested xmlns:xsi=\"https://example.com\" xsi:someName=\"nestedAttrValue\"></Nested>\n</SimpleScalarPropertiesInputOutput>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5,
                            "Nested": {
                                "attrField": "nestedAttrValue"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "XmlNamespaceSimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restXml",
                        "code": 200,
                        "body": "<SimpleScalarPropertiesInputOutput xmlns=\"https://example.com\">\n    <stringValue>string</stringValue>\n    <trueBooleanValue>true</trueBooleanValue>\n    <falseBooleanValue>false</falseBooleanValue>\n    <byteValue>1</byteValue>\n    <shortValue>2</shortValue>\n    <integerValue>3</integerValue>\n    <longValue>4</longValue>\n    <floatValue>5.5</floatValue>\n    <DoubleDribble>6.5</DoubleDribble>\n    <Nested xmlns:xsi=\"https://example.com\" xsi:someName=\"nestedAttrValue\"></Nested>\n</SimpleScalarPropertiesInputOutput>\n",
                        "bodyMediaType": "application/xml",
                        "headers": {
                            "Content-Type": "application/xml",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5,
                            "Nested": {
                                "attrField": "nestedAttrValue"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restxml.xmlns#SimpleScalarPropertiesInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "trueBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "falseBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "Nested": {
                    "target": "aws.protocoltests.restxml.xmlns#NestedWithNamespace",
                    "traits": {
                        "smithy.api#xmlNamespace": {
                            "prefix": "xsi",
                            "uri": "https://example.com"
                        }
                    }
                },
                "doubleValue": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#xmlName": "DoubleDribble"
                    }
                }
            }
        },
        "aws.protocoltests.shared#BlobSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Blob"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#BooleanList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Boolean"
            }
        },
        "aws.protocoltests.shared#BooleanSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Boolean"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#ByteSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Byte"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#DateTime": {
            "type": "timestamp",
            "traits": {
                "smithy.api#timestampFormat": "date-time"
            }
        },
        "aws.protocoltests.shared#DateTimeSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#DateTime"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#DoubleList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Double"
            }
        },
        "aws.protocoltests.shared#EpochSeconds": {
            "type": "timestamp",
            "traits": {
                "smithy.api#timestampFormat": "epoch-seconds"
            }
        },
        "aws.protocoltests.shared#FooEnum": {
            "type": "enum",
            "members": {
                "FOO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "Foo"
                    }
                },
                "BAZ": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "Baz"
                    }
                },
                "BAR": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "Bar"
                    }
                },
                "ONE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "1"
                    }
                },
                "ZERO": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "0"
                    }
                }
            }
        },
        "aws.protocoltests.shared#FooEnumList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#FooEnum"
            }
        },
        "aws.protocoltests.shared#FooEnumMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#FooEnum"
            }
        },
        "aws.protocoltests.shared#FooEnumSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#FooEnum"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#FooUnion": {
            "type": "union",
            "members": {
                "string": {
                    "target": "smithy.api#String"
                },
                "integer": {
                    "target": "smithy.api#Integer"
                }
            }
        },
        "aws.protocoltests.shared#GreetingList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.shared#GreetingStruct": {
            "type": "structure",
            "members": {
                "hi": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.shared#HttpDate": {
            "type": "timestamp",
            "traits": {
                "smithy.api#timestampFormat": "http-date"
            }
        },
        "aws.protocoltests.shared#HttpDateSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#HttpDate"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#IntegerEnum": {
            "type": "intEnum",
            "members": {
                "A": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 1
                    }
                },
                "B": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 2
                    }
                },
                "C": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": 3
                    }
                }
            }
        },
        "aws.protocoltests.shared#IntegerEnumList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#IntegerEnum"
            }
        },
        "aws.protocoltests.shared#IntegerEnumMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#IntegerEnum"
            }
        },
        "aws.protocoltests.shared#IntegerEnumSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#IntegerEnum"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#IntegerList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Integer"
            }
        },
        "aws.protocoltests.shared#IntegerSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Integer"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#JpegBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#mediaType": "image/jpeg"
            }
        },
        "aws.protocoltests.shared#ListSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#StringList"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#LongSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Long"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#NestedStringList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#StringList"
            },
            "traits": {
                "smithy.api#documentation": "A list of lists of strings."
            }
        },
        "aws.protocoltests.shared#ShortSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Short"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#SparseStringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.shared#SparseStringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.shared#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.shared#StringListMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringList"
            }
        },
        "aws.protocoltests.shared#StringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.shared#StringSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#StructureSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#TextPlainBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#mediaType": "text/plain"
            }
        },
        "aws.protocoltests.shared#TimestampList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Timestamp"
            }
        },
        "aws.protocoltests.shared#TimestampSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Timestamp"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.shared#UnionSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#FooUnion"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "com.amazonaws.apigateway#ApiKeySourceType": {
            "type": "enum",
            "members": {
                "HEADER": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "HEADER"
                    }
                },
                "AUTHORIZER": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "AUTHORIZER"
                    }
                }
            }
        },
        "com.amazonaws.apigateway#BackplaneControlService": {
            "type": "service",
            "version": "2015-07-09",
            "operations": [
                {
                    "target": "com.amazonaws.apigateway#GetRestApis"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "API Gateway",
                    "arnNamespace": "apigateway",
                    "cloudFormationName": "ApiGateway",
                    "cloudTrailEventSource": "apigateway.amazonaws.com",
                    "endpointPrefix": "apigateway"
                },
                "aws.auth#sigv4": {
                    "name": "apigateway"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#title": "Amazon API Gateway"
            }
        },
        "com.amazonaws.apigateway#BadRequestException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.apigateway#String"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "com.amazonaws.apigateway#Boolean": {
            "type": "boolean"
        },
        "com.amazonaws.apigateway#EndpointConfiguration": {
            "type": "structure",
            "members": {
                "types": {
                    "target": "com.amazonaws.apigateway#ListOfEndpointType"
                },
                "vpcEndpointIds": {
                    "target": "com.amazonaws.apigateway#ListOfString"
                }
            }
        },
        "com.amazonaws.apigateway#EndpointType": {
            "type": "enum",
            "members": {
                "REGIONAL": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "REGIONAL"
                    }
                },
                "EDGE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "EDGE"
                    }
                },
                "PRIVATE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "PRIVATE"
                    }
                }
            }
        },
        "com.amazonaws.apigateway#GetRestApis": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.apigateway#GetRestApisRequest"
            },
            "output": {
                "target": "com.amazonaws.apigateway#RestApis"
            },
            "errors": [
                {
                    "target": "com.amazonaws.apigateway#BadRequestException"
                },
                {
                    "target": "com.amazonaws.apigateway#TooManyRequestsException"
                },
                {
                    "target": "com.amazonaws.apigateway#UnauthorizedException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/restapis",
                    "code": 200
                },
                "smithy.api#paginated": {
                    "inputToken": "position",
                    "outputToken": "position",
                    "items": "items",
                    "pageSize": "limit"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "ApiGatewayAccept",
                        "documentation": "API Gateway requires that this Accept header is set on all requests.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/restapis",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "body": "",
                        "params": {}
                    }
                ]
            }
        },
        "com.amazonaws.apigateway#GetRestApisRequest": {
            "type": "structure",
            "members": {
                "position": {
                    "target": "com.amazonaws.apigateway#String",
                    "traits": {
                        "smithy.api#httpQuery": "position"
                    }
                },
                "limit": {
                    "target": "com.amazonaws.apigateway#NullableInteger",
                    "traits": {
                        "smithy.api#httpQuery": "limit"
                    }
                }
            }
        },
        "com.amazonaws.apigateway#ListOfEndpointType": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.apigateway#EndpointType"
            }
        },
        "com.amazonaws.apigateway#ListOfRestApi": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.apigateway#RestApi"
            }
        },
        "com.amazonaws.apigateway#ListOfString": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.apigateway#String"
            }
        },
        "com.amazonaws.apigateway#MapOfStringToString": {
            "type": "map",
            "key": {
                "target": "com.amazonaws.apigateway#String"
            },
            "value": {
                "target": "com.amazonaws.apigateway#String"
            }
        },
        "com.amazonaws.apigateway#NullableInteger": {
            "type": "integer"
        },
        "com.amazonaws.apigateway#RestApi": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "name": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "description": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "createdDate": {
                    "target": "com.amazonaws.apigateway#Timestamp"
                },
                "version": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "warnings": {
                    "target": "com.amazonaws.apigateway#ListOfString"
                },
                "binaryMediaTypes": {
                    "target": "com.amazonaws.apigateway#ListOfString"
                },
                "minimumCompressionSize": {
                    "target": "com.amazonaws.apigateway#NullableInteger"
                },
                "apiKeySource": {
                    "target": "com.amazonaws.apigateway#ApiKeySourceType"
                },
                "endpointConfiguration": {
                    "target": "com.amazonaws.apigateway#EndpointConfiguration"
                },
                "policy": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "tags": {
                    "target": "com.amazonaws.apigateway#MapOfStringToString"
                },
                "disableExecuteApiEndpoint": {
                    "target": "com.amazonaws.apigateway#Boolean"
                }
            }
        },
        "com.amazonaws.apigateway#RestApis": {
            "type": "structure",
            "members": {
                "items": {
                    "target": "com.amazonaws.apigateway#ListOfRestApi",
                    "traits": {
                        "smithy.api#jsonName": "item"
                    }
                },
                "position": {
                    "target": "com.amazonaws.apigateway#String"
                }
            }
        },
        "com.amazonaws.apigateway#String": {
            "type": "string"
        },
        "com.amazonaws.apigateway#Timestamp": {
            "type": "timestamp"
        },
        "com.amazonaws.apigateway#TooManyRequestsException": {
            "type": "structure",
            "members": {
                "retryAfterSeconds": {
                    "target": "com.amazonaws.apigateway#String",
                    "traits": {
                        "smithy.api#httpHeader": "Retry-After"
                    }
                },
                "message": {
                    "target": "com.amazonaws.apigateway#String"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 429
            }
        },
        "com.amazonaws.apigateway#UnauthorizedException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.apigateway#String"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 401
            }
        },
        "com.amazonaws.glacier#ArchiveCreationOutput": {
            "type": "structure",
            "members": {
                "location": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "Location"
                    }
                },
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                },
                "archiveId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-archive-id"
                    }
                }
            }
        },
        "com.amazonaws.glacier#Glacier": {
            "type": "service",
            "version": "2012-06-01",
            "operations": [
                {
                    "target": "com.amazonaws.glacier#UploadArchive"
                },
                {
                    "target": "com.amazonaws.glacier#UploadMultipartPart"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Glacier",
                    "arnNamespace": "glacier",
                    "cloudFormationName": "Glacier",
                    "cloudTrailEventSource": "glacier.amazonaws.com",
                    "endpointPrefix": "glacier"
                },
                "aws.auth#sigv4": {
                    "name": "glacier"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#title": "Amazon Glacier",
                "smithy.api#xmlNamespace": {
                    "uri": "http://glacier.amazonaws.com/doc/2012-06-01/"
                }
            }
        },
        "com.amazonaws.glacier#InvalidParameterValueException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "com.amazonaws.glacier#MissingParameterValueException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "com.amazonaws.glacier#RequestTimeoutException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 408
            }
        },
        "com.amazonaws.glacier#ResourceNotFoundException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 404
            }
        },
        "com.amazonaws.glacier#ServiceUnavailableException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "server",
                "smithy.api#httpError": 500
            }
        },
        "com.amazonaws.glacier#Stream": {
            "type": "blob",
            "traits": {
                "smithy.api#streaming": {}
            }
        },
        "com.amazonaws.glacier#UploadArchive": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.glacier#UploadArchiveInput"
            },
            "output": {
                "target": "com.amazonaws.glacier#ArchiveCreationOutput"
            },
            "errors": [
                {
                    "target": "com.amazonaws.glacier#InvalidParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#MissingParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#RequestTimeoutException"
                },
                {
                    "target": "com.amazonaws.glacier#ResourceNotFoundException"
                },
                {
                    "target": "com.amazonaws.glacier#ServiceUnavailableException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/{accountId}/vaults/{vaultName}/archives",
                    "code": 201
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "GlacierVersionHeader",
                        "documentation": "Glacier requires that a version header be set on all requests.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/foo/vaults/bar/archives",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01"
                        },
                        "body": "",
                        "params": {
                            "accountId": "foo",
                            "vaultName": "bar"
                        }
                    },
                    {
                        "id": "GlacierChecksums",
                        "documentation": "Glacier requires checksum headers that are cumbersome to provide.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/foo/vaults/bar/archives",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01",
                            "X-Amz-Content-Sha256": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
                            "X-Amz-Sha256-Tree-Hash": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
                        },
                        "body": "hello world",
                        "params": {
                            "accountId": "foo",
                            "vaultName": "bar",
                            "body": "hello world"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "GlacierAccountId",
                        "documentation": "Glacier requires that the account id be set, but you can just use a\nhyphen (-) to indicate the current account. This should be default\nbehavior if the customer provides a null or empty string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/-/vaults/bar/archives",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01"
                        },
                        "body": "",
                        "params": {
                            "accountId": "",
                            "vaultName": "bar"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "com.amazonaws.glacier#UploadArchiveInput": {
            "type": "structure",
            "members": {
                "vaultName": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "accountId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "archiveDescription": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-archive-description"
                    }
                },
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                },
                "body": {
                    "target": "com.amazonaws.glacier#Stream",
                    "traits": {
                        "smithy.api#default": "",
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "com.amazonaws.glacier#UploadMultipartPart": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.glacier#UploadMultipartPartInput"
            },
            "output": {
                "target": "com.amazonaws.glacier#UploadMultipartPartOutput"
            },
            "errors": [
                {
                    "target": "com.amazonaws.glacier#InvalidParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#MissingParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#RequestTimeoutException"
                },
                {
                    "target": "com.amazonaws.glacier#ResourceNotFoundException"
                },
                {
                    "target": "com.amazonaws.glacier#ServiceUnavailableException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "PUT",
                    "uri": "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
                    "code": 204
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "GlacierMultipartChecksums",
                        "documentation": "Glacier requires checksum headers that are cumbersome to provide.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/foo/vaults/bar/multipart-uploads/baz",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01",
                            "X-Amz-Content-Sha256": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
                            "X-Amz-Sha256-Tree-Hash": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
                        },
                        "body": "hello world",
                        "params": {
                            "accountId": "foo",
                            "vaultName": "bar",
                            "uploadId": "baz",
                            "body": "hello world"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "com.amazonaws.glacier#UploadMultipartPartInput": {
            "type": "structure",
            "members": {
                "accountId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "vaultName": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "uploadId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                },
                "range": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Range"
                    }
                },
                "body": {
                    "target": "com.amazonaws.glacier#Stream",
                    "traits": {
                        "smithy.api#default": "",
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "com.amazonaws.glacier#UploadMultipartPartOutput": {
            "type": "structure",
            "members": {
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                }
            }
        },
        "com.amazonaws.glacier#string": {
            "type": "string"
        },
        "com.amazonaws.machinelearning#AmazonML_20141212": {
            "type": "service",
            "version": "2014-12-12",
            "operations": [
                {
                    "target": "com.amazonaws.machinelearning#Predict"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "Machine Learning",
                    "arnNamespace": "machinelearning",
                    "cloudFormationName": "MachineLearning",
                    "cloudTrailEventSource": "machinelearning.amazonaws.com",
                    "endpointPrefix": "machinelearning"
                },
                "aws.auth#sigv4": {
                    "name": "machinelearning"
                },
                "aws.protocols#awsJson1_1": {},
                "smithy.api#title": "Amazon Machine Learning",
                "smithy.api#xmlNamespace": {
                    "uri": "http://machinelearning.amazonaws.com/doc/2014-12-12/"
                }
            }
        },
        "com.amazonaws.machinelearning#DetailsAttributes": {
            "type": "enum",
            "members": {
                "PREDICTIVE_MODEL_TYPE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "PredictiveModelType"
                    }
                },
                "ALGORITHM": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "Algorithm"
                    }
                }
            }
        },
        "com.amazonaws.machinelearning#DetailsMap": {
            "type": "map",
            "key": {
                "target": "com.amazonaws.machinelearning#DetailsAttributes"
            },
            "value": {
                "target": "com.amazonaws.machinelearning#DetailsValue"
            }
        },
        "com.amazonaws.machinelearning#DetailsValue": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 1
                }
            }
        },
        "com.amazonaws.machinelearning#EntityId": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 1,
                    "max": 64
                },
                "smithy.api#pattern": "^[a-zA-Z0-9_.-]+$"
            }
        },
        "com.amazonaws.machinelearning#ErrorCode": {
            "type": "integer"
        },
        "com.amazonaws.machinelearning#ErrorMessage": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 0,
                    "max": 2048
                }
            }
        },
        "com.amazonaws.machinelearning#InternalServerException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.machinelearning#ErrorMessage"
                },
                "code": {
                    "target": "com.amazonaws.machinelearning#ErrorCode"
                }
            },
            "traits": {
                "smithy.api#error": "server",
                "smithy.api#httpError": 500
            }
        },
        "com.amazonaws.machinelearning#InvalidInputException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.machinelearning#ErrorMessage"
                },
                "code": {
                    "target": "com.amazonaws.machinelearning#ErrorCode"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "com.amazonaws.machinelearning#Label": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 1
                }
            }
        },
        "com.amazonaws.machinelearning#LimitExceededException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.machinelearning#ErrorMessage"
                },
                "code": {
                    "target": "com.amazonaws.machinelearning#ErrorCode"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 417
            }
        },
        "com.amazonaws.machinelearning#Predict": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.machinelearning#PredictInput"
            },
            "output": {
                "target": "com.amazonaws.machinelearning#PredictOutput"
            },
            "errors": [
                {
                    "target": "com.amazonaws.machinelearning#InternalServerException"
                },
                {
                    "target": "com.amazonaws.machinelearning#InvalidInputException"
                },
                {
                    "target": "com.amazonaws.machinelearning#LimitExceededException"
                },
                {
                    "target": "com.amazonaws.machinelearning#PredictorNotMountedException"
                },
                {
                    "target": "com.amazonaws.machinelearning#ResourceNotFoundException"
                }
            ],
            "traits": {
                "smithy.test#httpRequestTests": [
                    {
                        "id": "MachinelearningPredictEndpoint",
                        "documentation": "MachineLearning's api makes use of generated endpoints that the\ncustomer is then expected to use for the Predict operation. Having\nto alter the endpoint for a specific operation would be cumbersome,\nso an AWS client should be able to do it for them.",
                        "protocol": "aws.protocols#awsJson1_1",
                        "method": "POST",
                        "uri": "/",
                        "host": "example.com",
                        "resolvedHost": "custom.example.com",
                        "body": "{\"MLModelId\": \"foo\", \"Record\": {}, \"PredictEndpoint\": \"https://custom.example.com/\"}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/x-amz-json-1.1"
                        },
                        "params": {
                            "MLModelId": "foo",
                            "Record": {},
                            "PredictEndpoint": "https://custom.example.com/"
                        }
                    }
                ]
            }
        },
        "com.amazonaws.machinelearning#PredictInput": {
            "type": "structure",
            "members": {
                "MLModelId": {
                    "target": "com.amazonaws.machinelearning#EntityId",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "Record": {
                    "target": "com.amazonaws.machinelearning#Record",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "PredictEndpoint": {
                    "target": "com.amazonaws.machinelearning#VipURLUnvalidated",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "com.amazonaws.machinelearning#PredictOutput": {
            "type": "structure",
            "members": {
                "Prediction": {
                    "target": "com.amazonaws.machinelearning#Prediction"
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "com.amazonaws.machinelearning#Prediction": {
            "type": "structure",
            "members": {
                "predictedLabel": {
                    "target": "com.amazonaws.machinelearning#Label"
                },
                "predictedValue": {
                    "target": "com.amazonaws.machinelearning#floatLabel"
                },
                "predictedScores": {
                    "target": "com.amazonaws.machinelearning#ScoreValuePerLabelMap"
                },
                "details": {
                    "target": "com.amazonaws.machinelearning#DetailsMap"
                }
            }
        },
        "com.amazonaws.machinelearning#PredictorNotMountedException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.machinelearning#ErrorMessage"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "com.amazonaws.machinelearning#Record": {
            "type": "map",
            "key": {
                "target": "com.amazonaws.machinelearning#VariableName"
            },
            "value": {
                "target": "com.amazonaws.machinelearning#VariableValue"
            }
        },
        "com.amazonaws.machinelearning#ResourceNotFoundException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.machinelearning#ErrorMessage"
                },
                "code": {
                    "target": "com.amazonaws.machinelearning#ErrorCode"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 404
            }
        },
        "com.amazonaws.machinelearning#ScoreValue": {
            "type": "float"
        },
        "com.amazonaws.machinelearning#ScoreValuePerLabelMap": {
            "type": "map",
            "key": {
                "target": "com.amazonaws.machinelearning#Label"
            },
            "value": {
                "target": "com.amazonaws.machinelearning#ScoreValue"
            }
        },
        "com.amazonaws.machinelearning#VariableName": {
            "type": "string"
        },
        "com.amazonaws.machinelearning#VariableValue": {
            "type": "string"
        },
        "com.amazonaws.machinelearning#VipURLUnvalidated": {
            "type": "string"
        },
        "com.amazonaws.machinelearning#floatLabel": {
            "type": "float"
        },
        "com.amazonaws.s3#AccountId": {
            "type": "string"
        },
        "com.amazonaws.s3#AmazonS3": {
            "type": "service",
            "version": "2006-03-01",
            "operations": [
                {
                    "target": "com.amazonaws.s3#DeleteObjectTagging"
                },
                {
                    "target": "com.amazonaws.s3#GetBucketLocation"
                },
                {
                    "target": "com.amazonaws.s3#GetObject"
                },
                {
                    "target": "com.amazonaws.s3#ListObjectsV2"
                }
            ],
            "traits": {
                "aws.api#service": {
                    "sdkId": "S3",
                    "arnNamespace": "s3",
                    "cloudFormationName": "S3",
                    "cloudTrailEventSource": "s3.amazonaws.com",
                    "endpointPrefix": "s3"
                },
                "aws.auth#sigv4": {
                    "name": "s3"
                },
                "aws.protocols#restXml": {
                    "noErrorWrapping": true
                },
                "smithy.api#title": "Amazon Simple Storage Service",
                "smithy.api#xmlNamespace": {
                    "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
                }
            }
        },
        "com.amazonaws.s3#BucketLocationConstraint": {
            "type": "enum",
            "members": {
                "us_west_2": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "us-west-2",
                        "smithy.api#suppress": [
                            "EnumShape"
                        ]
                    }
                }
            }
        },
        "com.amazonaws.s3#BucketName": {
            "type": "string"
        },
        "com.amazonaws.s3#CommonPrefix": {
            "type": "structure",
            "members": {
                "Prefix": {
                    "target": "com.amazonaws.s3#Prefix"
                }
            }
        },
        "com.amazonaws.s3#CommonPrefixList": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.s3#CommonPrefix"
            }
        },
        "com.amazonaws.s3#DeleteObjectTagging": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.s3#DeleteObjectTaggingRequest"
            },
            "output": {
                "target": "com.amazonaws.s3#DeleteObjectTaggingOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "DELETE",
                    "uri": "/{Bucket}/{Key+}?tagging",
                    "code": 204
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "S3EscapeObjectKeyInUriLabel",
                        "documentation": "    S3 clients should escape special characters in Object Keys\n    when the Object Key is used as a URI label binding.\n",
                        "protocol": "aws.protocols#restXml",
                        "method": "DELETE",
                        "uri": "/my%20key.txt",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "tagging"
                        ],
                        "params": {
                            "Bucket": "mybucket",
                            "Key": "my key.txt"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2"
                                }
                            }
                        }
                    },
                    {
                        "id": "S3EscapePathObjectKeyInUriLabel",
                        "documentation": "    S3 clients should preserve an Object Key representing a path\n    when the Object Key is used as a URI label binding, but still\n    escape special characters.\n",
                        "protocol": "aws.protocols#restXml",
                        "method": "DELETE",
                        "uri": "/foo/bar/my%20key.txt",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "tagging"
                        ],
                        "params": {
                            "Bucket": "mybucket",
                            "Key": "foo/bar/my key.txt"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "com.amazonaws.s3#DeleteObjectTaggingOutput": {
            "type": "structure",
            "members": {
                "VersionId": {
                    "target": "com.amazonaws.s3#ObjectVersionId",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-version-id"
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "com.amazonaws.s3#DeleteObjectTaggingRequest": {
            "type": "structure",
            "members": {
                "Bucket": {
                    "target": "com.amazonaws.s3#BucketName",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "Key": {
                    "target": "com.amazonaws.s3#ObjectKey",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "VersionId": {
                    "target": "com.amazonaws.s3#ObjectVersionId",
                    "traits": {
                        "smithy.api#httpQuery": "versionId"
                    }
                },
                "ExpectedBucketOwner": {
                    "target": "com.amazonaws.s3#AccountId",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-expected-bucket-owner"
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "com.amazonaws.s3#Delimiter": {
            "type": "string"
        },
        "com.amazonaws.s3#DisplayName": {
            "type": "string"
        },
        "com.amazonaws.s3#ETag": {
            "type": "string"
        },
        "com.amazonaws.s3#EncodingType": {
            "type": "enum",
            "members": {
                "url": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "url",
                        "smithy.api#suppress": [
                            "EnumShape"
                        ]
                    }
                }
            }
        },
        "com.amazonaws.s3#FetchOwner": {
            "type": "boolean"
        },
        "com.amazonaws.s3#GetBucketLocation": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.s3#GetBucketLocationRequest"
            },
            "output": {
                "target": "com.amazonaws.s3#GetBucketLocationOutput"
            },
            "traits": {
                "aws.customizations#s3UnwrappedXmlOutput": {},
                "smithy.api#http": {
                    "uri": "/{Bucket}?location",
                    "method": "GET"
                },
                "smithy.test#httpResponseTests": [
                    {
                        "id": "GetBucketLocationUnwrappedOutput",
                        "documentation": "    S3 clients should use the @s3UnwrappedXmlOutput trait to determine\n    that the response shape is not wrapped in a restxml operation-level XML node.\n",
                        "code": 200,
                        "body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<LocationConstraint xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">us-west-2</LocationConstraint>",
                        "params": {
                            "LocationConstraint": "us-west-2"
                        },
                        "protocol": "aws.protocols#restXml"
                    }
                ]
            }
        },
        "com.amazonaws.s3#GetBucketLocationOutput": {
            "type": "structure",
            "members": {
                "LocationConstraint": {
                    "target": "com.amazonaws.s3#BucketLocationConstraint"
                }
            },
            "traits": {
                "smithy.api#xmlName": "LocationConstraint"
            }
        },
        "com.amazonaws.s3#GetBucketLocationRequest": {
            "type": "structure",
            "members": {
                "Bucket": {
                    "target": "com.amazonaws.s3#BucketName",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "com.amazonaws.s3#GetObject": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.s3#GetObjectRequest"
            },
            "output": {
                "target": "com.amazonaws.s3#GetObjectOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/{Bucket}/{Key+}",
                    "method": "GET"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "S3PreservesLeadingDotSegmentInUriLabel",
                        "documentation": "    S3 clients should not remove dot segments from request paths.\n",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/../key.txt",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "tagging"
                        ],
                        "params": {
                            "Bucket": "mybucket",
                            "Key": "../key.txt"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "virtual"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "S3PreservesEmbeddedDotSegmentInUriLabel",
                        "documentation": "    S3 clients should not remove dot segments from request paths.\n",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "foo/../key.txt",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "tagging"
                        ],
                        "params": {
                            "Bucket": "mybucket",
                            "Key": "foo/../key.txt"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "virtual"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "com.amazonaws.s3#GetObjectOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "com.amazonaws.s3#GetObjectRequest": {
            "type": "structure",
            "members": {
                "Bucket": {
                    "target": "com.amazonaws.s3#BucketName",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "Key": {
                    "target": "com.amazonaws.s3#ObjectKey",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "com.amazonaws.s3#ID": {
            "type": "string"
        },
        "com.amazonaws.s3#IsTruncated": {
            "type": "boolean"
        },
        "com.amazonaws.s3#KeyCount": {
            "type": "integer"
        },
        "com.amazonaws.s3#LastModified": {
            "type": "timestamp"
        },
        "com.amazonaws.s3#ListObjectsV2": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.s3#ListObjectsV2Request"
            },
            "output": {
                "target": "com.amazonaws.s3#ListObjectsV2Output"
            },
            "errors": [
                {
                    "target": "com.amazonaws.s3#NoSuchBucket"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/{Bucket}?list-type=2",
                    "code": 200
                },
                "smithy.api#paginated": {
                    "inputToken": "ContinuationToken",
                    "outputToken": "NextContinuationToken",
                    "pageSize": "MaxKeys"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "S3DefaultAddressing",
                        "documentation": "S3 clients should map the default addressing style to virtual host.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2"
                                }
                            }
                        }
                    },
                    {
                        "id": "S3VirtualHostAddressing",
                        "documentation": "S3 clients should support the explicit virtual host addressing style.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "virtual"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "S3PathAddressing",
                        "documentation": "S3 clients should support the explicit path addressing style.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/mybucket",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "path"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "S3VirtualHostDualstackAddressing",
                        "documentation": "S3 clients should support the explicit virtual host\naddressing style with Dualstack.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.dualstack.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "virtual",
                                        "use_dualstack_endpoint": true
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "S3VirtualHostAccelerateAddressing",
                        "documentation": "S3 clients should support the explicit virtual host\naddressing style with S3 Accelerate.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3-accelerate.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "virtual",
                                        "use_accelerate_endpoint": true
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "S3VirtualHostDualstackAccelerateAddressing",
                        "documentation": "S3 clients should support the explicit virtual host\naddressing style with Dualstack and S3 Accelerate.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3-accelerate.dualstack.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "virtual",
                                        "use_dualstack_endpoint": true,
                                        "use_accelerate_endpoint": true
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "S3OperationAddressingPreferred",
                        "documentation": "S3 clients should resolve to the addressing style of the\noperation if defined on both the client and operation.",
                        "protocol": "aws.protocols#restXml",
                        "method": "GET",
                        "uri": "/",
                        "host": "s3.us-west-2.amazonaws.com",
                        "resolvedHost": "mybucket.s3.us-west-2.amazonaws.com",
                        "body": "",
                        "queryParams": [
                            "list-type=2"
                        ],
                        "params": {
                            "Bucket": "mybucket"
                        },
                        "vendorParamsShape": "aws.protocoltests.config#AwsConfig",
                        "vendorParams": {
                            "scopedConfig": {
                                "client": {
                                    "region": "us-west-2",
                                    "s3": {
                                        "addressing_style": "path"
                                    }
                                },
                                "operation": {
                                    "s3": {
                                        "addressing_style": "virtual"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "com.amazonaws.s3#ListObjectsV2Output": {
            "type": "structure",
            "members": {
                "IsTruncated": {
                    "target": "com.amazonaws.s3#IsTruncated"
                },
                "Contents": {
                    "target": "com.amazonaws.s3#ObjectList",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "Name": {
                    "target": "com.amazonaws.s3#BucketName"
                },
                "Prefix": {
                    "target": "com.amazonaws.s3#Prefix"
                },
                "Delimiter": {
                    "target": "com.amazonaws.s3#Delimiter"
                },
                "MaxKeys": {
                    "target": "com.amazonaws.s3#MaxKeys"
                },
                "CommonPrefixes": {
                    "target": "com.amazonaws.s3#CommonPrefixList",
                    "traits": {
                        "smithy.api#xmlFlattened": {}
                    }
                },
                "EncodingType": {
                    "target": "com.amazonaws.s3#EncodingType"
                },
                "KeyCount": {
                    "target": "com.amazonaws.s3#KeyCount"
                },
                "ContinuationToken": {
                    "target": "com.amazonaws.s3#Token"
                },
                "NextContinuationToken": {
                    "target": "com.amazonaws.s3#NextToken"
                },
                "StartAfter": {
                    "target": "com.amazonaws.s3#StartAfter"
                }
            }
        },
        "com.amazonaws.s3#ListObjectsV2Request": {
            "type": "structure",
            "members": {
                "Bucket": {
                    "target": "com.amazonaws.s3#BucketName",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "Delimiter": {
                    "target": "com.amazonaws.s3#Delimiter",
                    "traits": {
                        "smithy.api#httpQuery": "delimiter"
                    }
                },
                "EncodingType": {
                    "target": "com.amazonaws.s3#EncodingType",
                    "traits": {
                        "smithy.api#httpQuery": "encoding-type"
                    }
                },
                "MaxKeys": {
                    "target": "com.amazonaws.s3#MaxKeys",
                    "traits": {
                        "smithy.api#httpQuery": "max-keys"
                    }
                },
                "Prefix": {
                    "target": "com.amazonaws.s3#Prefix",
                    "traits": {
                        "smithy.api#httpQuery": "prefix"
                    }
                },
                "ContinuationToken": {
                    "target": "com.amazonaws.s3#Token",
                    "traits": {
                        "smithy.api#httpQuery": "continuation-token"
                    }
                },
                "FetchOwner": {
                    "target": "com.amazonaws.s3#FetchOwner",
                    "traits": {
                        "smithy.api#httpQuery": "fetch-owner"
                    }
                },
                "StartAfter": {
                    "target": "com.amazonaws.s3#StartAfter",
                    "traits": {
                        "smithy.api#httpQuery": "start-after"
                    }
                },
                "RequestPayer": {
                    "target": "com.amazonaws.s3#RequestPayer",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-request-payer"
                    }
                },
                "ExpectedBucketOwner": {
                    "target": "com.amazonaws.s3#AccountId",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-expected-bucket-owner"
                    }
                }
            }
        },
        "com.amazonaws.s3#MaxKeys": {
            "type": "integer"
        },
        "com.amazonaws.s3#NextToken": {
            "type": "string"
        },
        "com.amazonaws.s3#NoSuchBucket": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#error": "client",
                "smithy.test#httpResponseTests": [
                    {
                        "id": "S3OperationNoErrorWrappingResponse",
                        "documentation": "    S3 operations return Error XML nodes unwrapped by\n    the ErrorResponse XML node.\n",
                        "protocol": "aws.protocols#restXml",
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/xml"
                        },
                        "body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n\t<Type>Sender</Type>\n\t<Code>NoSuchBucket</Code>\n</Error>",
                        "bodyMediaType": "application/xml"
                    }
                ]
            }
        },
        "com.amazonaws.s3#Object": {
            "type": "structure",
            "members": {
                "Key": {
                    "target": "com.amazonaws.s3#ObjectKey"
                },
                "LastModified": {
                    "target": "com.amazonaws.s3#LastModified"
                },
                "ETag": {
                    "target": "com.amazonaws.s3#ETag"
                },
                "Size": {
                    "target": "com.amazonaws.s3#Size"
                },
                "StorageClass": {
                    "target": "com.amazonaws.s3#ObjectStorageClass"
                },
                "Owner": {
                    "target": "com.amazonaws.s3#Owner"
                }
            }
        },
        "com.amazonaws.s3#ObjectKey": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 1
                }
            }
        },
        "com.amazonaws.s3#ObjectList": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.s3#Object"
            }
        },
        "com.amazonaws.s3#ObjectStorageClass": {
            "type": "enum",
            "members": {
                "STANDARD": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "STANDARD"
                    }
                },
                "REDUCED_REDUNDANCY": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "REDUCED_REDUNDANCY"
                    }
                },
                "GLACIER": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "GLACIER"
                    }
                },
                "STANDARD_IA": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "STANDARD_IA"
                    }
                },
                "ONEZONE_IA": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "ONEZONE_IA"
                    }
                },
                "INTELLIGENT_TIERING": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "INTELLIGENT_TIERING"
                    }
                },
                "DEEP_ARCHIVE": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "DEEP_ARCHIVE"
                    }
                },
                "OUTPOSTS": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "OUTPOSTS"
                    }
                }
            }
        },
        "com.amazonaws.s3#ObjectVersionId": {
            "type": "string"
        },
        "com.amazonaws.s3#Owner": {
            "type": "structure",
            "members": {
                "DisplayName": {
                    "target": "com.amazonaws.s3#DisplayName"
                },
                "ID": {
                    "target": "com.amazonaws.s3#ID"
                }
            }
        },
        "com.amazonaws.s3#Prefix": {
            "type": "string"
        },
        "com.amazonaws.s3#RequestPayer": {
            "type": "enum",
            "members": {
                "requester": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#enumValue": "requester",
                        "smithy.api#suppress": [
                            "EnumShape"
                        ]
                    }
                }
            }
        },
        "com.amazonaws.s3#Size": {
            "type": "integer"
        },
        "com.amazonaws.s3#StartAfter": {
            "type": "string"
        },
        "com.amazonaws.s3#Token": {
            "type": "string"
        },
        "smithy.framework#ValidationException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A summary of the validation failure.",
                        "smithy.api#required": {}
                    }
                },
                "fieldList": {
                    "target": "smithy.framework#ValidationExceptionFieldList",
                    "traits": {
                        "smithy.api#documentation": "A list of specific failures encountered while validating the input.\nA member can appear in this list more than once if it failed to satisfy multiple constraints."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "A standard error for input validation failures.\nThis should be thrown by services when a member of the input structure\nfalls outside of the modeled or documented constraints.",
                "smithy.api#error": "client"
            }
        },
        "smithy.framework#ValidationExceptionField": {
            "type": "structure",
            "members": {
                "path": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.",
                        "smithy.api#required": {}
                    }
                },
                "message": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A detailed description of the validation failure.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Describes one specific validation failure for an input member."
            }
        },
        "smithy.framework#ValidationExceptionFieldList": {
            "type": "list",
            "member": {
                "target": "smithy.framework#ValidationExceptionField"
            }
        },
        "smithy.test#AppliesTo": {
            "type": "enum",
            "members": {
                "CLIENT": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "The test only applies to client implementations.",
                        "smithy.api#enumValue": "client"
                    }
                },
                "SERVER": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "The test only applies to server implementations.",
                        "smithy.api#enumValue": "server"
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedRequestDefinition": {
            "type": "structure",
            "members": {
                "method": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The HTTP request method.",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "uri": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The request-target of the HTTP request, not including\nthe query string (for example, \"/foo/bar\").",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "host": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The host / endpoint provided to the client, not including the path\nor scheme (for example, \"example.com\")."
                    }
                },
                "queryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of the serialized query string parameters to include in the request.\n\nEach element in the list is a query string key value pair\nthat starts with the query string parameter name optionally\nfollowed by \"=\", optionally followed by the query string\nparameter value. For example, \"foo=bar\", \"foo=\", and \"foo\"\nare all valid values. The query string parameter name and\nthe value MUST appear in the format in which it is expected\nto be sent over the wire; if a key or value needs to be\npercent-encoded, then it MUST appear percent-encoded in this list."
                    }
                },
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "Defines a map of HTTP headers to include in the request"
                    }
                },
                "body": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The HTTP message body to include in the request"
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedRequestTestCase": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The identifier of the test case. This identifier can be used by\nprotocol test implementations to filter out unsupported test\ncases by ID, to generate test case names, etc. The provided `id`\nMUST match Smithy's `identifier` ABNF. No two `httpMalformedRequestTests`\ntest cases can share the same ID.",
                        "smithy.api#pattern": "^[A-Za-z_][A-Za-z0-9_]+$",
                        "smithy.api#required": {}
                    }
                },
                "protocol": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The name of the protocol to test.",
                        "smithy.api#idRef": {
                            "selector": "[trait|protocolDefinition]",
                            "failWhenMissing": true
                        },
                        "smithy.api#required": {}
                    }
                },
                "request": {
                    "target": "smithy.test#HttpMalformedRequestDefinition",
                    "traits": {
                        "smithy.api#documentation": "The malformed request to send.",
                        "smithy.api#required": {}
                    }
                },
                "response": {
                    "target": "smithy.test#HttpMalformedResponseDefinition",
                    "traits": {
                        "smithy.api#documentation": "The expected response.",
                        "smithy.api#required": {}
                    }
                },
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A description of the test and what is being asserted."
                    }
                },
                "tags": {
                    "target": "smithy.test#NonEmptyStringList",
                    "traits": {
                        "smithy.api#documentation": "Applies a list of tags to the test."
                    }
                },
                "testParameters": {
                    "target": "smithy.test#HttpMalformedRequestTestParametersDefinition",
                    "traits": {
                        "smithy.api#documentation": "An optional set of test parameters for parameterized testing."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedRequestTestParametersDefinition": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.test#StringList"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedResponseBodyAssertion": {
            "type": "union",
            "members": {
                "contents": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines the expected serialized response body, which will be matched\nexactly."
                    }
                },
                "messageRegex": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A regex to evaluate against the `message` field in the body. For\nresponses that may have some variance from platform to platform,\nsuch as those that include messages from a parser."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedResponseBodyDefinition": {
            "type": "structure",
            "members": {
                "assertion": {
                    "target": "smithy.test#HttpMalformedResponseBodyAssertion",
                    "traits": {
                        "smithy.api#documentation": "The assertion to execute against the response body.",
                        "smithy.api#required": {}
                    }
                },
                "mediaType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The media type of the response body.\n\nThis is used to help test runners to parse and evaluate\n`contents' and `messageRegex` in the assertion",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedResponseDefinition": {
            "type": "structure",
            "members": {
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "Defines a map of expected HTTP headers.\n\nHeaders that are not listed in this map are ignored."
                    }
                },
                "code": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "Defines the HTTP response code.",
                        "smithy.api#range": {
                            "min": 100,
                            "max": 599
                        },
                        "smithy.api#required": {}
                    }
                },
                "body": {
                    "target": "smithy.test#HttpMalformedResponseBodyDefinition",
                    "traits": {
                        "smithy.api#documentation": "The expected response body."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpRequestTestCase": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The identifier of the test case. This identifier can be used by\nprotocol test implementations to filter out unsupported test\ncases by ID, to generate test case names, etc. The provided `id`\nMUST match Smithy's `identifier` ABNF. No two `httpRequestTests`\ntest cases can share the same ID.",
                        "smithy.api#pattern": "^[A-Za-z_][A-Za-z0-9_]+$",
                        "smithy.api#required": {}
                    }
                },
                "protocol": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The name of the protocol to test.",
                        "smithy.api#idRef": {
                            "selector": "[trait|protocolDefinition]",
                            "failWhenMissing": true
                        },
                        "smithy.api#required": {}
                    }
                },
                "method": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The expected serialized HTTP request method.",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "uri": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The request-target of the HTTP request, not including\nthe query string (for example, \"/foo/bar\").",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "host": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The host / endpoint provided to the client, not including the path\nor scheme (for example, \"example.com\")."
                    }
                },
                "resolvedHost": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The host / endpoint that the client should send to, not including\nthe path or scheme (for example, \"prefix.example.com\").\n\nThis can differ from the host provided to the client if the `hostPrefix`\nmember of the `endpoint` trait is set, for instance."
                    }
                },
                "authScheme": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The optional authentication scheme shape ID to assume. It's\npossible that specific authentication schemes might influence\nthe serialization logic of an HTTP request.",
                        "smithy.api#idRef": {
                            "selector": "[trait|authDefinition]",
                            "failWhenMissing": true
                        }
                    }
                },
                "queryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of the expected serialized query string parameters.\n\nEach element in the list is a query string key value pair\nthat starts with the query string parameter name optionally\nfollowed by \"=\", optionally followed by the query string\nparameter value. For example, \"foo=bar\", \"foo=\", and \"foo\"\nare all valid values. The query string parameter name and\nthe value MUST appear in the format in which it is expected\nto be sent over the wire; if a key or value needs to be\npercent-encoded, then it MUST appear percent-encoded in this list.\n\nA serialized HTTP request is not in compliance with the protocol\nif any query string parameter defined in `queryParams` is not\ndefined in the request or if the value of a query string parameter\nin the request differs from the expected value.\n\n`queryParams` applies no constraints on additional query parameters."
                    }
                },
                "forbidQueryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of query string parameter names that must not appear in the\nserialized HTTP request.\n\nEach value MUST appear in the format in which it is sent over the\nwire; if a key needs to be percent-encoded, then it MUST appear\npercent-encoded in this list."
                    }
                },
                "requireQueryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of query string parameter names that MUST appear in the\nserialized request URI, but no assertion is made on the value.\n\nEach value MUST appear in the format in which it is sent over the\nwire; if a key needs to be percent-encoded, then it MUST appear\npercent-encoded in this list."
                    }
                },
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "Defines a map of expected HTTP headers.\n\nHeaders that are not listed in this map are ignored unless they are\nexplicitly forbidden through `forbidHeaders`."
                    }
                },
                "forbidHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must not appear in the serialized\nHTTP request."
                    }
                },
                "requireHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must appear in the serialized\nHTTP message, but no assertion is made on the value.\n\nHeaders listed in `headers` do not need to appear in this list."
                    }
                },
                "body": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The expected HTTP message body.\n\nIf no request body is defined, then no assertions are made about\nthe body of the message."
                    }
                },
                "bodyMediaType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The media type of the `body`.\n\nThis is used to help test runners to parse and validate the expected\ndata against generated data."
                    }
                },
                "params": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines the input parameters used to generated the HTTP request.\n\nThese parameters MUST be compatible with the input of the operation."
                    }
                },
                "vendorParams": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines vendor-specific parameters that are used to influence the\nrequest. For example, some vendors might utilize environment\nvariables, configuration files on disk, or other means to influence\nthe serialization formats used by clients or servers.\n\nIf a `vendorParamsShape` is set, these parameters MUST be compatible\nwith that shape's definition."
                    }
                },
                "vendorParamsShape": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A shape to be used to validate the `vendorParams` member contents.\n\nIf set, the parameters in `vendorParams` MUST be compatible with this\nshape's definition.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true
                        }
                    }
                },
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A description of the test and what is being asserted."
                    }
                },
                "tags": {
                    "target": "smithy.test#NonEmptyStringList",
                    "traits": {
                        "smithy.api#documentation": "Applies a list of tags to the test."
                    }
                },
                "appliesTo": {
                    "target": "smithy.test#AppliesTo",
                    "traits": {
                        "smithy.api#documentation": "Indicates that the test case is only to be implemented by \"client\" or\n\"server\" implementations. This property is useful for identifying and\ntesting edge cases of clients and servers that are impossible or\nundesirable to test in *both* client and server implementations."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpResponseTestCase": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The identifier of the test case. This identifier can be used by\nprotocol test implementations to filter out unsupported test\ncases by ID, to generate test case names, etc. The provided `id`\nMUST match Smithy's `identifier` ABNF. No two `httpResponseTests`\ntest cases can share the same ID.",
                        "smithy.api#pattern": "^[A-Za-z_][A-Za-z0-9_]+$",
                        "smithy.api#required": {}
                    }
                },
                "protocol": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The shape ID of the protocol to test.",
                        "smithy.api#idRef": {
                            "selector": "[trait|protocolDefinition]",
                            "failWhenMissing": true
                        },
                        "smithy.api#required": {}
                    }
                },
                "code": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "Defines the HTTP response code.",
                        "smithy.api#range": {
                            "min": 100,
                            "max": 599
                        },
                        "smithy.api#required": {}
                    }
                },
                "authScheme": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The optional authentication scheme shape ID to assume. It's possible\nthat specific authentication schemes might influence the serialization\nlogic of an HTTP response.",
                        "smithy.api#idRef": {
                            "selector": "[trait|authDefinition]",
                            "failWhenMissing": true
                        }
                    }
                },
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "A map of expected HTTP headers. Each key represents a header field\nname and each value represents the expected header value. An HTTP\nresponse is not in compliance with the protocol if any listed header\nis missing from the serialized response or if the expected header\nvalue differs from the serialized response value.\n\n`headers` applies no constraints on additional headers."
                    }
                },
                "forbidHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must not appear."
                    }
                },
                "requireHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must appear in the serialized\nHTTP message, but no assertion is made on the value.\n\nHeaders listed in `headers` map do not need to appear in this list."
                    }
                },
                "body": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines the HTTP message body.\n\nIf no response body is defined, then no assertions are made about\nthe body of the message."
                    }
                },
                "bodyMediaType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The media type of the `body`.\n\nThis is used to help test runners to parse and validate the expected\ndata against generated data. Binary media type formats require that\nthe contents of `body` are base64 encoded."
                    }
                },
                "params": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines the output parameters deserialized from the HTTP response.\n\nThese parameters MUST be compatible with the output of the operation."
                    }
                },
                "vendorParams": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines vendor-specific parameters that are used to influence the\nresponse. For example, some vendors might utilize environment\nvariables, configuration files on disk, or other means to influence\nthe serialization formats used by clients or servers.\n\nIf a `vendorParamsShape` is set, these parameters MUST be compatible\nwith that shape's definition."
                    }
                },
                "vendorParamsShape": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A shape to be used to validate the `vendorParams` member contents.\n\nIf set, the parameters in `vendorParams` MUST be compatible with this\nshape's definition.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true
                        }
                    }
                },
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A description of the test and what is being asserted."
                    }
                },
                "tags": {
                    "target": "smithy.test#NonEmptyStringList",
                    "traits": {
                        "smithy.api#documentation": "Applies a list of tags to the test."
                    }
                },
                "appliesTo": {
                    "target": "smithy.test#AppliesTo",
                    "traits": {
                        "smithy.api#documentation": "Indicates that the test case is only to be implemented by \"client\" or\n\"server\" implementations. This property is useful for identifying and\ntesting edge cases of clients and servers that are impossible or\nundesirable to test in *both* client and server implementations."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#NonEmptyString": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#private": {}
            }
        },
        "smithy.test#NonEmptyStringList": {
            "type": "list",
            "member": {
                "target": "smithy.test#NonEmptyString"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#StringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#httpMalformedRequestTests": {
            "type": "list",
            "member": {
                "target": "smithy.test#HttpMalformedRequestTestCase"
            },
            "traits": {
                "smithy.api#documentation": "Define how a malformed HTTP request is rejected by a server given a specific protocol",
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#trait": {
                    "selector": "operation"
                },
                "smithy.api#unstable": {}
            }
        },
        "smithy.test#httpRequestTests": {
            "type": "list",
            "member": {
                "target": "smithy.test#HttpRequestTestCase"
            },
            "traits": {
                "smithy.api#documentation": "Define how an HTTP request is serialized given a specific protocol,\nauthentication scheme, and set of input parameters.",
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "smithy.test#httpResponseTests": {
            "type": "list",
            "member": {
                "target": "smithy.test#HttpResponseTestCase"
            },
            "traits": {
                "smithy.api#documentation": "Define how an HTTP response is serialized given a specific protocol,\nauthentication scheme, and set of output or error parameters.",
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#trait": {
                    "selector": ":test(operation, structure[trait|error])"
                }
            }
        }
    }
}
