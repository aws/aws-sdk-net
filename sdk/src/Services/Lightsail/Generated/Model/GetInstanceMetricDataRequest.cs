/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the lightsail-2016-11-28.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

namespace Amazon.Lightsail.Model
{
    /// <summary>
    /// Container for the parameters to the GetInstanceMetricData operation.
    /// Returns the data points for the specified Amazon Lightsail instance metric, given
    /// an instance name.
    /// 
    ///  
    /// <para>
    /// Metrics report the utilization of your resources, and the error counts generated by
    /// them. Monitor and collect metric data regularly to maintain the reliability, availability,
    /// and performance of your resources.
    /// </para>
    /// </summary>
    public partial class GetInstanceMetricDataRequest : AmazonLightsailRequest
    {
        private DateTime? _endTime;
        private string _instanceName;
        private InstanceMetricName _metricName;
        private int? _period;
        private DateTime? _startTime;
        private List<string> _statistics = AWSConfigs.InitializeCollections ? new List<string>() : null;
        private MetricUnit _unit;

        /// <summary>
        /// Gets and sets the property EndTime. 
        /// <para>
        /// The end time of the time period.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public DateTime EndTime
        {
            get { return this._endTime.GetValueOrDefault(); }
            set { this._endTime = value; }
        }

        // Check to see if EndTime property is set
        internal bool IsSetEndTime()
        {
            return this._endTime.HasValue; 
        }

        /// <summary>
        /// Gets and sets the property InstanceName. 
        /// <para>
        /// The name of the instance for which you want to get metrics data.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public string InstanceName
        {
            get { return this._instanceName; }
            set { this._instanceName = value; }
        }

        // Check to see if InstanceName property is set
        internal bool IsSetInstanceName()
        {
            return this._instanceName != null;
        }

        /// <summary>
        /// Gets and sets the property MetricName. 
        /// <para>
        /// The metric for which you want to return information.
        /// </para>
        ///  
        /// <para>
        /// Valid instance metric names are listed below, along with the most useful <c>statistics</c>
        /// to include in your request, and the published <c>unit</c> value.
        /// </para>
        ///  <ul> <li> 
        /// <para>
        ///  <b> <c>BurstCapacityPercentage</c> </b> - The percentage of CPU performance available
        /// for your instance to burst above its baseline. Your instance continuously accrues
        /// and consumes burst capacity. Burst capacity stops accruing when your instance's <c>BurstCapacityPercentage</c>
        /// reaches 100%. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing
        /// instance burst capacity in Amazon Lightsail</a>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistics are <c>Maximum</c> and <c>Average</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Percent</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>BurstCapacityTime</c> </b> - The available amount of time for your instance
        /// to burst at 100% CPU utilization. Your instance continuously accrues and consumes
        /// burst capacity. Burst capacity time stops accruing when your instance's <c>BurstCapacityPercentage</c>
        /// metric reaches 100%.
        /// </para>
        ///  
        /// <para>
        /// Burst capacity time is consumed at the full rate only when your instance operates
        /// at 100% CPU utilization. For example, if your instance operates at 50% CPU utilization
        /// in the burstable zone for a 5-minute period, then it consumes CPU burst capacity minutes
        /// at a 50% rate in that period. Your instance consumed 2 minutes and 30 seconds of CPU
        /// burst capacity minutes in the 5-minute period. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing
        /// instance burst capacity in Amazon Lightsail</a>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistics are <c>Maximum</c> and <c>Average</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Seconds</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>CPUUtilization</c> </b> - The percentage of allocated compute units that are
        /// currently in use on the instance. This metric identifies the processing power to run
        /// the applications on the instance. Tools in your operating system can show a lower
        /// percentage than Lightsail when the instance is not allocated a full processor core.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistics are <c>Maximum</c> and <c>Average</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Percent</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>NetworkIn</c> </b> - The number of bytes received on all network interfaces
        /// by the instance. This metric identifies the volume of incoming network traffic to
        /// the instance. The number reported is the number of bytes received during the period.
        /// Because this metric is reported in 5-minute intervals, divide the reported number
        /// by 300 to find Bytes/second.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistic is <c>Sum</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Bytes</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>NetworkOut</c> </b> - The number of bytes sent out on all network interfaces
        /// by the instance. This metric identifies the volume of outgoing network traffic from
        /// the instance. The number reported is the number of bytes sent during the period. Because
        /// this metric is reported in 5-minute intervals, divide the reported number by 300 to
        /// find Bytes/second.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistic is <c>Sum</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Bytes</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>StatusCheckFailed</c> </b> - Reports whether the instance passed or failed
        /// both the instance status check and the system status check. This metric can be either
        /// 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistic is <c>Sum</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Count</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>StatusCheckFailed_Instance</c> </b> - Reports whether the instance passed
        /// or failed the instance status check. This metric can be either 0 (passed) or 1 (failed).
        /// This metric data is available in 1-minute (60 seconds) granularity.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistic is <c>Sum</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Count</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>StatusCheckFailed_System</c> </b> - Reports whether the instance passed or
        /// failed the system status check. This metric can be either 0 (passed) or 1 (failed).
        /// This metric data is available in 1-minute (60 seconds) granularity.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistic is <c>Sum</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Count</c>.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <b> <c>MetadataNoToken</c> </b> - Reports the number of times that the instance metadata
        /// service was successfully accessed without a token. This metric determines if there
        /// are any processes accessing instance metadata by using Instance Metadata Service Version
        /// 1, which doesn't use a token. If all requests use token-backed sessions, such as Instance
        /// Metadata Service Version 2, then the value is 0.
        /// </para>
        ///  
        /// <para>
        ///  <c>Statistics</c>: The most useful statistic is <c>Sum</c>.
        /// </para>
        ///  
        /// <para>
        ///  <c>Unit</c>: The published unit is <c>Count</c>.
        /// </para>
        ///  </li> </ul>
        /// </summary>
        [AWSProperty(Required=true)]
        public InstanceMetricName MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }

        // Check to see if MetricName property is set
        internal bool IsSetMetricName()
        {
            return this._metricName != null;
        }

        /// <summary>
        /// Gets and sets the property Period. 
        /// <para>
        /// The granularity, in seconds, of the returned data points.
        /// </para>
        ///  
        /// <para>
        /// The <c>StatusCheckFailed</c>, <c>StatusCheckFailed_Instance</c>, and <c>StatusCheckFailed_System</c>
        /// instance metric data is available in 1-minute (60 seconds) granularity. All other
        /// instance metric data is available in 5-minute (300 seconds) granularity.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Min=60, Max=86400)]
        public int Period
        {
            get { return this._period.GetValueOrDefault(); }
            set { this._period = value; }
        }

        // Check to see if Period property is set
        internal bool IsSetPeriod()
        {
            return this._period.HasValue; 
        }

        /// <summary>
        /// Gets and sets the property StartTime. 
        /// <para>
        /// The start time of the time period.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public DateTime StartTime
        {
            get { return this._startTime.GetValueOrDefault(); }
            set { this._startTime = value; }
        }

        // Check to see if StartTime property is set
        internal bool IsSetStartTime()
        {
            return this._startTime.HasValue; 
        }

        /// <summary>
        /// Gets and sets the property Statistics. 
        /// <para>
        /// The statistic for the metric.
        /// </para>
        ///  
        /// <para>
        /// The following statistics are available:
        /// </para>
        ///  <ul> <li> 
        /// <para>
        ///  <c>Minimum</c> - The lowest value observed during the specified period. Use this
        /// value to determine low volumes of activity for your application.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <c>Maximum</c> - The highest value observed during the specified period. Use this
        /// value to determine high volumes of activity for your application.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <c>Sum</c> - All values submitted for the matching metric added together. You can
        /// use this statistic to determine the total volume of a metric.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <c>Average</c> - The value of Sum / SampleCount during the specified period. By comparing
        /// this statistic with the Minimum and Maximum values, you can determine the full scope
        /// of a metric and how close the average use is to the Minimum and Maximum values. This
        /// comparison helps you to know when to increase or decrease your resources.
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <c>SampleCount</c> - The count, or number, of data points used for the statistical
        /// calculation.
        /// </para>
        ///  </li> </ul>
        /// </summary>
        [AWSProperty(Required=true)]
        public List<string> Statistics
        {
            get { return this._statistics; }
            set { this._statistics = value; }
        }

        // Check to see if Statistics property is set
        internal bool IsSetStatistics()
        {
            return this._statistics != null && (this._statistics.Count > 0 || !AWSConfigs.InitializeCollections); 
        }

        /// <summary>
        /// Gets and sets the property Unit. 
        /// <para>
        /// The unit for the metric data request. Valid units depend on the metric data being
        /// requested. For the valid units to specify with each available metric, see the <c>metricName</c>
        /// parameter.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public MetricUnit Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }

        // Check to see if Unit property is set
        internal bool IsSetUnit()
        {
            return this._unit != null;
        }

    }
}