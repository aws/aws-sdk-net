/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the securityhub-2018-10-26.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml.Serialization;

using Amazon.SecurityHub.Model;
using Amazon.Runtime;
using Amazon.Runtime.Internal;
using Amazon.Runtime.Internal.Transform;
using Amazon.Runtime.Internal.Util;
#pragma warning disable CS0612,CS0618
namespace Amazon.SecurityHub.Model.Internal.MarshallTransformations
{
    /// <summary>
    /// Vulnerability Marshaller
    /// </summary>
    public class VulnerabilityMarshaller : IRequestMarshaller<Vulnerability, JsonMarshallerContext> 
    {
        /// <summary>
        /// Unmarshaller the response from the service to the response class.
        /// </summary>  
        /// <param name="requestObject"></param>
        /// <param name="context"></param>
        /// <returns></returns>
        public void Marshall(Vulnerability requestObject, JsonMarshallerContext context)
        {
            if(requestObject == null)
                return;
            if(requestObject.IsSetCodeVulnerabilities())
            {
                context.Writer.WritePropertyName("CodeVulnerabilities");
                context.Writer.WriteStartArray();
                foreach(var requestObjectCodeVulnerabilitiesListValue in requestObject.CodeVulnerabilities)
                {
                    context.Writer.WriteStartObject();

                    var marshaller = VulnerabilityCodeVulnerabilitiesMarshaller.Instance;
                    marshaller.Marshall(requestObjectCodeVulnerabilitiesListValue, context);

                    context.Writer.WriteEndObject();
                }
                context.Writer.WriteEndArray();
            }

            if(requestObject.IsSetCvss())
            {
                context.Writer.WritePropertyName("Cvss");
                context.Writer.WriteStartArray();
                foreach(var requestObjectCvssListValue in requestObject.Cvss)
                {
                    context.Writer.WriteStartObject();

                    var marshaller = CvssMarshaller.Instance;
                    marshaller.Marshall(requestObjectCvssListValue, context);

                    context.Writer.WriteEndObject();
                }
                context.Writer.WriteEndArray();
            }

            if(requestObject.IsSetEpssScore())
            {
                context.Writer.WritePropertyName("EpssScore");
                if(StringUtils.IsSpecialDoubleValue(requestObject.EpssScore.Value))
                {
                    context.Writer.WriteStringValue(StringUtils.FromSpecialDoubleValue(requestObject.EpssScore.Value));
                }
                else
                {
                    context.Writer.WriteNumberValue(requestObject.EpssScore.Value);
                }
            }

            if(requestObject.IsSetExploitAvailable())
            {
                context.Writer.WritePropertyName("ExploitAvailable");
                context.Writer.WriteStringValue(requestObject.ExploitAvailable);
            }

            if(requestObject.IsSetFixAvailable())
            {
                context.Writer.WritePropertyName("FixAvailable");
                context.Writer.WriteStringValue(requestObject.FixAvailable);
            }

            if(requestObject.IsSetId())
            {
                context.Writer.WritePropertyName("Id");
                context.Writer.WriteStringValue(requestObject.Id);
            }

            if(requestObject.IsSetLastKnownExploitAt())
            {
                context.Writer.WritePropertyName("LastKnownExploitAt");
                context.Writer.WriteStringValue(requestObject.LastKnownExploitAt);
            }

            if(requestObject.IsSetReferenceUrls())
            {
                context.Writer.WritePropertyName("ReferenceUrls");
                context.Writer.WriteStartArray();
                foreach(var requestObjectReferenceUrlsListValue in requestObject.ReferenceUrls)
                {
                        context.Writer.WriteStringValue(requestObjectReferenceUrlsListValue);
                }
                context.Writer.WriteEndArray();
            }

            if(requestObject.IsSetRelatedVulnerabilities())
            {
                context.Writer.WritePropertyName("RelatedVulnerabilities");
                context.Writer.WriteStartArray();
                foreach(var requestObjectRelatedVulnerabilitiesListValue in requestObject.RelatedVulnerabilities)
                {
                        context.Writer.WriteStringValue(requestObjectRelatedVulnerabilitiesListValue);
                }
                context.Writer.WriteEndArray();
            }

            if(requestObject.IsSetVendor())
            {
                context.Writer.WritePropertyName("Vendor");
                context.Writer.WriteStartObject();

                var marshaller = VulnerabilityVendorMarshaller.Instance;
                marshaller.Marshall(requestObject.Vendor, context);

                context.Writer.WriteEndObject();
            }

            if(requestObject.IsSetVulnerablePackages())
            {
                context.Writer.WritePropertyName("VulnerablePackages");
                context.Writer.WriteStartArray();
                foreach(var requestObjectVulnerablePackagesListValue in requestObject.VulnerablePackages)
                {
                    context.Writer.WriteStartObject();

                    var marshaller = SoftwarePackageMarshaller.Instance;
                    marshaller.Marshall(requestObjectVulnerablePackagesListValue, context);

                    context.Writer.WriteEndObject();
                }
                context.Writer.WriteEndArray();
            }

        }

        /// <summary>
        /// Singleton Marshaller.
        /// </summary>
        public readonly static VulnerabilityMarshaller Instance = new VulnerabilityMarshaller();

    }
}