/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the mturk-requester-2017-01-17.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

namespace Amazon.MTurk.Model
{
    /// <summary>
    /// Container for the parameters to the CreateHITWithHITType operation.
    /// The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence
    /// Task (HIT) using an existing HITTypeID generated by the <code>CreateHITType</code>
    /// operation. 
    /// 
    ///  
    /// <para>
    ///  This is an alternative way to create HITs from the <code>CreateHIT</code> operation.
    /// This is the recommended best practice for Requesters who are creating large numbers
    /// of HITs. 
    /// </para>
    ///  
    /// <para>
    /// CreateHITWithHITType also supports several ways to provide question data: by providing
    /// a value for the <code>Question</code> parameter that fully specifies the contents
    /// of the HIT, or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
    /// 
    /// </para>
    ///  <note> 
    /// <para>
    ///  If a HIT is created with 10 or more maximum assignments, there is an additional fee.
    /// For more information, see <a href="https://requester.mturk.com/pricing">Amazon Mechanical
    /// Turk Pricing</a>. 
    /// </para>
    ///  </note>
    /// </summary>
    public partial class CreateHITWithHITTypeRequest : AmazonMTurkRequest
    {
        private ReviewPolicy _assignmentReviewPolicy;
        private string _hitLayoutId;
        private List<HITLayoutParameter> _hitLayoutParameters = new List<HITLayoutParameter>();
        private ReviewPolicy _hitReviewPolicy;
        private string _hitTypeId;
        private long? _lifetimeInSeconds;
        private int? _maxAssignments;
        private string _question;
        private string _requesterAnnotation;
        private string _uniqueRequestToken;

        /// <summary>
        /// Gets and sets the property AssignmentReviewPolicy. 
        /// <para>
        ///  The Assignment-level Review Policy applies to the assignments under the HIT. You
        /// can specify for Mechanical Turk to take various actions based on the policy. 
        /// </para>
        /// </summary>
        public ReviewPolicy AssignmentReviewPolicy
        {
            get { return this._assignmentReviewPolicy; }
            set { this._assignmentReviewPolicy = value; }
        }

        // Check to see if AssignmentReviewPolicy property is set
        internal bool IsSetAssignmentReviewPolicy()
        {
            return this._assignmentReviewPolicy != null;
        }

        /// <summary>
        /// Gets and sets the property HITLayoutId. 
        /// <para>
        ///  The HITLayoutId allows you to use a pre-existing HIT design with placeholder values
        /// and create an additional HIT by providing those values as HITLayoutParameters. 
        /// </para>
        ///  
        /// <para>
        ///  Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
        /// 
        /// </para>
        /// </summary>
        [AWSProperty(Min=1, Max=64)]
        public string HITLayoutId
        {
            get { return this._hitLayoutId; }
            set { this._hitLayoutId = value; }
        }

        // Check to see if HITLayoutId property is set
        internal bool IsSetHITLayoutId()
        {
            return this._hitLayoutId != null;
        }

        /// <summary>
        /// Gets and sets the property HITLayoutParameters. 
        /// <para>
        ///  If the HITLayoutId is provided, any placeholder values must be filled in with values
        /// using the HITLayoutParameter structure. For more information, see HITLayout. 
        /// </para>
        /// </summary>
        public List<HITLayoutParameter> HITLayoutParameters
        {
            get { return this._hitLayoutParameters; }
            set { this._hitLayoutParameters = value; }
        }

        // Check to see if HITLayoutParameters property is set
        internal bool IsSetHITLayoutParameters()
        {
            return this._hitLayoutParameters != null && this._hitLayoutParameters.Count > 0; 
        }

        /// <summary>
        /// Gets and sets the property HITReviewPolicy. 
        /// <para>
        ///  The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk
        /// to take various actions based on the policy. 
        /// </para>
        /// </summary>
        public ReviewPolicy HITReviewPolicy
        {
            get { return this._hitReviewPolicy; }
            set { this._hitReviewPolicy = value; }
        }

        // Check to see if HITReviewPolicy property is set
        internal bool IsSetHITReviewPolicy()
        {
            return this._hitReviewPolicy != null;
        }

        /// <summary>
        /// Gets and sets the property HITTypeId. 
        /// <para>
        /// The HIT type ID you want to create this HIT with.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Min=1, Max=64)]
        public string HITTypeId
        {
            get { return this._hitTypeId; }
            set { this._hitTypeId = value; }
        }

        // Check to see if HITTypeId property is set
        internal bool IsSetHITTypeId()
        {
            return this._hitTypeId != null;
        }

        /// <summary>
        /// Gets and sets the property LifetimeInSeconds. 
        /// <para>
        ///  An amount of time, in seconds, after which the HIT is no longer available for users
        /// to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT
        /// searches, even if not all of the assignments for the HIT have been accepted. 
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public long LifetimeInSeconds
        {
            get { return this._lifetimeInSeconds.GetValueOrDefault(); }
            set { this._lifetimeInSeconds = value; }
        }

        // Check to see if LifetimeInSeconds property is set
        internal bool IsSetLifetimeInSeconds()
        {
            return this._lifetimeInSeconds.HasValue; 
        }

        /// <summary>
        /// Gets and sets the property MaxAssignments. 
        /// <para>
        ///  The number of times the HIT can be accepted and completed before the HIT becomes
        /// unavailable. 
        /// </para>
        /// </summary>
        public int MaxAssignments
        {
            get { return this._maxAssignments.GetValueOrDefault(); }
            set { this._maxAssignments = value; }
        }

        // Check to see if MaxAssignments property is set
        internal bool IsSetMaxAssignments()
        {
            return this._maxAssignments.HasValue; 
        }

        /// <summary>
        /// Gets and sets the property Question. 
        /// <para>
        ///  The data the person completing the HIT uses to produce the results. 
        /// </para>
        ///  
        /// <para>
        ///  Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure,
        /// or an HTMLQuestion data structure. The XML question data must not be larger than 64
        /// kilobytes (65,535 bytes) in size, including whitespace. 
        /// </para>
        ///  
        /// <para>
        /// Either a Question parameter or a HITLayoutId parameter must be provided.
        /// </para>
        /// </summary>
        public string Question
        {
            get { return this._question; }
            set { this._question = value; }
        }

        // Check to see if Question property is set
        internal bool IsSetQuestion()
        {
            return this._question != null;
        }

        /// <summary>
        /// Gets and sets the property RequesterAnnotation. 
        /// <para>
        ///  An arbitrary data field. The RequesterAnnotation parameter lets your application
        /// attach arbitrary data to the HIT for tracking purposes. For example, this parameter
        /// could be an identifier internal to the Requester's application that corresponds with
        /// the HIT. 
        /// </para>
        ///  
        /// <para>
        ///  The RequesterAnnotation parameter for a HIT is only visible to the Requester who
        /// created the HIT. It is not shown to the Worker, or any other Requester. 
        /// </para>
        ///  
        /// <para>
        ///  The RequesterAnnotation parameter may be different for each HIT you submit. It does
        /// not affect how your HITs are grouped. 
        /// </para>
        /// </summary>
        public string RequesterAnnotation
        {
            get { return this._requesterAnnotation; }
            set { this._requesterAnnotation = value; }
        }

        // Check to see if RequesterAnnotation property is set
        internal bool IsSetRequesterAnnotation()
        {
            return this._requesterAnnotation != null;
        }

        /// <summary>
        /// Gets and sets the property UniqueRequestToken. 
        /// <para>
        ///  A unique identifier for this request which allows you to retry the call on error
        /// without creating duplicate HITs. This is useful in cases such as network timeouts
        /// where it is unclear whether or not the call succeeded on the server. If the HIT already
        /// exists in the system from a previous call using the same UniqueRequestToken, subsequent
        /// calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing
        /// the HITId. 
        /// </para>
        ///  <note> 
        /// <para>
        ///  Note: It is your responsibility to ensure uniqueness of the token. The unique token
        /// expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after
        /// the 24 hour limit could create duplicate HITs. 
        /// </para>
        ///  </note>
        /// </summary>
        [AWSProperty(Min=1, Max=64)]
        public string UniqueRequestToken
        {
            get { return this._uniqueRequestToken; }
            set { this._uniqueRequestToken = value; }
        }

        // Check to see if UniqueRequestToken property is set
        internal bool IsSetUniqueRequestToken()
        {
            return this._uniqueRequestToken != null;
        }

    }
}