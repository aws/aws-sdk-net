/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the forecast-2018-06-26.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

#pragma warning disable CS0612,CS0618,CS1570
namespace Amazon.ForecastService.Model
{
    /// <summary>
    /// Container for the parameters to the CreateForecast operation.
    /// Creates a forecast for each item in the <c>TARGET_TIME_SERIES</c> dataset that was
    /// used to train the predictor. This is known as inference. To retrieve the forecast
    /// for a single item at low latency, use the operation. To export the complete forecast
    /// into your Amazon Simple Storage Service (Amazon S3) bucket, use the <a>CreateForecastExportJob</a>
    /// operation.
    /// 
    ///  
    /// <para>
    /// The range of the forecast is determined by the <c>ForecastHorizon</c> value, which
    /// you specify in the <a>CreatePredictor</a> request. When you query a forecast, you
    /// can request a specific date range within the forecast.
    /// </para>
    ///  
    /// <para>
    /// To get a list of all your forecasts, use the <a>ListForecasts</a> operation.
    /// </para>
    ///  <note> 
    /// <para>
    /// The forecasts generated by Amazon Forecast are in the same time zone as the dataset
    /// that was used to create the predictor.
    /// </para>
    ///  </note> 
    /// <para>
    /// For more information, see <a>howitworks-forecast</a>.
    /// </para>
    ///  <note> 
    /// <para>
    /// The <c>Status</c> of the forecast must be <c>ACTIVE</c> before you can query or export
    /// the forecast. Use the <a>DescribeForecast</a> operation to get the status.
    /// </para>
    ///  </note> 
    /// <para>
    /// By default, a forecast includes predictions for every item (<c>item_id</c>) in the
    /// dataset group that was used to train the predictor. However, you can use the <c>TimeSeriesSelector</c>
    /// object to generate a forecast on a subset of time series. Forecast creation is skipped
    /// for any time series that you specify that are not in the input dataset. The forecast
    /// export file will not contain these time series or their forecasted values.
    /// </para>
    /// </summary>
    public partial class CreateForecastRequest : AmazonForecastServiceRequest
    {
        private string _forecastName;
        private List<string> _forecastTypes = AWSConfigs.InitializeCollections ? new List<string>() : null;
        private string _predictorArn;
        private List<Tag> _tags = AWSConfigs.InitializeCollections ? new List<Tag>() : null;
        private TimeSeriesSelector _timeSeriesSelector;

        /// <summary>
        /// Gets and sets the property ForecastName. 
        /// <para>
        /// A name for the forecast.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Min=1, Max=63)]
        public string ForecastName
        {
            get { return this._forecastName; }
            set { this._forecastName = value; }
        }

        // Check to see if ForecastName property is set
        internal bool IsSetForecastName()
        {
            return this._forecastName != null;
        }

        /// <summary>
        /// Gets and sets the property ForecastTypes. 
        /// <para>
        /// The quantiles at which probabilistic forecasts are generated. <b>You can currently
        /// specify up to 5 quantiles per forecast</b>. Accepted values include <c>0.01 to 0.99</c>
        /// (increments of .01 only) and <c>mean</c>. The mean forecast is different from the
        /// median (0.50) when the distribution is not symmetric (for example, Beta and Negative
        /// Binomial). 
        /// </para>
        ///  
        /// <para>
        /// The default quantiles are the quantiles you specified during predictor creation. If
        /// you didn't specify quantiles, the default values are <c>["0.1", "0.5", "0.9"]</c>.
        /// 
        /// </para>
        /// </summary>
        [AWSProperty(Min=1, Max=20)]
        public List<string> ForecastTypes
        {
            get { return this._forecastTypes; }
            set { this._forecastTypes = value; }
        }

        // Check to see if ForecastTypes property is set
        internal bool IsSetForecastTypes()
        {
            return this._forecastTypes != null && (this._forecastTypes.Count > 0 || !AWSConfigs.InitializeCollections); 
        }

        /// <summary>
        /// Gets and sets the property PredictorArn. 
        /// <para>
        /// The Amazon Resource Name (ARN) of the predictor to use to generate the forecast.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Max=256)]
        public string PredictorArn
        {
            get { return this._predictorArn; }
            set { this._predictorArn = value; }
        }

        // Check to see if PredictorArn property is set
        internal bool IsSetPredictorArn()
        {
            return this._predictorArn != null;
        }

        /// <summary>
        /// Gets and sets the property Tags. 
        /// <para>
        /// The optional metadata that you apply to the forecast to help you categorize and organize
        /// them. Each tag consists of a key and an optional value, both of which you define.
        /// </para>
        ///  
        /// <para>
        /// The following basic restrictions apply to tags:
        /// </para>
        ///  <ul> <li> 
        /// <para>
        /// Maximum number of tags per resource - 50.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// For each resource, each tag key must be unique, and each tag key can have only one
        /// value.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Maximum key length - 128 Unicode characters in UTF-8.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Maximum value length - 256 Unicode characters in UTF-8.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// If your tagging schema is used across multiple services and resources, remember that
        /// other services may have restrictions on allowed characters. Generally allowed characters
        /// are: letters, numbers, and spaces representable in UTF-8, and the following characters:
        /// + - = . _ : / @.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Tag keys and values are case sensitive.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Do not use <c>aws:</c>, <c>AWS:</c>, or any upper or lowercase combination of such
        /// as a prefix for keys as it is reserved for Amazon Web Services use. You cannot edit
        /// or delete tag keys with this prefix. Values can have this prefix. If a tag value has
        /// <c>aws</c> as its prefix but the key does not, then Forecast considers it to be a
        /// user tag and will count against the limit of 50 tags. Tags with only the key prefix
        /// of <c>aws</c> do not count against your tags per resource limit.
        /// </para>
        ///  </li> </ul>
        /// </summary>
        [AWSProperty(Min=0, Max=200)]
        public List<Tag> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }

        // Check to see if Tags property is set
        internal bool IsSetTags()
        {
            return this._tags != null && (this._tags.Count > 0 || !AWSConfigs.InitializeCollections); 
        }

        /// <summary>
        /// Gets and sets the property TimeSeriesSelector. 
        /// <para>
        /// Defines the set of time series that are used to create the forecasts in a <c>TimeSeriesIdentifiers</c>
        /// object.
        /// </para>
        ///  
        /// <para>
        /// The <c>TimeSeriesIdentifiers</c> object needs the following information:
        /// </para>
        ///  <ul> <li> 
        /// <para>
        ///  <c>DataSource</c> 
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <c>Format</c> 
        /// </para>
        ///  </li> <li> 
        /// <para>
        ///  <c>Schema</c> 
        /// </para>
        ///  </li> </ul>
        /// </summary>
        public TimeSeriesSelector TimeSeriesSelector
        {
            get { return this._timeSeriesSelector; }
            set { this._timeSeriesSelector = value; }
        }

        // Check to see if TimeSeriesSelector property is set
        internal bool IsSetTimeSeriesSelector()
        {
            return this._timeSeriesSelector != null;
        }

    }
}