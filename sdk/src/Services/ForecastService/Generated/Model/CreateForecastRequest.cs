/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the forecast-2018-06-26.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

namespace Amazon.ForecastService.Model
{
    /// <summary>
    /// Container for the parameters to the CreateForecast operation.
    /// Creates a forecast for each item in the <code>TARGET_TIME_SERIES</code> dataset that
    /// was used to train the predictor. This is known as inference. To retrieve the forecast
    /// for a single item at low latency, use the operation. To export the complete forecast
    /// into your Amazon Simple Storage Service (Amazon S3) bucket, use the <a>CreateForecastExportJob</a>
    /// operation.
    /// 
    ///  
    /// <para>
    /// The range of the forecast is determined by the <code>ForecastHorizon</code> value,
    /// which you specify in the <a>CreatePredictor</a> request. When you query a forecast,
    /// you can request a specific date range within the forecast.
    /// </para>
    ///  
    /// <para>
    /// To get a list of all your forecasts, use the <a>ListForecasts</a> operation.
    /// </para>
    ///  <note> 
    /// <para>
    /// The forecasts generated by Amazon Forecast are in the same time zone as the dataset
    /// that was used to create the predictor.
    /// </para>
    ///  </note> 
    /// <para>
    /// For more information, see <a>howitworks-forecast</a>.
    /// </para>
    ///  <note> 
    /// <para>
    /// The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can
    /// query or export the forecast. Use the <a>DescribeForecast</a> operation to get the
    /// status.
    /// </para>
    ///  </note>
    /// </summary>
    public partial class CreateForecastRequest : AmazonForecastServiceRequest
    {
        private string _forecastName;
        private List<string> _forecastTypes = new List<string>();
        private string _predictorArn;
        private List<Tag> _tags = new List<Tag>();

        /// <summary>
        /// Gets and sets the property ForecastName. 
        /// <para>
        /// A name for the forecast.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Min=1, Max=63)]
        public string ForecastName
        {
            get { return this._forecastName; }
            set { this._forecastName = value; }
        }

        // Check to see if ForecastName property is set
        internal bool IsSetForecastName()
        {
            return this._forecastName != null;
        }

        /// <summary>
        /// Gets and sets the property ForecastTypes. 
        /// <para>
        /// The quantiles at which probabilistic forecasts are generated. <b>You can currently
        /// specify up to 5 quantiles per forecast</b>. Accepted values include <code>0.01 to
        /// 0.99</code> (increments of .01 only) and <code>mean</code>. The mean forecast is different
        /// from the median (0.50) when the distribution is not symmetric (for example, Beta and
        /// Negative Binomial). The default value is <code>["0.1", "0.5", "0.9"]</code>.
        /// </para>
        /// </summary>
        [AWSProperty(Min=1, Max=20)]
        public List<string> ForecastTypes
        {
            get { return this._forecastTypes; }
            set { this._forecastTypes = value; }
        }

        // Check to see if ForecastTypes property is set
        internal bool IsSetForecastTypes()
        {
            return this._forecastTypes != null && this._forecastTypes.Count > 0; 
        }

        /// <summary>
        /// Gets and sets the property PredictorArn. 
        /// <para>
        /// The Amazon Resource Name (ARN) of the predictor to use to generate the forecast.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Max=256)]
        public string PredictorArn
        {
            get { return this._predictorArn; }
            set { this._predictorArn = value; }
        }

        // Check to see if PredictorArn property is set
        internal bool IsSetPredictorArn()
        {
            return this._predictorArn != null;
        }

        /// <summary>
        /// Gets and sets the property Tags. 
        /// <para>
        /// The optional metadata that you apply to the forecast to help you categorize and organize
        /// them. Each tag consists of a key and an optional value, both of which you define.
        /// </para>
        ///  
        /// <para>
        /// The following basic restrictions apply to tags:
        /// </para>
        ///  <ul> <li> 
        /// <para>
        /// Maximum number of tags per resource - 50.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// For each resource, each tag key must be unique, and each tag key can have only one
        /// value.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Maximum key length - 128 Unicode characters in UTF-8.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Maximum value length - 256 Unicode characters in UTF-8.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// If your tagging schema is used across multiple services and resources, remember that
        /// other services may have restrictions on allowed characters. Generally allowed characters
        /// are: letters, numbers, and spaces representable in UTF-8, and the following characters:
        /// + - = . _ : / @.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Tag keys and values are case sensitive.
        /// </para>
        ///  </li> <li> 
        /// <para>
        /// Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination
        /// of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete
        /// tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code>
        /// as its prefix but the key does not, then Forecast considers it to be a user tag and
        /// will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code>
        /// do not count against your tags per resource limit.
        /// </para>
        ///  </li> </ul>
        /// </summary>
        [AWSProperty(Min=0, Max=200)]
        public List<Tag> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }

        // Check to see if Tags property is set
        internal bool IsSetTags()
        {
            return this._tags != null && this._tags.Count > 0; 
        }

    }
}