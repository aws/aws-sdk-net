/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the payment-cryptography-data-2022-02-03.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

#pragma warning disable CS0612,CS0618,CS1570
namespace Amazon.PaymentCryptographyData.Model
{
    /// <summary>
    /// Container for the parameters to the ReEncryptData operation.
    /// Re-encrypt ciphertext using DUKPT or Symmetric data encryption keys. 
    /// 
    ///  
    /// <para>
    /// You can either generate an encryption key within Amazon Web Services Payment Cryptography
    /// by calling <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html">CreateKey</a>
    /// or import your own encryption key by calling <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html">ImportKey</a>.
    /// The <c>KeyArn</c> for use with this operation must be in a compatible key state with
    /// <c>KeyModesOfUse</c> set to <c>Encrypt</c>. 
    /// </para>
    ///  
    /// <para>
    /// This operation also supports dynamic keys, allowing you to pass a dynamic encryption
    /// key as a TR-31 WrappedKeyBlock. This can be used when key material is frequently rotated,
    /// such as during every card transaction, and there is need to avoid importing short-lived
    /// keys into Amazon Web Services Payment Cryptography. To re-encrypt using dynamic keys,
    /// the <c>keyARN</c> is the Key Encryption Key (KEK) of the TR-31 wrapped encryption
    /// key material. The incoming wrapped key shall have a key purpose of D0 with a mode
    /// of use of B or D. For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/use-cases-acquirers-dynamickeys.html">Using
    /// Dynamic Keys</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.
    /// </para>
    ///  
    /// <para>
    /// For symmetric and DUKPT encryption, Amazon Web Services Payment Cryptography supports
    /// <c>TDES</c> and <c>AES</c> algorithms. To encrypt using DUKPT, a DUKPT key must already
    /// exist within your account with <c>KeyModesOfUse</c> set to <c>DeriveKey</c> or a new
    /// DUKPT can be generated by calling <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html">CreateKey</a>.
    /// </para>
    ///  
    /// <para>
    /// For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding
    /// key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key
    /// types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography
    /// User Guide</i>. 
    /// </para>
    ///  
    /// <para>
    ///  <b>Cross-account use</b>: This operation can't be used across different Amazon Web
    /// Services accounts.
    /// </para>
    ///  
    /// <para>
    ///  <b>Related operations:</b> 
    /// </para>
    ///  <ul> <li> 
    /// <para>
    ///  <a>DecryptData</a> 
    /// </para>
    ///  </li> <li> 
    /// <para>
    ///  <a>EncryptData</a> 
    /// </para>
    ///  </li> <li> 
    /// <para>
    ///  <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_GetPublicKeyCertificate.html">GetPublicCertificate</a>
    /// 
    /// </para>
    ///  </li> <li> 
    /// <para>
    ///  <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html">ImportKey</a>
    /// 
    /// </para>
    ///  </li> </ul>
    /// </summary>
    public partial class ReEncryptDataRequest : AmazonPaymentCryptographyDataRequest
    {
        private string _cipherText;
        private ReEncryptionAttributes _incomingEncryptionAttributes;
        private string _incomingKeyIdentifier;
        private WrappedKey _incomingWrappedKey;
        private ReEncryptionAttributes _outgoingEncryptionAttributes;
        private string _outgoingKeyIdentifier;
        private WrappedKey _outgoingWrappedKey;

        /// <summary>
        /// Gets and sets the property CipherText. 
        /// <para>
        /// Ciphertext to be encrypted. The minimum allowed length is 16 bytes and maximum allowed
        /// length is 4096 bytes.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Sensitive=true, Min=2, Max=4096)]
        public string CipherText
        {
            get { return this._cipherText; }
            set { this._cipherText = value; }
        }

        // Check to see if CipherText property is set
        internal bool IsSetCipherText()
        {
            return this._cipherText != null;
        }

        /// <summary>
        /// Gets and sets the property IncomingEncryptionAttributes. 
        /// <para>
        /// The attributes and values for incoming ciphertext.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public ReEncryptionAttributes IncomingEncryptionAttributes
        {
            get { return this._incomingEncryptionAttributes; }
            set { this._incomingEncryptionAttributes = value; }
        }

        // Check to see if IncomingEncryptionAttributes property is set
        internal bool IsSetIncomingEncryptionAttributes()
        {
            return this._incomingEncryptionAttributes != null;
        }

        /// <summary>
        /// Gets and sets the property IncomingKeyIdentifier. 
        /// <para>
        /// The <c>keyARN</c> of the encryption key of incoming ciphertext data.
        /// </para>
        ///  
        /// <para>
        /// When a WrappedKeyBlock is provided, this value will be the identifier to the key wrapping
        /// key. Otherwise, it is the key identifier used to perform the operation.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Min=7, Max=322)]
        public string IncomingKeyIdentifier
        {
            get { return this._incomingKeyIdentifier; }
            set { this._incomingKeyIdentifier = value; }
        }

        // Check to see if IncomingKeyIdentifier property is set
        internal bool IsSetIncomingKeyIdentifier()
        {
            return this._incomingKeyIdentifier != null;
        }

        /// <summary>
        /// Gets and sets the property IncomingWrappedKey. 
        /// <para>
        /// The WrappedKeyBlock containing the encryption key of incoming ciphertext data.
        /// </para>
        /// </summary>
        public WrappedKey IncomingWrappedKey
        {
            get { return this._incomingWrappedKey; }
            set { this._incomingWrappedKey = value; }
        }

        // Check to see if IncomingWrappedKey property is set
        internal bool IsSetIncomingWrappedKey()
        {
            return this._incomingWrappedKey != null;
        }

        /// <summary>
        /// Gets and sets the property OutgoingEncryptionAttributes. 
        /// <para>
        /// The attributes and values for outgoing ciphertext data after encryption by Amazon
        /// Web Services Payment Cryptography.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public ReEncryptionAttributes OutgoingEncryptionAttributes
        {
            get { return this._outgoingEncryptionAttributes; }
            set { this._outgoingEncryptionAttributes = value; }
        }

        // Check to see if OutgoingEncryptionAttributes property is set
        internal bool IsSetOutgoingEncryptionAttributes()
        {
            return this._outgoingEncryptionAttributes != null;
        }

        /// <summary>
        /// Gets and sets the property OutgoingKeyIdentifier. 
        /// <para>
        /// The <c>keyARN</c> of the encryption key of outgoing ciphertext data after encryption
        /// by Amazon Web Services Payment Cryptography.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true, Min=7, Max=322)]
        public string OutgoingKeyIdentifier
        {
            get { return this._outgoingKeyIdentifier; }
            set { this._outgoingKeyIdentifier = value; }
        }

        // Check to see if OutgoingKeyIdentifier property is set
        internal bool IsSetOutgoingKeyIdentifier()
        {
            return this._outgoingKeyIdentifier != null;
        }

        /// <summary>
        /// Gets and sets the property OutgoingWrappedKey. 
        /// <para>
        /// The WrappedKeyBlock containing the encryption key of outgoing ciphertext data after
        /// encryption by Amazon Web Services Payment Cryptography.
        /// </para>
        /// </summary>
        public WrappedKey OutgoingWrappedKey
        {
            get { return this._outgoingWrappedKey; }
            set { this._outgoingWrappedKey = value; }
        }

        // Check to see if OutgoingWrappedKey property is set
        internal bool IsSetOutgoingWrappedKey()
        {
            return this._outgoingWrappedKey != null;
        }

    }
}