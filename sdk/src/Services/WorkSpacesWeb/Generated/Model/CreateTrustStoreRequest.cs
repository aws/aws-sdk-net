/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the workspaces-web-2020-07-08.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

#pragma warning disable CS0612,CS0618,CS1570
namespace Amazon.WorkSpacesWeb.Model
{
    /// <summary>
    /// Container for the parameters to the CreateTrustStore operation.
    /// Creates a trust store that can be associated with a web portal. A trust store contains
    /// certificate authority (CA) certificates. Once associated with a web portal, the browser
    /// in a streaming session will recognize certificates that have been issued using any
    /// of the CAs in the trust store. If your organization has internal websites that use
    /// certificates issued by private CAs, you should add the private CA certificate to the
    /// trust store.
    /// </summary>
    public partial class CreateTrustStoreRequest : AmazonWorkSpacesWebRequest
    {
        private List<MemoryStream> _certificateList = AWSConfigs.InitializeCollections ? new List<MemoryStream>() : null;
        private string _clientToken;
        private List<Tag> _tags = AWSConfigs.InitializeCollections ? new List<Tag>() : null;

        /// <summary>
        /// Gets and sets the property CertificateList. 
        /// <para>
        /// A list of CA certificates to be added to the trust store.
        /// </para>
        /// </summary>
        [AWSProperty(Required=true)]
        public List<MemoryStream> CertificateList
        {
            get { return this._certificateList; }
            set { this._certificateList = value; }
        }

        // Check to see if CertificateList property is set
        internal bool IsSetCertificateList()
        {
            return this._certificateList != null && (this._certificateList.Count > 0 || !AWSConfigs.InitializeCollections); 
        }

        /// <summary>
        /// Gets and sets the property ClientToken. 
        /// <para>
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of
        /// the request. Idempotency ensures that an API request completes only once. With an
        /// idempotent request, if the original request completes successfully, subsequent retries
        /// with the same client token returns the result from the original successful request.
        /// 
        /// </para>
        ///  
        /// <para>
        /// If you do not specify a client token, one is automatically generated by the Amazon
        /// Web Services SDK.
        /// </para>
        /// </summary>
        [AWSProperty(Min=1, Max=512)]
        public string ClientToken
        {
            get { return this._clientToken; }
            set { this._clientToken = value; }
        }

        // Check to see if ClientToken property is set
        internal bool IsSetClientToken()
        {
            return this._clientToken != null;
        }

        /// <summary>
        /// Gets and sets the property Tags. 
        /// <para>
        /// The tags to add to the trust store. A tag is a key-value pair.
        /// </para>
        /// </summary>
        [AWSProperty(Min=0, Max=200)]
        public List<Tag> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }

        // Check to see if Tags property is set
        internal bool IsSetTags()
        {
            return this._tags != null && (this._tags.Count > 0 || !AWSConfigs.InitializeCollections); 
        }

    }
}