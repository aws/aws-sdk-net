<Project ToolsVersion="14.0" 
    DefaultTargets="full-build-nodocs"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <InternalBuildTools Condition="'$(InternalBuildTools)'==''">..\..\AWSDotNetBuildTools</InternalBuildTools>
        <DisablePCLSupport Condition="'$(DisablePCLSupport)'==''">false</DisablePCLSupport>
        <DisableUnitySupport Condition="'$(DisableUnitySupport)'==''">false</DisableUnitySupport>

		<VSToolsPath Condition="'$(VSToolsPath)' == ''">C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0</VSToolsPath>
		
        <GeneratorDisablePCLSupport Condition="'$(DisablePCLSupport)'=='true'">-disable.pcl-support</GeneratorDisablePCLSupport>

        <SmokeBuild></SmokeBuild>

        <!-- perform a release build by default -->
        <Configuration Condition="'$(Configuration)'==''">Release</Configuration>

    </PropertyGroup>

    <Import Project="$(InternalBuildTools)\references.targets" Condition="Exists('$(InternalBuildTools)\references.targets')" />
    <Import Project="common.targets" />
	
	<Import Project="$(VSToolsPath)\DotNet\Microsoft.DotNet.Props" Condition="'$(VSToolsPath)' != ''" />
	<Import Project="$(VSToolsPath)\DotNet\Microsoft.DotNet.targets" Condition="'$(VSToolsPath)' != ''" />

	<PropertyGroup>
		<GeneratorUnityPath>--unitypath &quot;$(unitypath)&quot;</GeneratorUnityPath>
	</PropertyGroup>
	
    <!-- properties used in documentation generation -->
    <PropertyGroup>
        <!-- resources folder where test settings should be placed -->
        <TestSettingsLocation>..\sdk\test\CrossPlatformTests\CommonTests\Resources</TestSettingsLocation>

        <RunKeyScan Condition="'$(RunKeyScan)'==''">false</RunKeyScan>
    </PropertyGroup>

    <Target Name="build-custom-tasks">
        <Exec Command="..\sdk\.nuget\NuGet.exe restore .\CustomTasks\CustomTasks.sln" />

        <MSBuild Projects=".\CustomTasks\CustomTasks.sln"
            Targets="Clean;Build"
            Properties="Configuration=Release" />

        <Exec Command="..\sdk\.nuget\NuGet.exe restore ..\sdk\test\TestAnalyzer\TestAnalyzer.sln" />

        <MSBuild Projects="..\sdk\test\TestAnalyzer\TestAnalyzer.sln"
            Targets="Clean;Build"
            Properties="Configuration=Debug"/>
    </Target>

    <UsingTask TaskName="CustomTasks.UpdateFxCopProject" AssemblyFile=".\CustomTasks\bin\Release\CustomTasks.dll"/>
    <UsingTask TaskName="CustomTasks.XamarinComponent" AssemblyFile=".\CustomTasks\bin\Release\CustomTasks.dll"/>
    <UsingTask TaskName="CustomTasks.UnityPackage" AssemblyFile=".\CustomTasks\bin\Release\CustomTasks.dll"/>
	<UsingTask TaskName="CustomTasks.UnityBuild" AssemblyFile=".\CustomTasks\bin\Release\CustomTasks.dll"/>

    <Target Name="init" DependsOnTargets="clean;build-custom-tasks">
        <Message Text="Running SDK generation and build for configuration: $(Configuration)" Importance="normal" />
    </Target>

    <Target Name="full-build" DependsOnTargets="test-sdk;copy-assemblies;copy-service-models;unity-pack;keyscan;consolidate-docartifacts;save-build"/>

    <Target Name="full-build-nodocs" DependsOnTargets="test-sdk;package-netcore-extensions;keyscan;copy-assemblies;copy-service-models;unity-pack;save-build"/>
	
	<Target Name="restore-nuget">
		<Message Text="Restore nuget packages"/>
        <Exec Command="..\sdk\.nuget\NuGet.v28.exe restore ..\sdk\AWSSDK.Desktop.sln"/>
        <Exec Command="..\sdk\.nuget\NuGet.v28.exe restore ..\sdk\AWSSDK.PCL.sln"/>
        <Exec Command="..\sdk\.nuget\NuGet.v28.exe restore ..\sdk\AWSSDK.Unity.sln"/>
		<Exec Command="..\sdk\.nuget\NuGet.v28.exe restore ..\generator\AWSSDKGenerator.sln"/>
		<Exec Command="..\sdk\.nuget\NuGet.v28.exe restore ..\sdk\AWSSDK.CodeAnalysis.sln"/>
	</Target>

	<Target Name="run-generator" DependsOnTargets="restore-nuget">
        <Message Text="Build and run code generator"/>
		<MSBuild Projects="..\generator\AWSSDKGenerator.sln"
			Targets="Clean;Build"
			Properties="Configuration=Release" />
        <Exec Command="ServiceClientGenerator.exe $(GeneratorDisablePCLSupport) $(GeneratorUnityPath)"
			WorkingDirectory="..\generator\ServiceClientGenerator\bin\Release"/>
	</Target>

    <Target Name="build-sdk" DependsOnTargets="build-sdk-desktop;build-code-analysis;build-sdk-pcl;build-sdk-unity;build-sdk-coreclr">
        <Copy
            SourceFiles="..\generator\ServiceModels\_sdk-versions.json"
            DestinationFolder="$(Deployment)" />
    </Target>

	<Target Name="build-sdk-desktop" DependsOnTargets="restore-nuget;run-generator">
		<Message Text="Compile the Desktop SDK"/>
		<MSBuild Projects="..\sdk\AWSSDK.Desktop.sln"
			Targets="Clean;Build"
			Properties="Configuration=$(Configuration);AWSKeyFile=$(CustomSnkFileLocation);ResolveNuGetPackages=false" />
	</Target>

	<Target Name="build-code-analysis" DependsOnTargets="restore-nuget;run-generator">
		<MSBuild Projects="..\sdk\AWSSDK.CodeAnalysis.sln"
					Targets="Clean;Build"
					Properties="Configuration=$(Configuration);AWSKeyFile=$(CustomSnkFileLocation)" />
	</Target>

	<Target Name="build-sdk-pcl" DependsOnTargets="restore-nuget;run-generator" Condition="!$(DisablePCLSupport)">
		<Message Text="Compile the Portable Class Library SDK"/>
		<MSBuild Projects="..\sdk\AWSSDK.PCL.sln"
			Targets="Clean;Build"
			Properties="Configuration=$(Configuration);AWSKeyFile=$(CustomSnkFileLocation);ResolveNuGetPackages=false" />
	</Target>

	<Target Name="build-sdk-coreclr" DependsOnTargets="GetSDKToolingInfoTarget">
	
		<!-- depends: restore-nuget;run-generator -->
		<Exec Command="&quot;$(SDKToolingExe)&quot; restore" 
			WorkingDirectory="..\sdk"/>		
			
			
		<Message Text="Compile the CoreCLR version of the SDK"/>
		<Exec Command="&quot;$(SDKToolingExe)&quot; build -c $(Configuration) --no-incremental" 
			WorkingDirectory="..\sdk\test\CoreCLR\IntegrationTests"/>		

	</Target>
	
	<Target Name="build-sdk-unity" DependsOnTargets="restore-nuget;run-generator" Condition="!$(DisableUnitySupport)">
		<Message Text="Compile the Unity SDK"/>
		<MSBuild Projects="..\sdk\AWSSDK.Unity.sln"
			Targets="Clean;Build"
			Properties="Configuration=$(Configuration);AWSKeyFile=$(CustomSnkFileLocation);ResolveNuGetPackages=false" />
	</Target>

	<Target Name="dnxcore-nuget" DependsOnTargets="">
	
		<!-- build-sdk-coreclr;build-sdk-desktop -->
	
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) -ExecutionPolicy Unrestricted -NoProfile -File create-nuget-packages.ps1" />			
	</Target>
	
    <Target Name="test-sdk" DependsOnTargets="init;build-sdk;fxcop;run-unit-tests;run-integ-tests" />

    <Target Name="run-unit-tests" DependsOnTargets="init;build-sdk">
        <MSBuild
            Projects="$(MSBuildProjectFile)"
            Targets="run-ms-tests"
            Properties="TestContainer=..\sdk\test\UnitTests\bin\$(Configuration)\net35\AWSSDK.UnitTests.Net35.dll;Configuration=$(Configuration)" />
        <MSBuild
            Projects="$(MSBuildProjectFile)"
            Targets="run-ms-tests"
            Properties="TestContainer=..\sdk\test\UnitTests\bin\$(Configuration)\net45\AWSSDK.UnitTests.Net45.dll;Configuration=$(Configuration)" />
        <MSBuild
            Projects="$(MSBuildProjectFile)"
            Targets="run-xunit-tests"
            Properties="ProjectJSON=..\sdk\test\CoreCLR\UnitTests\project.json;Configuration=$(Configuration)"/>
    </Target>

    <Target Name="run-integ-tests" DependsOnTargets="init;build-sdk" Condition="'$(RunIntegTests)' != '' And '$(RunIntegTests)' != 'false'">
        <MSBuild
            Projects="$(MSBuildProjectFile)"
            Targets="run-ms-tests"
            Properties="TestContainer=..\sdk\test\IntegrationTests\bin\$(Configuration)\net45\AWSSDK.IntegrationTests.Net45.dll;Configuration=$(Configuration)" />

        <MSBuild
            Projects="$(MSBuildProjectFile)"
            Targets="run-xunit-tests"
            Properties="ProjectJSON=..\sdk\test\CoreCLR\IntegrationTests\project.json;Configuration=$(Configuration)"/>
    </Target>

    <Target Name="nuget-pack" DependsOnTargets="build-sdk" Condition="'$(Configuration)' == 'Release'">
        <Exec LogStandardErrorAsError="true"
              Command="$(powershell) -ExecutionPolicy Unrestricted -NoProfile -File create-nuget-packages.ps1" />
    </Target>

    <Target Name="xam-pack" DependsOnTargets="build-custom-tasks;nuget-pack" Condition="!$(DisablePCLSupport) AND Exists('$(xpkgexe)')  And $(SmokeBuild) == ''">
        <XamarinComponent
            ComponentRootPath="..\sdk\xamarin-components\"
            NugetExe="..\sdk\.nuget\NuGet.exe"
            ComponentsExe="$(xpkg)"
            NugetRestoreLocation="$([System.IO.Path]::GetFullPath(..\Deployment\nuget));https://www.nuget.org/api/v2"
            DevEnvExe="$(devenv2013)"  />

        <ItemGroup>
            <XamFiles Include="..\sdk\xamarin-components\**\*.xam"/>
        </ItemGroup>
        <Copy
            SourceFiles="@(XamFiles)"
            DestinationFolder="$(Deployment)\xamarin-components"/>
    </Target>

	<Target Name="unity-pack" DependsOnTargets="build-custom-tasks;nuget-pack;copy-assemblies;pdb-mdb" Condition="!$(DisableUnitySupport)">

		<UnityPackage
            DeploymentPath="$([System.IO.Path]::GetFullPath(..\Deployment\))"
            ServiceName="@(XamFiles)"
            ToolsPath="$([System.IO.Path]::GetFullPath(UnityTools))"
            UnityExe="$(unity)"  />

    </Target>

	<!-- DependsOnTargets="copy-assemblies" -->
	<!-- Exists('$(pdb2mdbexe)') -->
	<Target Name="pdb-mdb"  DependsOnTargets="copy-assemblies"  Condition="False">
		<ItemGroup>
			<DllFiles Include="$(Deployment)\assemblies\unity\*.dll"/>
		</ItemGroup>

		<Exec LogStandardErrorAsError="true" Command="$(mono) $(pdb2mdb) %(DllFiles.Identity)" />
	</Target>

	<Target Name="update-unity-tests" DependsOnTargets="build-custom-tasks;build-sdk-unity" Condition="!$(DisableUnitySupport)">

		<!-- delete the sdk folder and its contents -->
		<RemoveDir Directories="..\sdk\test\Unity\Unity3DTests\Assets\SDK" />
		<MakeDir Directories="..\sdk\test\Unity\Unity3DTests\Assets\SDK" />

		<!-- copy all new assemblies to the test project -->
		<ItemGroup>
			<DllFiles Include="..\sdk\src\Core\bin\$(Configuration)\unity\AWSSDK.*.dll"/>
			<PdbFiles Include="..\sdk\src\Core\bin\$(Configuration)\unity\AWSSDK.*.pdb"/>

			<DllFiles Include="..\sdk\src\Services\**\bin\$(Configuration)\unity\AWSSDK.*.dll"/>
			<PdbFiles Include="..\sdk\src\Services\**\bin\$(Configuration)\unity\AWSSDK.*.pdb"/>
		</ItemGroup>

		<Copy
            SourceFiles="@(DllFiles)"
            DestinationFolder="..\sdk\test\Unity\Unity3DTests\Assets\SDK"/>
		<Copy
            SourceFiles="@(PdbFiles)"
            DestinationFolder="..\sdk\test\Unity\Unity3DTests\Assets\SDK"/>

		<!-- need to copy credentials as well -->

	</Target>

	<Target Name="build-unity-test" DependsOnTargets="update-unity-tests" Condition="!$(DisableUnitySupport)">

		<!-- build the projects
		<MakeDir Directories="$(Deployment)" />
		<MakeDir Directories="$(Deployment)\unity" /> -->
		<MakeDir Directories="$(Deployment)\unity\build" />

		<UnityBuild
			DeploymentPath="$([System.IO.Path]::GetFullPath(..\Deployment\))"
			UnityExe="$(unity)"
			ProjectPath="$([System.IO.Path]::GetFullPath(..\sdk\test\Unity\Unity3DTests\))"
			Platform="android"
			/>

		<UnityBuild
			DeploymentPath="$([System.IO.Path]::GetFullPath(..\Deployment\))"
			UnityExe="$(unity)"
			ProjectPath="$([System.IO.Path]::GetFullPath(..\sdk\test\Unity\Unity3DTests\))"
			Platform="ios64"
			/>

        <!-- ios mono requires nunit customization
		<UnityBuild
			DeploymentPath="$([System.IO.Path]::GetFullPath(..\Deployment\))"
			UnityExe="$(unity)"
			ProjectPath="$([System.IO.Path]::GetFullPath(..\sdk\test\Unity\Unity3DTests\))"
			Platform="ios32"
			/>
		-->
	</Target>
	
	
	<Target Name="build-netcore-extensions" DependsOnTargets="build-sdk-coreclr;GetSDKToolingInfoTarget">
	
		<!-- depends: restore-nuget;run-generator -->
		<Exec Command="&quot;$(SDKToolingExe)&quot; restore" 
			WorkingDirectory="..\extensions"/>		
			
			
		<Message Text="Build and Test .NET Core Setup Extension"/>
        <MSBuild
            Projects="$(MSBuildProjectFile)"
            Targets="run-xunit-tests"
            Properties="ProjectJSON=..\extensions\test\NETCore.SetupTests\project.json;Configuration=$(Configuration)"/>
			
	</Target>	
	
	<Target Name="package-netcore-extensions" DependsOnTargets="build-netcore-extensions">
		<Exec Command="..\..\..\sdk\.nuget\NuGet.exe pack .\AWSSDK.Extensions.NETCore.Setup.nuspec -BasePath . -OutputDirectory ..\..\..\Deployment\nuget" WorkingDirectory="..\extensions\src\AWSSDK.Extensions.NETCore.Setup" />
	</Target>	
	
    <Target Name="copy-assemblies" DependsOnTargets="nuget-pack;xam-pack">
        <Message Text="Collating assemblies for downstream doc generation" />
        <PropertyGroup>
            <CustomSnkPublicKeyToken Condition="'$(CustomSnkPublicKeyToken)' == '' ">71c852f8be1c371d</CustomSnkPublicKeyToken>
        </PropertyGroup>
        <Exec LogStandardErrorAsError="true"
              Command="$(powershell) -ExecutionPolicy Unrestricted -NoProfile -File copy-sdkassemblies.ps1 -PublicKeyTokenToCheck $(CustomSnkPublicKeyToken) -BuildType $(Configuration)" />
    </Target>

    <Target Name="copy-service-models" DependsOnTargets="copy-assemblies">
        <Message Text="Collating service models for downstream tooling" />
		
		<ItemGroup>
			<ServiceModels Include="..\generator\ServiceModels\*" />
		</ItemGroup>
		
		<Copy SourceFiles="@(ServiceModels)" DestinationFolder="$(Deployment)\models" />
	</Target>
	
    <!-- TEST TARGETS/TASKS -->

    <Target Name="fxcop" DependsOnTargets="init;copy-assemblies" Condition="Exists('$(fxcopcmdexe)') And ($(Configuration) == 'Release')">
        <!-- Update FxCop project files -->
        <UpdateFxCopProject Assemblies="$(Deployment)\assemblies\net35" FxCopProject="..\sdk\SDK-3.5.FxCop" BinSuffix="net35"/>
        <UpdateFxCopProject Assemblies="$(Deployment)\assemblies\net45" FxCopProject="..\sdk\SDK-4.5.FxCop" BinSuffix="net45"/>

        <!-- Compile custom FxCop rules -->
        <MSBuild Projects="..\buildtools\CustomFxCopRules\CustomFxCopRules.sln"
            Targets="Clean;Build"
            Properties="Configuration=Release" />

        <!-- Run FxCop -->
        <Exec Command="$(fxcopcmd) /p:..\sdk\SDK-3.5.FxCop /o:..\fxcop-report-3.5.xml /s"/>
        <Exec Command="$(fxcopcmd) /p:..\sdk\SDK-4.5.FxCop /o:..\fxcop-report-4.5.xml /s"/>

        <Error Condition="Exists('..\fxcop-report-3.5.xml') or Exists('..\fxcop-report-4.5.xml')" Text="There are FxCop violations!" />
    </Target>

    <Target Name="build-test-wrapper">
	    <Exec Command="..\sdk\.nuget\NuGet.exe restore .\TestWrapper\TestWrapper.sln" />
		
        <MSBuild Projects=".\TestWrapper\TestWrapper.sln"
            Targets="Clean;Build"
            Properties="Configuration=Debug"/>        
    </Target>

    <Target Name="run-ms-tests" DependsOnTargets="build-test-wrapper">
        <Message Text="TestContainer = $(TestContainer)" Condition="$(TestContainer.Length) > 0"/>

        <PropertyGroup >
            <Container>/testcontainer:&quot;$([System.IO.Path]::GetFullPath($(TestContainer)))&quot;</Container>
        </PropertyGroup>

        <Exec Command=".\TestWrapper\TestRunners\bin\Debug\TestWrapper.exe  mstest $(mstest2013) $(Container)" IgnoreStandardErrorWarningFormat="true"/>

        <!-- Clear our properties -->
        <PropertyGroup >
            <TestContainer></TestContainer>
        </PropertyGroup>
        <CallTarget Targets="deploy-test-results" />
        <OnError ExecuteTargets="deploy-test-results" />
    </Target>

    <Target Name="run-xunit-tests" DependsOnTargets="build-test-wrapper;GetSDKToolingInfoTarget">
        <Message Text="TestContainer = $(TestContainer)" Condition="$(TestContainer.Length) > 0"/>

        <PropertyGroup>
            <Project>$([System.IO.Path]::GetFullPath($(ProjectJSON)))</Project>
        </PropertyGroup>

        <Exec Command=".\TestWrapper\TestRunners\bin\Debug\TestWrapper.exe xunit &quot;$(SDKToolingExe)&quot; test &quot;$(Project)&quot; -c $(Configuration)"/>

         <!-- Clear our properties -->
        <PropertyGroup >
            <TestContainer></TestContainer>
        </PropertyGroup>
    </Target>

    <UsingTask TaskName="PrepareTestResults" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <ResultFile ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    Log.LogMessage("ResultFile = [{0}], formatting", ResultFile);
                    string content = File.ReadAllText(ResultFile);
                    content = content.Replace("<?xml version=\"1.0\" encoding=\"UTF-8\"?>","<?xml version=\"1.0\" encoding=\"UTF-8\"?><?xml-stylesheet type=\"text/xsl\" href=\"trx-transform.xsl\"?>");
                    File.WriteAllText(ResultFile + ".xml", content);
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="deploy-test-results" >
        <ItemGroup>
            <TestResult Include="TestResults\*.trx" />
        </ItemGroup>
        <PrepareTestResults ResultFile="%(TestResult.FullPath)" />

        <ItemGroup>
            <FormattedTestResult Include="TestResults\*.trx.xml" />
        </ItemGroup>
        <Copy
            SourceFiles="@(FormattedTestResult)"
            DestinationFolder="$(Deployment)" />

        <Copy
            SourceFiles="trx-transform.xsl"
            DestinationFolder="$(Deployment)" />
    </Target>

    <Target Name="keyscan"
            Condition="Exists('$(InternalBuildTools)\references.targets') And $(RunKeyScan)"
            DependsOnTargets="build-tools">
        <ItemGroup>
		    <PrivateKeyException Include="generator\ServiceModels\acm-2015-12-08.normal.json" />
            <PrivateKeyException Include="generator\ServiceModels\ec2-2014-02-01.normal.json" />
            <PrivateKeyException Include="generator\ServiceModels\iam-2010-05-08.normal.json" />
			<PrivateKeyException Include="sdk\code-analysis\ServiceAnalysis\CertificateManager\Generated\PropertyValueRules.xml" />
            <PrivateKeyException Include="sdk\test\UnitTests\Custom\EC2\PasswordTest.cs" />
            <PrivateKeyException Include="sdk\test\CoreCLR\UnitTests\sample.rsa.private.key.txt" />
        </ItemGroup>
		
		<ItemGroup>
			<FileException Include="generator\ServiceModels\elasticbeanstalk.examples.json" />
			<FileException Include="generator\ServiceClientGenerator\bin\Release\customizations\elasticbeanstalk.customizations.json" />
		</ItemGroup>

        <KeyScannerTask
            Folder="$(MSBuildProjectDirectory)\.."
            FilePattern="**"
            PrivateKeyExceptions="@(PrivateKeyException)"
			FileExceptions="@(FileException)"
            ParallelScan="true"
            />

    </Target>

    <Target Name="save-build" Condition="Exists('$(InternalBuildTools)\references.targets')" DependsOnTargets="build-tools">
        <SaveBuildArtifactTask
            RepositoryRoot="$(MSBuildProjectDirectory)\.."
            BuildArtifactType="sdk"
            GitBranch="$(SaveReferenceGitBranch)"
            LocalArchiveRootFolder="$(LocalArchiveRootFolder)"
            />
    </Target>

    <Target Name="prepare-tests" Condition="'$(TestSettingsFile)' != ''">
        <Copy
            SourceFiles="$(TestSettingsFile)"
            DestinationFolder="$(TestSettingsLocation)" />
    </Target>
</Project>
