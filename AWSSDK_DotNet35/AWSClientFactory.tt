<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ output extension=".cs" #>
/*******************************************************************************
 *  Copyright 2008-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *    __  _    _  ___
 *   (  )( \/\/ )/ __)
 *   /__\ \    / \__ \
 *  (_)(_) \/\/  (___/
 *
 *  AWS SDK for .NET
 *
 */
using System;
using Amazon.Runtime;

<#

var runtimeFolder = Host.ResolvePath("Amazon.Runtime");
var rootFolder = Directory.GetParent(runtimeFolder).FullName;

var supportedServicesInterfaces = new List<string>();
foreach (var subDirectory in Directory.GetDirectories(rootFolder))
{
    var ns = subDirectory.Substring(subDirectory.LastIndexOf('\\') + 1);
    var files = Directory.GetFiles(subDirectory, "I" + ns.Replace(".", "") + ".cs");

	// Some services have a postfix of "Service". If no interface found see if it is one of the 
	// clients that have the postfix.
    if (files.Length == 0)
		files = Directory.GetFiles(subDirectory, "I" + ns.Replace(".", "") + "Service.cs");


    if (files.Length == 0)
		continue;
    if (files.Length > 1)
        throw new Exception("Unable to determine client interface");

    var fileName = Path.GetFileName(files[0]);
    var interfaceName = fileName.Substring(0, fileName.Length - 3);
    supportedServicesInterfaces.Add(ns + "." + interfaceName);
}

supportedServicesInterfaces.Add("Amazon.DynamoDBv2.IAmazonDynamoDB");

supportedServicesInterfaces.Sort();

foreach(var interfaceName in supportedServicesInterfaces)
{
#>
using <#=interfaceName.Substring(0, interfaceName.LastIndexOf('.'))#>;
<#
}
#>

namespace Amazon
{
    /// <summary>
    /// The Amazon Web Services SDK provides developers with a coherent and unified interface to the
    /// suite of Amazon Web Services. The intent is to facilitate the rapid building of
    /// applications that leverage multiple Amazon Web Services.
    /// <para>
    /// To get started, request an instance of the AWSClientFactory via this class's static Instance
    /// member. Use the factory instance to create clients for all the Web Services needed by
    /// the application.</para>
    /// </summary>

    public static class AWSClientFactory
    {
<#
foreach(var interfaceFullName in supportedServicesInterfaces)
{
	var interfaceName = interfaceFullName.Substring(interfaceFullName.LastIndexOf('.') + 1);
    var baseName = interfaceName.Substring(1);
    var clientName = baseName + "Client";
    var serviceName = baseName.Substring(0, "Amazon".Length) + " " + baseName.Substring("Amazon".Length);
#>
        #region <#=serviceName#>

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the credentials loaded from the application's
        /// default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
        /// 
        /// Example App.config with credentials set. 
        /// <code>
        /// &lt;?xml version="1.0" encoding="utf-8" ?&gt;
        /// &lt;configuration&gt;
        ///     &lt;appSettings&gt;
        ///         &lt;add key="AWSProfileName" value="AWS Default"/&gt;
        ///     &lt;/appSettings&gt;
        /// &lt;/configuration&gt;
        /// </code>
        /// </summary>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>()
        {
            return new <#=clientName#>();
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the credentials loaded from the application's
        /// default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
        /// 
        /// Example App.config with credentials set. 
        /// <code>
        /// &lt;?xml version="1.0" encoding="utf-8" ?&gt;
        /// &lt;configuration&gt;
        ///     &lt;appSettings&gt;
        ///         &lt;add key="AWSProfileName" value="AWS Default"/&gt;
        ///     &lt;/appSettings&gt;
        /// &lt;/configuration&gt;
        /// </code>
        /// </summary>
        /// <param name="config">Configuration options for the service like HTTP Proxy, # of connections, etc</param>
        /// <returns>An <#=serviceName#> client</returns>
        public static <#=interfaceName#> Create<#=clientName#>(<#=baseName#>Config config)
        {
            return new <#=clientName#>(config);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the default configuration
        /// </summary>
        /// <param name="awsAccessKey">The AWS Access Key associated with the account</param>
        /// <param name="awsSecretAccessKey">The AWS Secret Access Key associated with the account</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(
            string awsAccessKey,
            string awsSecretAccessKey
            )
        {
            return new <#=clientName#>(awsAccessKey, awsSecretAccessKey);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the specified configuration
        /// </summary>
        /// <param name="awsAccessKey">The AWS Access Key associated with the account</param>
        /// <param name="awsSecretAccessKey">The AWS Secret Access Key associated with the account</param>
        /// <param name="config">Configuration options for the service like HTTP Proxy, # of connections, etc
        /// </param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(
            string awsAccessKey,
            string awsSecretAccessKey, <#=baseName#>Config config
            )
        {
            return new <#=clientName#>(awsAccessKey, awsSecretAccessKey, config);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the credentials loaded from the application's
        /// default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
        /// 
        /// Example App.config with credentials set. 
        /// <code>
        /// &lt;?xml version="1.0" encoding="utf-8" ?&gt;
        /// &lt;configuration&gt;
        ///     &lt;appSettings&gt;
        ///         &lt;add key="AWSProfileName" value="AWS Default"/&gt;
        ///     &lt;/appSettings&gt;
        /// &lt;/configuration&gt;
        /// </code>
        /// </summary>
        /// <param name="region">The region to connect to.</param>
        /// <returns>An <#=serviceName#> client</returns>
        public static <#=interfaceName#> Create<#=clientName#>(RegionEndpoint region)
        {
            return new <#=clientName#>(region);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the specified region
        /// </summary>
        /// <param name="awsAccessKey">The AWS Access Key associated with the account</param>
        /// <param name="awsSecretAccessKey">The AWS Secret Access Key associated with the account</param>
        /// <param name="region">The region to connect to.</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(
            string awsAccessKey,
            string awsSecretAccessKey, RegionEndpoint region
            )
        {
            return new <#=clientName#>(awsAccessKey, awsSecretAccessKey, region);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with AWSCredentials.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(AWSCredentials credentials)
        {
            return new <#=clientName#>(credentials);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with AWSCredentials and region.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <param name="region">The region to connect to.</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(AWSCredentials credentials, RegionEndpoint region)
        {
            return new <#=clientName#>(credentials, region);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with AWSCredentials and an <#=baseName#> Configuration object.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <param name="config">Configuration options for the service like HTTP Proxy, # of connections, etc</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(AWSCredentials credentials, <#=baseName#>Config config)
        {
            return new <#=clientName#>(credentials, config);
        }
		#endregion

<#
}
#>

	}
}