<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>


using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

using Amazon.Runtime;
using <#=this.Config.Namespace#>.Model;

namespace <#=this.Config.Namespace#>
{
<#    this.FormatServiceInterfaceDocumentation(this.Config.ServiceModel.Documentation); #>
#if NETSTANDARD13
    [Obsolete("Support for .NET Standard 1.3 is in maintenance mode and will only receive critical bug fixes and security patches. Visit https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/migration-from-net-standard-1-3.html for further details.")]
#endif
	public partial interface IAmazon<#=this.Config.ClassName#> : IAmazonService, IDisposable
	{
<#
	// Creates paginators for service if available
	if (this.Config.ServiceModel.HasPaginators)
	{
#>
#if AWS_ASYNC_ENUMERABLES_API
        /// <summary>
        /// Paginators for the service
        /// </summary>
        I<#=this.Config.ServiceNameRoot#>PaginatorFactory Paginators { get; }
#endif
<#
    }
#>
		<#
    // Generates definitions for each operation in the service model
		foreach(var operation in this.Config.ServiceModel.Operations)
		{
            if(operation.IsInternal)
                continue;
		#>
		
		#region  <#=operation.Name#>

<#
        // Creates a parameterless definition of the operation if specified in the customizations file
        if (this.Config.ServiceModel.Customizations.CreateNoArgOverload(operation.Name))
        {
#>
<#
		this.FormatOperationDocumentationAsync(operation, false);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        Task<<#=operation.Name#>Response> <#=operation.Name#>Async(System.Threading.CancellationToken cancellationToken = default(CancellationToken));

<#
        }

        AddSimpleClientMethodInterfaces(operation, false);
#>

<#        
        this.FormatOperationDocumentationAsync(operation, true);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        Task<<#=operation.Name#>Response> <#=operation.Name#>Async(<#=operation.Name#>Request request, System.Threading.CancellationToken cancellationToken = default(CancellationToken));

		#endregion
		<#
		}
		#>

	}
}
