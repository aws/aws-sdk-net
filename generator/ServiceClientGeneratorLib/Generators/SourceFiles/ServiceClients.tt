<#@ template language="C#"  inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>


using System;
using System.Collections.Generic;
using System.Net;

using <#=this.Config.Namespace#>.Model;
using <#=this.Config.Namespace#>.Model.Internal.MarshallTransformations;
using <#=this.Config.Namespace#>.Internal;
using Amazon.Runtime;
using Amazon.Runtime.Internal;
using Amazon.Runtime.Internal.Auth;
using Amazon.Runtime.Internal.Transform;

namespace <#=this.Config.Namespace#>
{
<#    this.FormatServiceClientDocumentation(this.Config.ServiceModel.Documentation); #>
	public partial class Amazon<#=this.Config.ClassName#>Client : AmazonServiceClient, IAmazon<#=this.Config.ClassName#>
	{
		private static IServiceMetadata serviceMetadata = new Amazon<#=this.Config.ClassName#>Metadata();

<#
    // Creates paginators for service if available
    if (this.Config.ServiceModel.HasPaginators)
    {
#>
#if BCL45 || AWS_ASYNC_ENUMERABLES_API
        private I<#=this.Config.ServiceNameRoot#>PaginatorFactory _paginators;

        /// <summary>
        /// Paginators for the service
        /// </summary>
        public I<#=this.Config.ServiceNameRoot#>PaginatorFactory Paginators 
        {
            get 
            {
                if (this._paginators == null) 
                {
                    this._paginators = new <#=this.Config.ServiceNameRoot#>PaginatorFactory(this);
                }
                return this._paginators;
            }
        }
#endif
<#
    }
#>
<#
    // Creates constructors for the service if the model specifies to do so
	if(this.Config.GenerateConstructors)
	{
#>
        #region Constructors

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with the credentials loaded from the application's
        /// default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
        /// 
        /// Example App.config with credentials set. 
        /// <code>
        /// &lt;?xml version="1.0" encoding="utf-8" ?&gt;
        /// &lt;configuration&gt;
        ///     &lt;appSettings&gt;
        ///         &lt;add key="AWSProfileName" value="AWS Default"/&gt;
        ///     &lt;/appSettings&gt;
        /// &lt;/configuration&gt;
        /// </code>
        ///
        /// </summary>
        public Amazon<#=this.Config.ClassName#>Client()
            : base(FallbackCredentialsFactory.GetCredentials(), new Amazon<#=this.Config.ClassName#>Config()) { }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with the credentials loaded from the application's
        /// default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
        /// 
        /// Example App.config with credentials set. 
        /// <code>
        /// &lt;?xml version="1.0" encoding="utf-8" ?&gt;
        /// &lt;configuration&gt;
        ///     &lt;appSettings&gt;
        ///         &lt;add key="AWSProfileName" value="AWS Default"/&gt;
        ///     &lt;/appSettings&gt;
        /// &lt;/configuration&gt;
        /// </code>
        ///
        /// </summary>
        /// <param name="region">The region to connect.</param>
        public Amazon<#=this.Config.ClassName#>Client(RegionEndpoint region)
            : base(FallbackCredentialsFactory.GetCredentials(), new Amazon<#=this.Config.ClassName#>Config{RegionEndpoint = region}) { }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with the credentials loaded from the application's
        /// default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
        /// 
        /// Example App.config with credentials set. 
        /// <code>
        /// &lt;?xml version="1.0" encoding="utf-8" ?&gt;
        /// &lt;configuration&gt;
        ///     &lt;appSettings&gt;
        ///         &lt;add key="AWSProfileName" value="AWS Default"/&gt;
        ///     &lt;/appSettings&gt;
        /// &lt;/configuration&gt;
        /// </code>
        ///
        /// </summary>
        /// <param name="config">The Amazon<#=this.Config.ClassName#>Client Configuration Object</param>
        public Amazon<#=this.Config.ClassName#>Client(Amazon<#=this.Config.ClassName#>Config config)
            : base(FallbackCredentialsFactory.GetCredentials(), config) { }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Credentials
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        public Amazon<#=this.Config.ClassName#>Client(AWSCredentials credentials)
            : this(credentials, new Amazon<#=this.Config.ClassName#>Config())
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Credentials
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <param name="region">The region to connect.</param>
        public Amazon<#=this.Config.ClassName#>Client(AWSCredentials credentials, RegionEndpoint region)
            : this(credentials, new Amazon<#=this.Config.ClassName#>Config{RegionEndpoint = region})
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Credentials and an
        /// Amazon<#=this.Config.ClassName#>Client Configuration object.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <param name="clientConfig">The Amazon<#=this.Config.ClassName#>Client Configuration Object</param>
        public Amazon<#=this.Config.ClassName#>Client(AWSCredentials credentials, Amazon<#=this.Config.ClassName#>Config clientConfig)
            : base(credentials, clientConfig)
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Access Key ID and AWS Secret Key
        /// </summary>
        /// <param name="awsAccessKeyId">AWS Access Key ID</param>
        /// <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        public Amazon<#=this.Config.ClassName#>Client(string awsAccessKeyId, string awsSecretAccessKey)
            : this(awsAccessKeyId, awsSecretAccessKey, new Amazon<#=this.Config.ClassName#>Config())
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Access Key ID and AWS Secret Key
        /// </summary>
        /// <param name="awsAccessKeyId">AWS Access Key ID</param>
        /// <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        /// <param name="region">The region to connect.</param>
        public Amazon<#=this.Config.ClassName#>Client(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region)
            : this(awsAccessKeyId, awsSecretAccessKey, new Amazon<#=this.Config.ClassName#>Config() {RegionEndpoint=region})
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Access Key ID, AWS Secret Key and an
        /// Amazon<#=this.Config.ClassName#>Client Configuration object. 
        /// </summary>
        /// <param name="awsAccessKeyId">AWS Access Key ID</param>
        /// <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        /// <param name="clientConfig">The Amazon<#=this.Config.ClassName#>Client Configuration Object</param>
        public Amazon<#=this.Config.ClassName#>Client(string awsAccessKeyId, string awsSecretAccessKey, Amazon<#=this.Config.ClassName#>Config clientConfig)
            : base(awsAccessKeyId, awsSecretAccessKey, clientConfig)
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Access Key ID and AWS Secret Key
        /// </summary>
        /// <param name="awsAccessKeyId">AWS Access Key ID</param>
        /// <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        /// <param name="awsSessionToken">AWS Session Token</param>
        public Amazon<#=this.Config.ClassName#>Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken)
            : this(awsAccessKeyId, awsSecretAccessKey, awsSessionToken, new Amazon<#=this.Config.ClassName#>Config())
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Access Key ID and AWS Secret Key
        /// </summary>
        /// <param name="awsAccessKeyId">AWS Access Key ID</param>
        /// <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        /// <param name="awsSessionToken">AWS Session Token</param>
        /// <param name="region">The region to connect.</param>
        public Amazon<#=this.Config.ClassName#>Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region)
            : this(awsAccessKeyId, awsSecretAccessKey, awsSessionToken, new Amazon<#=this.Config.ClassName#>Config{RegionEndpoint = region})
        {
        }

        /// <summary>
        /// Constructs Amazon<#=this.Config.ClassName#>Client with AWS Access Key ID, AWS Secret Key and an
        /// Amazon<#=this.Config.ClassName#>Client Configuration object. 
        /// </summary>
        /// <param name="awsAccessKeyId">AWS Access Key ID</param>
        /// <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        /// <param name="awsSessionToken">AWS Session Token</param>
        /// <param name="clientConfig">The Amazon<#=this.Config.ClassName#>Client Configuration Object</param>
        public Amazon<#=this.Config.ClassName#>Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, Amazon<#=this.Config.ClassName#>Config clientConfig)
            : base(awsAccessKeyId, awsSecretAccessKey, awsSessionToken, clientConfig)
        {
        }

        #endregion
<#
	}
#>

        #region Overrides

        
        /// <summary>
        /// Creates the signer for the service.
        /// </summary>
        protected override AbstractAWSSigner CreateSigner()
        {
            return new <#=GeneratorHelpers.DetermineSigner(this.Config.ServiceModel.SignatureVersion, this.Config.ClassName)#>();
        }

<#
        if(this.Config.ServiceModel.Customizations.PipelineOverride != null)
        {
#>
        /// <summary>
        /// Customize the pipeline
        /// </summary>
        /// <param name="pipeline"></param>
        protected override void CustomizeRuntimePipeline(RuntimePipeline pipeline)
        {
<#
            var pipelineOverrides = this.Config.ServiceModel.Customizations.PipelineOverride;
            foreach(var o in pipelineOverrides.Overrides )
            {
                if(!string.IsNullOrEmpty(o.Condition))
                {
#>
            if(<#=o.Condition#>)
            {
<#
                if(o.OverrideMethod == "remove")
                {
#>
                pipeline.<#=o.FormattedOverrideMethod#>();
<#
                }
                else
                {
#>
                pipeline.<#=o.FormattedOverrideMethod#>(new <#=o.NewType#>(<#=o.ConstructorInput#>));
<#
                }
#>
            }
<#
                }
                else if(o.OverrideMethod == "remove")
                {
#>
            pipeline.<#=o.FormattedOverrideMethod#>();
<#
                }
                else
                {
#>
            pipeline.<#=o.FormattedOverrideMethod#>(new <#=o.NewType#>(<#=o.ConstructorInput#>));
<#
                }
            }
#>
        }	
<#
        }
#>
		/// <summary>
        /// Capture metadata for the service.
        /// </summary>
        protected override IServiceMetadata ServiceMetadata
        {
            get
            {
                return serviceMetadata;
            }
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Disposes the service client.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        #endregion

<#
        var endpointOperation = this.Config.ServiceModel.FindEndpointOperation();
        if(endpointOperation != null)
        {
#>
        #region  EndpointOperation Override

        protected override IEnumerable<DiscoveryEndpointBase> EndpointOperation(EndpointOperationContextBase context)
        {
            return EndpointDiscoveryResolver.ResolveEndpoints(context, () =>
            {
				var request = new <#=endpointOperation.Name#>Request
				{
<#
        if(endpointOperation.RequestHasOperationEndpointOperationMember)
        {
#>
				    Operation = context.OperationName,
<#
        }
        if(endpointOperation.RequestHasIdentifiersEndpointOperationMember)
        {
#>
				    Identifiers = new Dictionary<string, string>(context.EndpointDiscoveryData.Identifiers),
<#
        }
#>
				};                

				var response = <#=endpointOperation.Name#>(request);
				if(response.HttpStatusCode != HttpStatusCode.OK || response.Endpoints == null)
				{
					return null;
				}

				var endpoints = new List<DiscoveryEndpointBase>();
				foreach(var endpoint in response.Endpoints)
                {
                    endpoints.Add(new DiscoveryEndpoint(endpoint.Address, endpoint.CachePeriodInMinutes));
                }
            
				return endpoints;
			});
        }

        #endregion
<#
        }


    // Generates methods for each operation in the model
        foreach(var operation in this.Config.ServiceModel.Operations)
        {
        #>

        #region  <#=operation.Name#>
<#
        if (this.Config.ServiceModel.Customizations.CreateNoArgOverload(operation.Name))
        {
        this.FormatOperationDocumentationSync(operation, false);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#
		}
#>
        public virtual <#=operation.Name#>Response <#=operation.Name#>()
        {
            return <#=operation.Name#>(new <#=operation.Name#>Request());
        }
<#
        }
        AddSimpleClientMethods(operation, true);
#>
<#
        this.FormatOperationDocumentationSync(operation, true);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        <#=operation.IsInternal ? "internal" : "public"#> virtual <#=operation.Name#>Response <#=operation.Name#>(<#=operation.Name#>Request request)
        {
            var options = new InvokeOptions();
            options.RequestMarshaller = <#=operation.Name#>RequestMarshaller.Instance;
            options.ResponseUnmarshaller = <#=operation.Name#>ResponseUnmarshaller.Instance;
<#
            if(!operation.IsEndpointOperation && operation.EndpointDiscoveryEnabled)
            {
#>
            options.EndpointDiscoveryMarshaller = <#=operation.Name#>EndpointDiscoveryMarshaller.Instance;
            options.EndpointOperation = EndpointOperation;
<#
            }
#>

            return Invoke<<#=operation.Name#>Response>(request, options);
        }

<#
        AddBeginAsyncDocumentation(operation);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        <#=operation.IsInternal ? "internal" : "public"#> virtual IAsyncResult Begin<#=operation.Name#>(<#=operation.Name#>Request request, AsyncCallback callback, object state)
        {
            var options = new InvokeOptions();
            options.RequestMarshaller = <#=operation.Name#>RequestMarshaller.Instance;
            options.ResponseUnmarshaller = <#=operation.Name#>ResponseUnmarshaller.Instance;
<#
            if(!operation.IsEndpointOperation && operation.EndpointDiscoveryEnabled)
            {
#>
            options.EndpointDiscoveryMarshaller = <#=operation.Name#>EndpointDiscoveryMarshaller.Instance;
            options.EndpointOperation = EndpointOperation;
<#
            }
#>

            return BeginInvoke(request, options, callback, state);
        }

<#
        AddEndAsyncDocumentation(operation);		
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        <#=operation.IsInternal ? "internal" : "public"#> virtual <#=operation.Name#>Response End<#=operation.Name#>(IAsyncResult asyncResult)
        {
            return EndInvoke<<#=operation.Name#>Response>(asyncResult);
        }

        #endregion
        <#
        }
        #>

    }
}
