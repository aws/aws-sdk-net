<#@ template language="C#" inherits="StructureGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    bool isRequest = this.Operation.RequestStructure.Members.Any(x => x.ModelShape.MarshallName == this.Structure.Name);
    bool isResponse = this.Operation.ResponseStructure.Members.Any(x => x.ModelShape.MarshallName == this.Structure.Name);
#>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1710:Identifiers should have correct suffix", Justification = "<#=this.Structure.Name#>Collection is not descriptive")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1063", Justification = "IDisposable is a transient interface from IEventStream. Users need to be able to call Dispose.")]
    public sealed class <#=this.Structure.Name#> : EnumerableEventStream<IEventStreamEvent, <#=this.Config.ClassName#>EventStreamException>
    {
        /// <summary>
        ///The mapping of event message to a generator function to construct the matching EventStream event
        /// </summary>
        protected override IDictionary<string,Func<IEventStreamMessage, IEventStreamEvent>> EventMapping {get;} =
        new Dictionary<string,Func<IEventStreamMessage,IEventStreamEvent>>(StringComparer.OrdinalIgnoreCase)
        {
<#
        string protocol = null;
        if (string.Equals(this.Config.ServiceModel.Protocol,"rest-json", StringComparison.OrdinalIgnoreCase) || string.Equals(this.Config.ServiceModel.Protocol,"json", StringComparison.OrdinalIgnoreCase))
            protocol = "Json";
        else if(string.Equals(this.Config.ServiceModel.Protocol,"rest-xml",StringComparison.OrdinalIgnoreCase))
            protocol = "Xml";
        else
        {
            throw new NotSupportedException("The given protocol is not supported or has not been implemented yet");
        }
#>
<#
        if(isResponse)
        {
#>
            {"Initial-Response", payload => new InitialResponseEvent(payload)},
<#
        }
#>
<#
        else if(isRequest)
        {
#>
            {"Initial-Request", payload => new InitialRequestEvent(payload)},
<#
        }
#>
<#
        foreach(var member in this.Structure.Members)
        {
        if(member.ModelShape.IsEvent)
            {
#>
            {"<#=member.PropertyName#>", payload => new <#=member.DetermineType()#>Unmarshaller().Unmarshall(EventStreamUtils.ConvertMessageTo<#=protocol#>Context(payload))},
<#
            }
        }
#>
        };
        /// <summary>
        /// The mapping of event message to a generator function to construct the matching EventStream Exception
        /// </summary>
        protected override IDictionary<string,Func<IEventStreamMessage,<#=this.Config.ClassName#>EventStreamException>> ExceptionMapping {get;} =
        new Dictionary<string,Func<IEventStreamMessage,<#=this.Config.ClassName#>EventStreamException>>(StringComparer.OrdinalIgnoreCase)
        {
<#
        foreach(var member in this.Structure.Members)
        {
            if(member.ModelShape.IsException)
            {
#>
            { "<#=member.PropertyName#>", payload => new <#=this.Config.ClassName#>EventStreamException(Encoding.UTF8.GetString(payload.Payload), new <#=member.ModelShape#>Unmarshaller().Unmarshall(EventStreamUtils.ConvertMessageTo<#=protocol#>Context(payload))) },
<#
            }
        }
#>
        };
        // Backing by a volatile bool. The flag only changes one way, so no need for a lock.
        // This is located in the subclass to be CLS compliant.
        private volatile bool _isProcessing;

        /// <summary>
        /// Whether the backround processing loop is running.
        /// </summary>
        protected override bool IsProcessing
        {
            get { return _isProcessing; }
            set { _isProcessing = value; }
        }

        /// <summary>
        /// Event that encompasses all events.
        /// </summary>
        public override event EventHandler<EventStreamEventReceivedArgs<IEventStreamEvent>> EventReceived;

        /// <summary>
        /// Event that encompasses exceptions.
        /// </summary>
        public override event EventHandler<EventStreamExceptionReceivedArgs<<#=this.Config.ClassName#>EventStreamException>> ExceptionReceived;
<#
        if(isResponse)
        {
#>
        /// <summary>
        /// Event for the initial response.
        /// </summary>
        public event EventHandler<EventStreamEventReceivedArgs<InitialResponseEvent>> InitialResponseReceived;
<#
        }
        else if(isRequest)
        {
#>
        /// <summary>
        /// Event for the initial request.
        /// </summary>
        public event EventHandler<EventStreamEventReceivedArgs<InitialRequestEvent>> InitialRequestReceived;
<#
        }
#>
<#
        foreach(var member in this.Structure.Members)
        {
            if(member.ModelShape.IsEvent)
            {
#>
        ///<summary>
        ///Raised when an <#=member.PropertyName#> event is received
        ///</summary>
        public event EventHandler<EventStreamEventReceivedArgs<<#=member.DetermineType()#>>> <#=member.PropertyName#>Received;
<#
            }
#>
<#
        }
#>

        /// <summary>
        /// Construct an instance
        /// </summary>
        /// <param name="stream"></param>        
        public <#=this.Structure.Name#>(Stream stream) : this (stream, null)
        {
        }

        /// <summary>
        /// Construct an instance
        /// </summary>
        /// <param name="stream"></param>
        /// <param name="eventStreamDecoder"></param>
        public <#=this.Structure.Name#>(Stream stream, IEventStreamDecoder eventStreamDecoder) : base(stream, eventStreamDecoder)
        {
            base.EventReceived += (sender,args) => EventReceived?.Invoke(this, args);
            base.ExceptionReceived += (sender,args) => ExceptionReceived?.Invoke(this, args);

            //Mapping the generic Event to more specific Events
            Decoder.MessageReceived += (sender, args) =>
            {
                IEventStreamEvent ev;
                try
                {
                    ev = ConvertMessageToEvent(args.Message);
                }
                catch(UnknownEventStreamException)
                {
                    throw new UnknownEventStreamException("Received an unknown event stream type");
                }
                EventReceived?.Invoke(this, new EventStreamEventReceivedArgs<IEventStreamEvent>(ev));

                //Call RaiseEvent until it returns true or all calls complete. This way only a subset of casts are perfromed
                // and we can avoid a cascade of nested if else statements. The result is thrown away
                var _ =
<#
                if(isResponse)
#>
                    RaiseEvent(InitialResponseReceived, ev) ||
<#
                else if(isRequest)
#>
                    RaiseEvent(InitialRequestReceived,ev) ||
<#

                var eventMembers = this.Structure.Members.Where(m => m.ModelShape.IsEvent).ToArray();
                if(eventMembers.Length == 1)
                {
#>
                    RaiseEvent(<#=eventMembers[0].PropertyName#>Received,ev);
<#
                }
                else if (eventMembers.Length > 1)
                {
                    for(int i = 0; i < eventMembers.Length - 1; i++)
                    {
#>
                    RaiseEvent(<#=eventMembers[i].PropertyName#>Received,ev) ||
<#
                    }
#>
                    RaiseEvent(<#=eventMembers.Last().PropertyName#>Received,ev);
<#
                }
#>
            };       
        }
        private bool RaiseEvent<T>(EventHandler<EventStreamEventReceivedArgs<T>> eventHandler, IEventStreamEvent ev) where T : class, IEventStreamEvent
        {
            var convertedEvent = ev as T;
            if (convertedEvent != null)
            {
                eventHandler?.Invoke(this, new EventStreamEventReceivedArgs<T>(convertedEvent));
                return true;
            }

            return false;
        }
