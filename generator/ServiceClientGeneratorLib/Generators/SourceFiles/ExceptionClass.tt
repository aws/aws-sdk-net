<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>
using System;
using System.Net;
using Amazon.Runtime;

namespace <#=this.Config.Namespace#>.Model
{
    ///<summary>
    /// <#= this.Config.BaseName#> exception
    /// </summary>
#if !PCL && !CORECLR
    [Serializable]
#endif
    public class <#=this.Exception.Name#> : <#=BaseException#> 
    {
        /// <summary>
        /// Constructs a new <#=this.Exception.Name#> with the specified error
        /// message.
        /// </summary>
        /// <param name="message">
        /// Describes the error encountered.
        /// </param>
        public <#=this.Exception.Name#>(string message) 
            : base(message) {}
          
        /// <summary>
        /// Construct instance of <#=this.Exception.Name#>
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public <#=this.Exception.Name#>(string message, Exception innerException) 
            : base(message, innerException) {}
            
        /// <summary>
        /// Construct instance of <#=this.Exception.Name#>
        /// </summary>
        /// <param name="innerException"></param>
        public <#=this.Exception.Name#>(Exception innerException) 
            : base(innerException) {}
            
        /// <summary>
        /// Construct instance of <#=this.Exception.Name#>
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        /// <param name="errorType"></param>
        /// <param name="errorCode"></param>
        /// <param name="requestId"></param>
        /// <param name="statusCode"></param>
        public <#=this.Exception.Name#>(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode) 
            : base(message, innerException, errorType, errorCode, requestId, statusCode) {}

        /// <summary>
        /// Construct instance of <#=this.Exception.Name#>
        /// </summary>
        /// <param name="message"></param>
        /// <param name="errorType"></param>
        /// <param name="errorCode"></param>
        /// <param name="requestId"></param>
        /// <param name="statusCode"></param>
        public <#=this.Exception.Name#>(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode) 
            : base(message, errorType, errorCode, requestId, statusCode) {}

<#		
		if(this.GenerateComplexException)
		{
			foreach(var member in Exception.Structure.Members)
			{
				if(member.PropertyName.Equals("Message")) continue;
#>
        /// <summary>
        /// Gets and sets the <#=member.PropertyName#> property.
        /// </summary>
		public <#=member.DetermineType()#> <#=member.PropertyName#> { get; set; }

<#
			}
		}
#>

#if !PCL && !CORECLR
        /// <summary>
        /// Constructs a new instance of the <#=this.Exception.Name#> class with serialized data.
        /// </summary>
        /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        /// <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
        /// <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        protected <#=this.Exception.Name#>(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        {
<#		
		if(this.GenerateComplexException)
		{
#>
            if (info != null)
            {
<#
			foreach(var member in Exception.Structure.Members)
			{
				if(member.PropertyName.Equals("Message")) continue;
#>
                this.<#=member.PropertyName#> = info.<#=member.GetSerializationInfoMethodName()#>("<#=member.PropertyName#>");
<#
			}
#>
            }
<#
		}
#>
        }

<#		
		if(this.GenerateComplexException && Exception.Structure.Members.Count > 0)
		{
#>
        /// <summary>
        /// Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
        /// </summary>
        /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        /// <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
#if BCL35
        [System.Security.Permissions.SecurityPermission(
            System.Security.Permissions.SecurityAction.LinkDemand,
            Flags = System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter)]
#endif
        [System.Security.SecurityCritical]
        // These FxCop rules are giving false-positives for this method
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2123:OverrideLinkDemandsShouldBeIdenticalToBase")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2134:MethodsMustOverrideWithConsistentTransparencyFxCopRule")]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);
            if (info != null)
            {
<#
			foreach(var member in Exception.Structure.Members)
			{
				if(member.PropertyName.Equals("Message")) continue;
#>
                info.AddValue("<#=member.PropertyName#>", this.<#=member.PropertyName#>);
<#
			}
#>
            }
        }
<#
		}
#>
#endif
    }
}

<#+
    public ExceptionModel Exception { get; set; }

	public bool GenerateComplexException { get; set; }

	public string BaseException { get; set; }
#>