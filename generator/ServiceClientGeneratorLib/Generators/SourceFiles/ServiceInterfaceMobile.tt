<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>


using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;

using Amazon.Runtime;
using <#=this.Config.Namespace#>.Model;

namespace <#=this.Config.Namespace#>
{
<#    this.FormatServiceInterfaceDocumentation(this.Config.ServiceModel.Documentation); #>
	public partial interface IAmazon<#=this.Config.BaseName#> : IAmazonService, IDisposable
	{
		<#
    // Generates definitions for each operation in the service model
		foreach(var operation in this.Config.ServiceModel.Operations)
		{
            if(operation.IsInternal)
                continue;
		#>
		
		#region  <#=operation.Name#>

<#
        // Creates a parameterless definition of the operation if specified in the customizations file
        if (this.Config.ServiceModel.Customizations.CreateNoArgOverload(operation.Name))
        {
#>
<#
		this.FormatOperationDocumentationAsync(operation, false);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        Task<<#=operation.Name#>Response> <#=operation.Name#>Async(System.Threading.CancellationToken cancellationToken = default(CancellationToken));

<#
        }

        AddSimpleClientMethodInterfaces(operation, false);
#>

<#        
        AddAsyncDocumentation(operation.Name);
		if(operation.IsDeprecated)
		{
#>
		[Obsolete("<#=operation.DeprecationMessage#>")]
<#		
		}
#>
        Task<<#=operation.Name#>Response> <#=operation.Name#>Async(<#=operation.Name#>Request request, System.Threading.CancellationToken cancellationToken = default(CancellationToken));

		#endregion
		<#
		}
		#>

	}
}
