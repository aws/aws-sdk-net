<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>
using System;
using System.Collections.Generic;
using System.Net;
using System.Text;

using Amazon.Runtime;

namespace <#=this.Config.Namespace#>
{
    ///<summary>
    /// Common exception for the <#=this.Config.BaseName#> service.
    /// </summary>
#if !PCL && !CORECLR
    [Serializable]
#endif
    public class Amazon<#=this.Config.BaseName#>Exception : AmazonServiceException
    {
        /// <summary>
        /// Construct instance of Amazon<#=this.Config.BaseName#>Exception
        /// </summary>
        /// <param name="message"></param>
        public Amazon<#=this.Config.BaseName#>Exception(string message)
            : base(message)
        {
        }

        /// <summary>
        /// Construct instance of Amazon<#=this.Config.BaseName#>Exception
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public Amazon<#=this.Config.BaseName#>Exception(string message, Exception innerException)
            : base(message, innerException)
        {
        }

        /// <summary>
        /// Construct instance of Amazon<#=this.Config.BaseName#>Exception
        /// </summary>
        /// <param name="innerException"></param>
        public Amazon<#=this.Config.BaseName#>Exception(Exception innerException)
            : base(innerException.Message, innerException)
        {
        }

        /// <summary>
        /// Construct instance of Amazon<#=this.Config.BaseName#>Exception
        /// </summary>
        /// <param name="message"></param>
        /// <param name="errorType"></param>
        /// <param name="errorCode"></param>
        /// <param name="requestId"></param>
        /// <param name="statusCode"></param>
        public Amazon<#=this.Config.BaseName#>Exception(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode)
            : base(message, errorType, errorCode, requestId, statusCode)
        {
        }

        /// <summary>
        /// Construct instance of Amazon<#=this.Config.BaseName#>Exception
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        /// <param name="errorType"></param>
        /// <param name="errorCode"></param>
        /// <param name="requestId"></param>
        /// <param name="statusCode"></param>
        public Amazon<#=this.Config.BaseName#>Exception(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode)
            : base(message, innerException, errorType, errorCode, requestId, statusCode)
        {
        }

#if !PCL && !CORECLR
        /// <summary>
        /// Constructs a new instance of the Amazon<#=this.Config.BaseName#>Exception class with serialized data.
        /// </summary>
        /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        /// <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
        /// <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        protected Amazon<#=this.Config.BaseName#>Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(info, context)
        {
        }
#endif
    }
}