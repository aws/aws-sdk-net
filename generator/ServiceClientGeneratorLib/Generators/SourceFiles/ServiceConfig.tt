<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    AddLicenseHeader();
#>

using System;
using Amazon.Runtime;
using Amazon.Runtime.Internal;
using Amazon.Util.Internal;
using Amazon.Runtime.Internal.Auth;
using Amazon.Runtime.Endpoints;
using <#=this.Config.Namespace#>.Internal;

namespace <#=this.Config.Namespace#>
{
    /// <summary>
    /// Configuration for accessing Amazon <#=this.Config.ClassName#> service
    /// </summary>
    [AWSSignerType("<#=Config.ServiceModel.SignatureVersion#>")]
    public partial class Amazon<#=this.Config.ClassName#>Config : ClientConfig
    {
        private static readonly string UserAgentString =
            InternalSDKUtils.BuildUserAgentString("<#=this.Config.ServiceId #>", "<#=this.Config.ServiceFileVersion #>");

<# if (this.Config.EndpointsRuleSet != null) { #>
        private static readonly Amazon<#=this.Config.ClassName#>EndpointResolver EndpointResolver =
            new Amazon<#=this.Config.ClassName#>EndpointResolver();
<#}#>

        private string _userAgent = UserAgentString;
        ///<summary>
        /// The ServiceId, which is the unique identifier for a service.
        ///</summary>
        public static new string ServiceId
        {
            get
            {
                return "<#=this.Config.ServiceId#>";
            }
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public Amazon<#=this.Config.ClassName#>Config()
            : base(new Amazon.Runtime.Internal.DefaultConfigurationProvider(Amazon<#= this.Config.ClassName#>DefaultConfiguration.GetAllConfigurations()))
        {
            base.ServiceId = "<#=this.Config.ServiceId#>";
<#
            if(!string.IsNullOrEmpty(this.Config.AuthenticationServiceName))
            {
#>
            this.AuthenticationServiceName = "<#=this.Config.AuthenticationServiceName#>";
<#
            }
            if(this.Config.OverrideMaxRetries.HasValue)
            {
#>
            this.MaxErrorRetry = <#=this.Config.OverrideMaxRetries#>;
<#
            }
            if(!string.IsNullOrEmpty(this.Config.DefaultRegion))
            {
#>
            var region = FallbackRegionFactory.GetRegionEndpoint(false);
            this.RegionEndpoint = region ?? RegionEndpoint.<#=this.Config.DefaultRegion#>;
<#
            }
#>
<#
            if (this.Config.EndpointsRuleSet != null)
            {
#>
            this.EndpointProvider = new Amazon<#=this.Config.ClassName#>EndpointProvider();
<#
            }
#>
        }

        /// <summary>
        /// The constant used to lookup in the region hash the endpoint.
        /// </summary>
        public override string RegionEndpointServiceName
        {
            get
            {
                return "<#=this.Config.RegionLookupName#>";
            }
        }

        /// <summary>
        /// Gets the ServiceVersion property.
        /// </summary>
        public override string ServiceVersion
        {
            get
            {
                return "<#=this.Config.ServiceModel.APIVersion#>";
            }
        }

        /// <summary>
        /// Gets the value of UserAgent property.
        /// </summary>
        public override string UserAgent
        {
            get
            {
                return _userAgent;
            }
        }

<# if (this.Config.EndpointsRuleSet != null)
       foreach(var parameter in this.Config.ServiceModel.ClientContextParameters) {
#>
        /// <summary>
        /// <#=parameter.documentation#>
        /// </summary>
        public <#=parameter.nativeType#> <#=parameter.name#> { get; set; }

<#}#>
<# if (this.Config.EndpointsRuleSet != null) { #>
        /// <summary>
        /// Returns the endpoint that will be used for a particular request.
        /// </summary>
        /// <param name="parameters">A Container class for parameters used for endpoint resolution.</param>
        /// <returns>The resolved endpoint for the given request.</returns>
        public override Amazon.Runtime.Endpoints.Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters)
        {
            var requestContext = new RequestContext(false)
            {
                ClientConfig = this,
                OriginalRequest = parameters.Request,
                Request = new DefaultRequest(parameters.Request, ServiceId)
                {
                    AlternateEndpoint = parameters.AlternateEndpoint
                }
            };

            var executionContext = new Amazon.Runtime.Internal.ExecutionContext(requestContext, null);
            return EndpointResolver.GetEndpoint(executionContext);
        }

<# } 
else if (this.Config.IsTestService) 
{ #>
        /// <summary>
        /// Returns the endpoint that will be used for a particular request.
        /// </summary>
        /// <param name="parameters">A Container class for parameters used for endpoint resolution.</param>
        /// <returns>The resolved endpoint for the given request.</returns>
        public override Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters)
        {
            // If the current service doesn't have an endpoint rule set (which is the case for configs
            // that are used for testing), we'll return a placeholder endpoint so that unit tests pass.
            return new Endpoint(this.ServiceURL ?? "https://example.com");
        }
<#}#>

    }
}