<#@ template language="C#" inherits="Generators.BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Json.LitJson" #>
<#
	AddLicenseHeader();
#>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Amazon;
using <#=this.Config.Namespace#>;
using <#=this.Config.Namespace#>.Model;

namespace AWSSDK_DotNet.IntegrationTests.SmokeTestsV2
{
    [TestClass]
    public class <#=this.Config.ClassName#>SmokeTestsV2
    {
<#
		foreach (JsonData testCase in this.Config.ServiceModel.SmokeTestsV2Root["testCases"])
		{
            var modeledOperation = FindOperation(testCase);
            if (modeledOperation == null)
                throw new ApplicationException($"Failed to find operation {testCase["operationName"]} for {testCase["id"]} while generating smoke tests for service {this.Config.ServiceModel.ServiceId}");

            var testTags = testCase["tags"] as JsonData;
#>

        [TestMethod]
        [TestCategory("SmokeTests")]
        [TestCategory("<#=this.Config.ServiceModel.ServiceId#>")]
<#
            if (testTags != null && testTags.IsArray)
            {
                foreach (JsonData tag in testTags)
                {
                    var tagValue = tag?.ToString();
                    if (!string.IsNullOrEmpty(tagValue))
                    {
#>
        [TestCategory("<#=tagValue#>")]
<#
                    }
                }
            }
#>
        public async Task <#=testCase["id"]#>()
        {
            var serviceConfig = new Amazon<#=this.Config.ClassName#>Config();
<#
            var region = this.GetRegion(testCase);
            if (!string.IsNullOrEmpty(region))
            {
#>
            serviceConfig.RegionEndpoint = RegionEndpoint.GetBySystemName(<#=region#>);
<#
            }
            if (this.GetUseFipsEndpoint(testCase) != null && (bool)this.GetUseFipsEndpoint(testCase))
            {
#>
            serviceConfig.UseFIPSEndpoint = true;
<#
            }
            if (this.GetUseDualstackEndpoint(testCase) != null && (bool)this.GetUseDualstackEndpoint(testCase))
            {
#>
            serviceConfig.UseDualstackEndpoint = true;
<#
            }
            var uri = this.GetUri(testCase);
            if (!string.IsNullOrEmpty(uri))
            {
#>
            serviceConfig.ServiceURL = <#=uri#>;
<#
            }
            if (this.GetUseAccelerateEndpoint(testCase) != null)
            {
#>
            serviceConfig.UseAccelerateEndpoint = <#=this.GetUseAccelerateEndpoint(testCase).ToString().ToLower()#>;
<#
            }
            if (this.GetUseGlobalEndpoint(testCase) != null)
            {
#>
            serviceConfig.UseGlobalEndpoint = <#=this.GetUseGlobalEndpoint(testCase).ToString().ToLower()#>;
<#
            }
            if (this.GetUseArnRegion(testCase) != null)
            {
#>
            serviceConfig.UseArnRegion = <#=this.GetUseArnRegion(testCase).ToString().ToLower()#>;
<#
            }
            if (this.GetForcePathStyle(testCase) != null)
            {
#>
            serviceConfig.ForcePathStyle = <#=this.GetForcePathStyle(testCase).ToString().ToLower()#>;
<#
            }
            if (this.GetUseAccountIdRouting(testCase) != null)
            {
#>
            serviceConfig.UseAccountIdRouting = <#=this.GetUseAccountIdRouting(testCase).ToString().ToLower()#>;
<#
            }
            var sigV4aRegionSet = this.GetSigV4aRegionSet(testCase);
            if (sigV4aRegionSet != null && sigV4aRegionSet.Length > 0)
            {
#>
            serviceConfig.SignatureVersion = "4a";
            serviceConfig.SigningRegion = "<#=string.Join(",", sigV4aRegionSet)#>";
<#
            }
#>
       
            var serviceClient = new Amazon<#=this.Config.ClassName#>Client(serviceConfig);
            var request = new <#=modeledOperation.Name#>Request();

<#
            var input = testCase["input"] as JsonData;
            if (input != null && input.IsObject)
            {
                foreach (string jsonKey in input.PropertyNames)
                {
                    var propertyName = FindPropertyName(modeledOperation, jsonKey);
                    var value = input[jsonKey];
                    if (value != null)
                    {
                        if (value.IsString)
                        {
#>
            request.<#=propertyName#> = "<#=value.ToString()#>";
<#
                        }
                        else if (value.IsInt)
                        {
#>
            request.<#=propertyName#> = (int)<#=value#>;
<#
                        }
                        else if (value.IsBoolean)
                        {
#>
            request.<#=propertyName#> = <#=value.ToString().ToLower()#>;
<#
                        }
                        else if (value.IsArray)
                        {
                            if (propertyName == "Tags")
                            {
#>
            request.Tags = new List<Tag>();
<#
                                foreach (JsonData tag in value)
                                {
                                    if (tag != null && tag.IsObject && tag["Key"] != null && tag["Value"] != null)
                                    {
#>
            request.Tags.Add(new Tag { Key = "<#=tag["Key"]#>", Value = "<#=tag["Value"]#>" });
<#
                                    }
                                }
                            }
                            else
                            {
                                // Check if all items are strings
                                bool allStrings = true;
                                foreach (JsonData item in value)
                                {
                                    if (item != null && !item.IsString)
                                    {
                                        allStrings = false;
                                        break;
                                    }
                                }

                                if (allStrings)
                                {
#>
            request.<#=propertyName#> = new List<string> 
            {
<#
                                }
                                else
                                {
#>
            request.<#=propertyName#> = new List<object> 
            {
<#
                                }
                                var isFirst = true;
                                foreach (JsonData item in value)
                                {
                                    if (item != null)
                                    {
                                        if (!isFirst)
                                        {
#>
                ,
<#
                                        }
                                        if (item.IsString)
                                        {
#>
                "<#=item.ToString()#>"
<#
                                        }
                                        else if (item.IsInt)
                                        {
#>
                <#=item.ToString()#>
<#
                                        }
                                        else if (item.IsBoolean)
                                        {
#>
                <#=item.ToString().ToLower()#>
<#
                                        }
                                        else if (item.IsDouble)
                                        {
#>
                <#=item.ToString()#>
<#
                                        }
                                        isFirst = false;
                                    }
                                }
#>
            };
<#
                            }
                        }
                        else if (value.IsObject)
                        {
                            if (propertyName == "Includes")
                            {
#>
            request.<#=propertyName#> = new Filters
            {
<#
                                var keyTypes = value["keyTypes"] as JsonData;
                                if (keyTypes != null && keyTypes.IsArray)
                                {
                                    var keyTypeValues = new List<string>();
                                    foreach (JsonData keyType in keyTypes)
                                    {
                                        if (keyType != null && keyType.IsString)
                                        {
                                            keyTypeValues.Add($"\"{keyType.ToString()}\"");
                                        }
                                    }
                                    if (keyTypeValues.Count > 0)
                                    {
#>
                KeyTypes = new List<string> { <#=string.Join(", ", keyTypeValues)#> }
<#
                                    }
                                }
#>
            };
<#
                            }
                        }
                    }
                }
            }

            if (IsSuccessExpected(testCase))
            {
#>
            var response = await serviceClient.<#=modeledOperation.Name#>Async(request);
<#
            }
            else
            {
                var errorId = GetExpectedErrorId(testCase);
#>
            try
            {
                var response = await serviceClient.<#=modeledOperation.Name#>Async(request);
                Assert.Fail("Expected <#=errorId ?? "an error response"#> exception, but the call succeeded.");
            }
            catch (Amazon<#=this.Config.ClassName#>Exception ex)
            {
<#
                if (!string.IsNullOrEmpty(errorId))
                {
#>
                Assert.AreEqual("<#=errorId#>", ex.ErrorCode);
<#
                }
#>
            }
<#
            }
#>
        }
<#
        }
#>
    }
}