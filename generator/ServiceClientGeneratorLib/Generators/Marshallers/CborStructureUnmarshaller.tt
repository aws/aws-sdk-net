<#@ template language="C#" inherits="BaseResponseUnmarshaller"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    AddLicenseHeader();

    AddCommonUsingStatements();
#>
using System.Text.Json;
#pragma warning disable CS0612,CS0618
namespace <#=this.Config.Namespace #>.Model.Internal.MarshallTransformations
{
    /// <summary>
    /// Response Unmarshaller for <#=this.UnmarshallerBaseName #> Object
    /// </summary>  
    public class <#=this.UnmarshallerBaseName #>Unmarshaller : IJsonUnmarshaller<<#=this.UnmarshallerBaseName #>, JsonUnmarshallerContext>
    {
        /// <summary>
        /// Unmarshaller the response from the service to the response class.
        /// </summary>  
        /// <param name="context"></param>
        /// <param name="reader"></param>
        /// <returns>The unmarshalled object</returns>
        public <#=this.UnmarshallerBaseName #> Unmarshall(JsonUnmarshallerContext context, ref StreamingUtf8JsonReader reader)
        {
            <#=this.UnmarshallerBaseName #> unmarshalledObject = new <#=this.UnmarshallerBaseName #>();
            if (context.IsEmptyResponse)
                return null;
<#
    //HasImplicitEventPayloadMembers means that the structure does not have a member with the EventPayload trait
    if(this.Structure != null && this.Structure.IsEvent && !this.Structure.HasImplicitEventPayloadMembers())
    {
    Member eventPayloadMember = this.Structure.GetExplicitEventPayloadMember();
        if(eventPayloadMember.ModelShape.IsString)
        {
#>
            using (var sr = new StreamReader(context.Stream))
            {
                unmarshalledObject.<#=eventPayloadMember.PropertyName#> = sr.ReadToEnd();
            }
<#
        }
#>
<#
        else
        {
#>
            unmarshalledObject.<#=eventPayloadMember.PropertyName#> = context.Stream as MemoryStream;
<#
        }
#>
<#
    }
#>
<#
    if(this.Structure != null && (this.Structure.HasImplicitEventPayloadMembers() || !this.Structure.IsEvent))
    {
#>
            context.Read(ref reader);
            if (context.CurrentTokenType == JsonTokenType.Null) 
                return null;

            int targetDepth = context.CurrentDepth;
            while (context.ReadAtDepth(targetDepth, ref reader))
            {
<#
    }
#>
<#
    if(this.Structure != null && (!this.Structure.IsEvent ||  this.Structure.HasImplicitEventPayloadMembers()))
    {
        foreach (var member in this.Structure.Members)
        {
#>
                if (context.TestExpression("<#=member.MarshallName#>", targetDepth))
                {
                    var unmarshaller = <#= member.DetermineTypeUnmarshallerInstantiate() #>;
                    unmarshalledObject.<#=member.PropertyName#> = unmarshaller.Unmarshall(context, ref reader);
                    continue;
                }
<#
        }
    }
#>
<#
    if(this.Structure != null && (!this.Structure.IsEvent || this.Structure.HasImplicitEventPayloadMembers()))
    {
#>
            }
<#
    }
#>
            return unmarshalledObject;
        }


<#
    this.AddStructureSingletonMethod();
#>
    }
}