<#@ template language="C#" inherits="BaseResponseUnmarshaller" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    AddLicenseHeader();

    AddCommonUsingStatements();
#>

#pragma warning disable CS0612,CS0618
namespace <#=this.Config.Namespace #>.Model.Internal.MarshallTransformations
{
    /// <summary>
    /// Response Unmarshaller for <#=this.UnmarshallerBaseName #> Object
    /// </summary>  
    public class <#=this.UnmarshallerBaseName #>Unmarshaller : IXmlUnmarshaller<<#=this.UnmarshallerBaseName #>, XmlUnmarshallerContext>
    {
        /// <summary>
        /// Unmarshaller the response from the service to the response class.
        /// </summary>  
        /// <param name="context"></param>
        /// <returns></returns>
        public <#=this.UnmarshallerBaseName #> Unmarshall(XmlUnmarshallerContext context)
        {
            <#=this.UnmarshallerBaseName #> unmarshalledObject = new <#=this.UnmarshallerBaseName #>();
<#
    if(this.Structure != null && this.Structure.IsEvent && !this.Structure.HasImplicitEventPayloadMembers())
    {
        Member eventPayloadMember = this.Structure.GetExplicitEventPayloadMember();
        if(eventPayloadMember.ModelShape.IsString)
        {
#>
            using (var sr = new StreamReader(context.Stream))
            {
                unmarshalledObject.<#=eventPayloadMember.PropertyName#> = sr.ReadToEnd();
            }
<#
        }
        else
        {
#>
            unmarshalledObject.<#=eventPayloadMember.PropertyName#> = context.Stream as MemoryStream;
<#
        }
    }
#>
<#
     //HasImplicitEventPayloadMembers means that the structure does not have a member with the EventPayload trait
     if(this.Structure != null && (this.Structure.HasImplicitEventPayloadMembers() || !this.Structure.IsEvent))
     {
#>
            int originalDepth = context.CurrentDepth;
            int targetDepth = originalDepth + 1;
            
            if (context.IsStartOfDocument) 
               targetDepth += 2;
            
            while (context.Read())
            {
                if (context.IsStartElement || context.IsAttribute)
                {
<#
    }
#>
<#
    if(this.Structure != null && (!this.Structure.IsEvent ||  this.Structure.HasImplicitEventPayloadMembers()))
    {
        // For every member, generate code to add the unmarshalled member to the response object
        foreach (var member in this.Structure.Members)
        {
            ProcessResponseBodyOrStructureMembers(member, true);
#>
<#
        }
    }
#>
				}
                else if (context.IsEndElement && context.CurrentDepth < originalDepth)
                {
                    return unmarshalledObject;
                }
            }          
            return unmarshalledObject;
        }
<#
    this.AddStructureSingletonMethod();
#>
    }
}