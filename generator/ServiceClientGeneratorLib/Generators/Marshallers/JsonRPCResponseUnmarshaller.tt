<#@ template language="C#" inherits="BaseResponseUnmarshaller"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    AddLicenseHeader();

    AddCommonUsingStatements();
#>
using ThirdParty.Json.LitJson;

namespace <#=this.Config.Namespace #>.Model.Internal.MarshallTransformations
{
    /// <summary>
    /// Response Unmarshaller for <#=this.UnmarshallerBaseName #> operation
    /// </summary>  
    public class <#=this.UnmarshallerBaseName #>ResponseUnmarshaller : JsonResponseUnmarshaller
    {
        /// <summary>
        /// Unmarshaller the response from the service to the response class.
        /// </summary>  
        /// <param name="context"></param>
        /// <returns></returns>
        public override AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context)
        {
            <#=this.UnmarshallerBaseName #>Response response = new <#=this.Operation.Name #>Response();

<#
    var payload = this.Operation.ResponsePayloadMember;
    var unmarshallPayload = payload != null && payload.IsStructure;
    var payloadIsStream= payload != null && !unmarshallPayload;
    if( this.Operation.ResponseHasBodyMembers || payload != null )
    {
        if(this.Operation.AllowEmptyResult){
            throw new NotImplementedException("AllowEmptyResult is not implemented for JSON unmarshallers");
        }
        else if (payloadIsStream)
        {
            if (payload.IsStreaming)
            {
#>
            response.<#=payload.PropertyName#> = context.Stream;
<#
            }
            else
            {
#>
            var ms = new MemoryStream();
            Amazon.Util.AWSSDKUtils.CopyStream(context.Stream, ms);
            ms.Seek(0, SeekOrigin.Begin);
            response.<#=payload.PropertyName#> = ms;
<#
            }
        }
        else if (unmarshallPayload)
        {
#>
            var unmarshaller = <#= payload.DetermineTypeUnmarshallerInstantiate() #>;
            response.<#=payload.PropertyName#> = unmarshaller.Unmarshall(context);
<#
        }
		else if(this.IsWrapped)
		{
#>
			response.<#=this.WrappedResultMember#> = <#=this.Structure.Name#>Unmarshaller.Instance.Unmarshall(context);
<#
		}
        else
        {
#>
            context.Read();
            int targetDepth = context.CurrentDepth;
            while (context.ReadAtDepth(targetDepth))
            {
<#
        
            foreach (var member in this.Operation.ResponseBodyMembers)
            {
#>
                if (context.TestExpression("<#=member.MarshallName#>", targetDepth))
                {
                    var unmarshaller = <#= member.DetermineTypeUnmarshallerInstantiate() #>;
                    response.<#=member.PropertyName#> = unmarshaller.Unmarshall(context);
                    continue;
                }
<#
            }
#>
            }
<#
        }
    }
	UnmarshallHeaders();
	ProcessStatusCode();
#>

            return response;
        }

        /// <summary>
        /// Unmarshaller error response to exception.
        /// </summary>  
        /// <param name="context"></param>
        /// <param name="innerException"></param>
        /// <param name="statusCode"></param>
        /// <returns></returns>
        public override AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode)
        {
            var errorResponse = JsonErrorResponseUnmarshaller.GetInstance().Unmarshall(context);
            errorResponse.InnerException = innerException;
            errorResponse.StatusCode = statusCode;

            var responseBodyBytes = context.GetResponseBodyBytes();

            using (var streamCopy = new MemoryStream(responseBodyBytes))
            using (var contextCopy = new JsonUnmarshallerContext(streamCopy, false, null))
            {
<#
    foreach (var exception in this.Operation.Exceptions)
    {
#>
                if (errorResponse.Code != null && errorResponse.Code.Equals("<#=exception.Code #>"))
                {
                    return <#=exception.Name#>Unmarshaller.Instance.Unmarshall(contextCopy, errorResponse);
                }
<#
    }
#>
            }
            return new <#=this.BaseException#>(errorResponse.Message, errorResponse.InnerException, errorResponse.Type, errorResponse.Code, errorResponse.RequestId, errorResponse.StatusCode);
        }

<#
    if (payload != null && payload.IsStreaming)
    {
#>
        /// <summary>
        /// Overriden to return true indicating the response contains streaming data.
        /// </summary>
        public override bool HasStreamingProperty
        {
            get
            {
                return true;
            }
        }

<#
	}
    this.AddResponseSingletonMethod();
#>
    }
}