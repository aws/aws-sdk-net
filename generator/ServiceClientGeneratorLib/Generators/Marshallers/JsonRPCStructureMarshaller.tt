<#@ template language="C#" inherits="BaseRequestMarshaller" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();

	AddCommonUsingStatements();
#>
#pragma warning disable CS0612,CS0618
namespace <#=        this.Config.Namespace #>.Model.Internal.MarshallTransformations
{
	/// <summary>
	/// <#=this.Structure.Name #> Marshaller
	/// </summary>
	public class <#=this.Structure.Name #>Marshaller : IRequestMarshaller<<#=this.Structure.Name #>, JsonMarshallerContext> 
	{
        /// <summary>
        /// Unmarshaller the response from the service to the response class.
        /// </summary>  
        /// <param name="requestObject"></param>
        /// <param name="context"></param>
        /// <returns></returns>
		public void Marshall(<#=this.Structure.Name #> requestObject, JsonMarshallerContext context)
		{
			if(requestObject == null)
				return;
<#
    ProcessMembers(0, "requestObject", this.Structure.Members);
#>
		}

        /// <summary>
        /// Singleton Marshaller.
        /// </summary>
		public readonly static <#=this.Structure.Name #>Marshaller Instance = new <#=this.Structure.Name #>Marshaller();

	}
}

<#+
	protected void ProcessMembers(int level, string variableName, IEnumerable<Member> members)
	{
		foreach(var member in members)
		{
			if (member.ModelShape.IsEventStream)
				continue;
#>
<#=new string(' ', level * 4)#>            if(<#=variableName#>.IsSet<#=member.PropertyName#>())
<#=new string(' ', level * 4)#>            {
<#+
			if (member.IsEventPayload)
			{
				if (member.IsMemoryStream)
				{
#>
<#=new string(' ', level * 4)#>                context.Request.Content = requestObject.<#=member.PropertyName#>.ToArray();
<#+
				}
				else
				{
#>
<#=new string(' ', level * 4)#>                context.Request.Content = UTF8Encoding.UTF8.GetBytes(requestObject.<#=member.PropertyName#>));
<#+
				}
#>
<#=new string(' ', level * 4)#>            }
<#+
				continue;
			}
			else
			{
#>
<#=new string(' ', level * 4)#>                context.Writer.WritePropertyName("<#=member.MarshallName#>");
<#+
			}
			string memberProperty = variableName + "." + member.PropertyName;
			// Only append .Value for nullable types that aren't already complex types
			if (member.IsNullable && !member.IsStructure && !member.IsList && !member.IsMap) 
			{
				memberProperty += ".Value";
			}
			if(member.IsStructure || member.IsList || member.IsMap)
			{
				this.ProcessStructure(level + 1, variableName + "." + member.PropertyName, member.Shape);
			}
            else if(!string.IsNullOrEmpty(member.CustomMarshallerTransformation))
            {
				DetermineCustomMarshallerJsonWriteMethod(member, memberProperty, level);
#>
<#+
            }
			else if(member.IsMemoryStream)
			{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteStringValue(StringUtils.FromMemoryStream(<#=variableName + "." + member.PropertyName#>));
<#+
			}
			else
			{
				// Only use timestamp format based marshalling if format is not Unix epoch, which is the default for json/rest-json
				if(member.IsTimeStamp && member.TimestampFormat != TimestampFormat.UnixTimestamp)
				{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteStringValue(<#=member.PrimitiveMarshaller#>(<#=variableName + "." + member.PropertyName#>));
<#+
				}
				else if(member.Shape.IsDouble)
				{
#>
<#=new string(' ', level * 4)#>				if(StringUtils.IsSpecialDoubleValue(<#=memberProperty#>))
<#=new string(' ', level * 4)#>				{
<#=new string(' ', level * 4)#>					context.Writer.WriteStringValue(StringUtils.FromSpecialDoubleValue(<#=memberProperty#>));
<#=new string(' ', level * 4)#>				}
<#=new string(' ', level * 4)#>				else
<#=new string(' ', level * 4)#>				{
<#=new string(' ', level * 4)#>					context.Writer.WriteNumberValue(<#=memberProperty#>);
<#=new string(' ', level * 4)#>				}
<#+
				}
				else if(member.Shape.IsFloat)
				{
#>
<#=new string(' ', level * 4)#>				if(StringUtils.IsSpecialFloatValue(<#=memberProperty#>))
<#=new string(' ', level * 4)#>				{
<#=new string(' ', level * 4)#>					context.Writer.WriteStringValue(StringUtils.FromSpecialFloatValue(<#=memberProperty#>));
<#=new string(' ', level * 4)#>				}
<#=new string(' ', level * 4)#>				else
<#=new string(' ', level * 4)#>				{
<#=new string(' ', level * 4)#>					context.Writer.WriteNumberValue(<#=memberProperty#>);
<#=new string(' ', level * 4)#>				}
<#+
				}
				else
				{
					DetermineNormalJsonWriteMethod(member.Shape, memberProperty, level);
#>
<#+
				}
			}
#>
<#=new string(' ', level * 4)#>            }

<#+
			if(member.IsIdempotent)
			{
#>
<#=new string(' ', level * 4)#> 		   else if(!(<#=variableName#>.IsSet<#=member.PropertyName#>()))
<#=new string(' ', level * 4)#> 		   {
<#=new string(' ', level * 4)#>                context.Writer.WritePropertyName("<#=member.MarshallName#>");
<#=new string(' ', level * 4)#>                context.Writer.WriteStringValue(Guid.NewGuid().ToString());
<#=new string(' ', level * 4)#> 		   }
<#+					
			}
		}
	}

    protected void ProcessRequestPayloadMember(int level, string variableName, Shape structure)
    {
#>

<#=new string(' ', level * 4)#>                var marshaller = <#=structure.Name#>Marshaller.Instance;
<#=new string(' ', level * 4)#>                marshaller.Marshall(<#=variableName#>, context);
<#+
    }

	protected void ProcessStructure(int level, string variableName, Shape structure)
	{
			string flatVariableName = variableName.Replace(".", "");

			if(structure.IsList)
			{
#>
<#=new string(' ', level * 4)#>            context.Writer.WriteStartArray();
<#=new string(' ', level * 4)#>            foreach(var <#=flatVariableName#>ListValue in <#=variableName#>)
<#=new string(' ', level * 4)#>            {
<#+ 
				ProcessStructure(level + 1, flatVariableName + "ListValue", structure.ListShape);
#>
<#=new string(' ', level * 4)#>            }
<#=new string(' ', level * 4)#>            context.Writer.WriteEndArray();
<#+
			}
			else if(structure.IsMap)
			{
				ProcessMap(level, variableName, structure);
			}
			else if(structure.IsDocument)
			{
#>
<#=new string(' ', level * 4)#>            Amazon.Runtime.Documents.Internal.Transform.DocumentMarshaller.Instance.Write(context.Writer, <#=variableName#>);
<#+

			}
			else if(structure.IsStructure)
			{
#>
<#=new string(' ', level * 4)#>            context.Writer.WriteStartObject();

<#=new string(' ', level * 4)#>            var marshaller = <#=structure.Name#>Marshaller.Instance;
<#=new string(' ', level * 4)#>            marshaller.Marshall(<#=variableName#>, context);

<#=new string(' ', level * 4)#>            context.Writer.WriteEndObject();
<#+
			}
			else if(structure.IsMemoryStream)
			{
#>
<#=new string(' ', level * 4)#>            context.Writer.WriteStringValue(StringUtils.FromMemoryStream(<#=variableName#>));
<#+
			}
			else
			{
				// Only use timestamp format based marshalling if format is not Unix epoch, which is the default for json/rest-json
				if(structure.IsTimeStamp && structure.GetTimestampFormat(MarshallLocation.Body) != TimestampFormat.UnixTimestamp)
				{
#>
<#=new string(' ', level * 4)#>				context.Writer.WriteStringValue(<#=structure.PrimitiveMarshaller(MarshallLocation.Body)#>(<#=variableName#>));
<#+
				}
				else
				{
					DetermineNormalJsonWriteMethod(structure, variableName, level);
				}
				
			}
	}

	protected void ProcessMap(int level, string variableName, Shape structure)
	{
		string flatVariableName = variableName.Replace(".", "");
#>
<#=new string(' ', level * 4)#>            context.Writer.WriteStartObject();
<#=new string(' ', level * 4)#>            foreach (var <#=flatVariableName#>Kvp in <#=variableName#>)
<#=new string(' ', level * 4)#>            {
<#=new string(' ', level * 4)#>                context.Writer.WritePropertyName(<#=flatVariableName#>Kvp.Key);
<#=new string(' ', level * 4)#>                var <#=flatVariableName#>Value = <#=flatVariableName#>Kvp.Value;

<#+             // Check for null values - only null checks for sparse maps as defined in customizations

                bool isNullableMap = false;
                if (this.Structure != null)
                {
                    var memberWithMap = this.Structure.Members.FirstOrDefault(m => m.PropertyName == variableName.Split('.').Last());
                    isNullableMap = (memberWithMap != null && memberWithMap.UseNullable);
                }
                
                if (isNullableMap)
                {
#>
<#=new string(' ', level * 4)#>                if (<#=flatVariableName#>Value == null)
<#=new string(' ', level * 4)#>                {
<#=new string(' ', level * 4)#>                    context.Writer.WriteNullValue();
<#=new string(' ', level * 4)#>                }
<#=new string(' ', level * 4)#>                else
<#=new string(' ', level * 4)#>                {
<#+
                }

                if(structure.ValueShape.IsBoolean)
                {
                    if(isNullableMap)
                    {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteBooleanValue(<#=flatVariableName#>Value.Value);
<#+
                    }
                    else
                    {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteBooleanValue(<#=flatVariableName#>Value);
<#+
                    }
                }
                else if(structure.ValueShape.IsInt || structure.ValueShape.IsLong || structure.ValueShape.IsFloat || structure.ValueShape.IsDouble)
                {
                    if(isNullableMap)
                    {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteNumberValue(<#=flatVariableName#>Value.Value);
<#+
                    }
                    else
                    {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteNumberValue(<#=flatVariableName#>Value);
<#+
                    }
                }
                else if(structure.ValueShape.IsTimeStamp)
                {
                    if(isNullableMap)
                    {
                        if (structure.ValueShape.data[Shape.TimestampFormatKey] != null && !string.Equals(structure.ValueShape.data["timestampFormat"].ToString(), "unixTimestamp"))
                        {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteStringValue(<#=flatVariableName#>Value.Value);
<#+
                        }
                        else
                        {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteNumberValue(Convert.ToInt64(StringUtils.FromDateTimeToUnixTimestamp(<#=flatVariableName#>Value.Value)));
<#+
                        }
                    }
                    else
                    {
                        if (structure.ValueShape.data[Shape.TimestampFormatKey] != null && !string.Equals(structure.ValueShape.data["timestampFormat"].ToString(), "unixTimestamp"))
                        {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteStringValue(<#=flatVariableName#>Value);
<#+
                        }
                        else
                        {
#>
<#=new string(' ', level * 4)#>                    context.Writer.WriteNumberValue(Convert.ToInt64(StringUtils.FromDateTimeToUnixTimestamp(<#=flatVariableName#>Value)));
<#+
                        }
                    }
                }
                else
                {
                    if(isNullableMap)
                    {
                            ProcessStructure(level + 2, flatVariableName + "Value", structure.ValueShape);
                    }
                    else
                    {
                            ProcessStructure(level + 1, flatVariableName + "Value", structure.ValueShape);
                    }
                }

                // Close the else block for nullable maps
                if (isNullableMap)
                {
#>
<#=new string(' ', level * 4)#>                }
<#+
                }
#>
<#=new string(' ', level * 4)#>            }
<#=new string(' ', level * 4)#>            context.Writer.WriteEndObject();
<#+
	}

	protected void DetermineCustomMarshallerJsonWriteMethod(Member member, string memberProperty, int level)
	{
		if (String.Equals(member.CustomMarshallerTransformation,"Amazon.Util.AWSSDKUtils.ConvertToUnixEpochMilliseconds", StringComparison.OrdinalIgnoreCase))
		{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteNumberValue(<#=member.CustomMarshallerTransformation#>(<#=memberProperty#>));
<#+
		}
		else
		{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteStringValue(<#=member.CustomMarshallerTransformation#>(<#=memberProperty#>));
<#+
		}	
	}

	/// https://smithy.io/2.0/aws/protocols/aws-restjson1-protocol.html#json-shape-serialization
	/// timestamps in json protocols use unixtimestamp if none is specified (by default)
	protected void DetermineNormalJsonWriteMethod(Shape shape, string memberProperty, int level)
	{
		// One of the overloads for WriteStringValue accepts a datetime, which by default always uses ISO 8601-1 format.
		// If the timestamp format is UnixTimestamp or there is none specified, we need to write raw value in epoch seconds,
		// which can only be done by using WriteNumberValue.
		if (shape.IsString || shape.IsEnum)
		{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteStringValue(<#=memberProperty#>);
<#+
		}
		else if (shape.IsTimeStamp)
		{
			if (shape.data[Shape.TimestampFormatKey] != null && !string.Equals(shape.data["timestampFormat"].ToString(),"unixTimestamp"))
			{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteStringValue(<#=memberProperty#>);
<#+
			}
			else
			{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteNumberValue(Convert.ToInt64(StringUtils.FromDateTimeToUnixTimestamp(<#=memberProperty#>)));
<#+
			}
		}
		else if (shape.IsInt || shape.IsLong || shape.IsFloat || shape.IsDouble)
		{
			// Simple numeric value
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteNumberValue(<#=memberProperty#>);
<#+
		}
		else if (shape.IsBoolean)
		{
#>
<#=new string(' ', level * 4)#>                context.Writer.WriteBooleanValue(<#=memberProperty#>);
<#+
		}
		else
		{
			throw new Exception ("Unknown primitive type encountered");
		}
	}
#>