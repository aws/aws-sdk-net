<#@ template language="C#" inherits="BaseRequestMarshaller" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Json.LitJson"#>
<#
	AddLicenseHeader();
	
	AddCommonUsingStatements();
#>
using System.Xml;

#pragma warning disable CS0612,CS0618
namespace <#=this.Config.Namespace #>.Model.Internal.MarshallTransformations
{
	/// <summary>
	/// <#=this.Operation.Name #> Request Marshaller
	/// </summary>       
	public class <#=this.Operation.Name#>RequestMarshaller : IMarshaller<IRequest, <#=this.Operation.Name#>Request> , IMarshaller<IRequest,AmazonWebServiceRequest>
	{
        /// <summary>
        /// Marshaller the request object to the HTTP request.
        /// </summary>  
        /// <param name="input"></param>
        /// <returns></returns>
		public IRequest Marshall(AmazonWebServiceRequest input)
        {
            return this.Marshall((<#=this.Operation.Name#>Request)input);
        }

        /// <summary>
        /// Marshaller the request object to the HTTP request.
        /// </summary>  
        /// <param name="publicRequest"></param>
        /// <returns></returns>
		public IRequest Marshall(<#=this.Operation.Name #>Request publicRequest)
		{
			var request = new DefaultRequest(publicRequest, "<#=this.Config.Namespace#>");
<#
	// Assign HttpMethod if present or default to POST
	if(!string.IsNullOrWhiteSpace(this.Operation.HttpMethod)){		
#>
			request.HttpMethod = "<#=this.Operation.HttpMethod#>";
<#
	}
	var requestStructure = this.Operation.RequestStructure;
    var payload = this.Operation.RequestPayloadMember;

	SetCompressionAlgorithmEncoding(this.Operation);

    var shouldMarshallPayload = (payload != null && payload.IsStructure);

    // This block adds members of the request object to the actual request
	ProcessRequestUri(this.Operation);	
	ProcessHeaderMembers("publicRequest", this.Operation.RequestHeaderMembers);		
	ProcessUriMembers("publicRequest", this.Operation);	
	ProcessQueryStringMembers("publicRequest", this.Operation);
#>
			request.ResourcePath = "<#=this.Operation.RequestUri #>";

<#   
	// Process any members which are marshalled as part of the request body
	if(this.Operation.RequestHasBodyMembers || shouldMarshallPayload)
	{
		ProcessRequestBodyMembers("publicRequest", this.Operation);		
	}
	else if(payload != null && !payload.Shape.IsStructure)
	{
		ProcessNonStructurePayload(payload, 3);
	}
#>

<#
	// If there aren't any members that are marshalled as part of the body or streamed	
	if(this.Operation.UseQueryString)
	{
#>
			request.UseQueryString = true;
<#	}	

	// We skip endpoint host prefix handling for S3 and S3 Control as it's implemented by endpoint rules.
	if(!string.IsNullOrEmpty(this.Operation.EndpointHostPrefix) && this.Config.ServiceId != "S3" && this.Config.ServiceId != "S3 Control")
	{
		ProcessEndpointHostPrefixMembers(3, "publicRequest", this.Operation);
	}
#>
			return request;
		}
<#				
	this.AddRequestSingletonMethod();
#>
	}	
}

<#+

	void ProcessRequestBodyMembers(string variableName, Operation operation)
	{
		var level = 0;
#>
			var stringWriter = new XMLEncodedStringWriter(CultureInfo.InvariantCulture);
			using (var xmlWriter = XmlWriter.Create(stringWriter, new XmlWriterSettings() { Encoding = System.Text.Encoding.UTF8, OmitXmlDeclaration = true, NewLineHandling = NewLineHandling.Entitize }))
			{   
<#+
		if(operation.RequestPayloadMember==null)
		{
			if(string.IsNullOrEmpty(operation.XmlNamespacePrefix))
			{
#>
				xmlWriter.WriteStartElement("<#=operation.RequestStructure.MarshallName#>", "<#=operation.XmlNamespace#>");
<#+
			}
			else
			{
#>
				xmlWriter.WriteStartElement("<#=operation.RequestStructure.MarshallName#>");
				xmlWriter.WriteAttributeString("xmlns", "<#=operation.XmlNamespacePrefix#>", null, "<#=operation.XmlNamespace#>");
<#+
			}
			var requestStructureAttributes = operation.RequestStructure.Members.Where(x => x.IsXmlAttribute);
			foreach(var member in requestStructureAttributes)
			{
#>
				if(<#=variableName + ".IsSet" + member.PropertyName#>())
					xmlWriter.WriteAttributeString("<#=member.MarshallName#>", "<#=member.XmlNamespace#>",<#=member.PrimitiveMarshaller#>(<#=variableName#>.<#=member.PropertyName#>));
<#+
			}
		}
		else
		{
			if(string.IsNullOrEmpty(operation.XmlNamespace))
			{
#>
				if (<#=variableName + ".IsSet" + operation.RequestPayloadMember.PropertyName#>())
				{
					xmlWriter.WriteStartElement("<#=operation.RequestPayloadMember.LocationName != operation.RequestStructure.PayloadMemberName ? operation.RequestPayloadMember.LocationName : operation.RequestPayloadMember.Shape.MarshallName#>", "<#=operation.XmlNamespace#>");
<#+
			}
			else
			{
				if(string.IsNullOrEmpty(operation.XmlNamespacePrefix))
				{
#>
				if (<#=variableName + ".IsSet" + operation.RequestPayloadMember.PropertyName#>())
				{
					xmlWriter.WriteStartElement("<#=operation.RequestPayloadMember.LocationName != operation.RequestStructure.PayloadMemberName ? operation.RequestPayloadMember.LocationName : operation.RequestPayloadMember.Shape.MarshallName#>", "<#=operation.XmlNamespace#>");
<#+
				}
				else
				{
#>
				if (<#=variableName + ".IsSet" + operation.RequestPayloadMember.PropertyName#>())
				{
					xmlWriter.WriteStartElement("<#=operation.RequestPayloadMember.LocationName != operation.RequestStructure.PayloadMemberName ? operation.RequestPayloadMember.LocationName : operation.RequestPayloadMember.Shape.MarshallName#>");
					xmlWriter.WriteAttributeString("xmlns","<#=operation.XmlNamespacePrefix#>",null,"<#=operation.XmlNamespace#>");
<#+
				}
#>
<#+
			}
			var requestPayloadAttributes = operation.RequestPayloadMember.Shape.Members.Where(x => x.IsXmlAttribute);
			foreach(var member in requestPayloadAttributes)
			{
#>
					if(<#=variableName + "." + operation.RequestPayloadMember.PropertyName + ".IsSet" + member.PropertyName#>())
						xmlWriter.WriteAttributeString("<#=member.MarshallName#>","<#=member.XmlNamespace#>",<#=member.PrimitiveMarshaller#>(<#=variableName#>.<#=operation.RequestPayloadMember.PropertyName#>.<#=member.PropertyName#>));
<#+
			}
			level++;
		}
		var childmembers = operation.RequestPayloadMember == null ? operation.RequestBodyMembers.Where(x => !x.IsXmlAttribute) : operation.RequestPayloadMember.Shape.Members.Where(x => !x.IsXmlAttribute);
		variableName = operation.RequestPayloadMember == null ? variableName : variableName + "." + operation.RequestPayloadMember.PropertyName;
		foreach(var member in childmembers)
		{			
			if(member.IsStructure)
			{
				ProcessStructure(level, variableName, member);				
			}
			else if(member.IsList)
			{
				ProcessList(level, variableName, member);
			}
			else if(member.IsMap)
			{
#>
<#=new string(' ', (level + 4) * 4)#>if(<#=variableName#>.IsSet<#=member.PropertyName#>())
<#=new string(' ', (level + 4) * 4)#>{
<#+
				if(member.IsFlattened)
				{
					ProcessFlattenedMap(level,variableName,member);
				}
				else
				{
					ProcessMap(level, variableName, member);
				}
#>
<#=new string(' ', (level + 4) * 4)#>}
<#+
			}
			else
			{
#>
<#=new string(' ', level * 4)#>				if(<#=variableName#>.IsSet<#=member.PropertyName#>())
<#+
				if(string.IsNullOrEmpty(member.XmlNamespace))
				{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteElementString("<#=member.MarshallName#>", <#=member.PrimitiveMarshaller#>(<#=variableName#>.<#=member.PropertyName#><#=(member.UseNullable ? ".Value" : string.Empty)#>));
<#+
				}
				else
				{
					string prefix = member.XmlNamespacePrefix != null ? $"{member.XmlNamespacePrefix}" : null;
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteElementString(<#=prefix#>,"<#=member.MarshallName#>","<#=member.XmlNamespace#>", <#=member.PrimitiveMarshaller#>(<#=variableName#>.<#=member.PropertyName#><#=(member.UseNullable ? ".Value" : string.Empty)#>));
<#+
				}
				if(member.IsIdempotent)
				{
#>
				else				
<#=new string(' ', level * 4)#>					xmlWriter.WriteElementString("<#=member.MarshallName#>", Guid.NewGuid().ToString());				
<#+					
				}
#>
<#=""#>
<#+
			}
			
		}  
#>

<#=new string(' ', level * 4)#>				xmlWriter.WriteEndElement();
<#+
		if(operation.RequestPayloadMember!=null)
		{
#>
<#=new string(' ', level * 4)#>			}
<#+
			level--;
		}
#>
			}
			try 
			{
				string content = stringWriter.ToString();
				request.Content = System.Text.Encoding.UTF8.GetBytes(content);
				request.Headers["Content-Type"] = "application/xml";
<#+
					GenerateRequestChecksumHandling(operation, "content");
#>
	            request.Headers[Amazon.Util.HeaderKeys.XAmzApiVersion] = "<#=this.Config.ServiceModel.APIVersion#>";            
			} 
			catch (EncoderFallbackException e) 
			{
				throw new AmazonServiceException("Unable to marshall request to XML", e);
			}
<#+				       
	}

	void ProcessMembers(int level, string variableName, IEnumerable<Member> members, bool insideMap = false)
	{
		foreach(var member in members)
		{
			if(member.IsStructure)
			{
				ProcessStructure(level, variableName, member);
			}
			else if(member.IsList)
			{
				ProcessList(level, variableName, member);
			}
			else if(member.IsMap)
			{
#>
<#=new string(' ', (level + 4) * 4)#>if (<#=variableName#>.IsSet<#=member.PropertyName#>())
<#=new string(' ', (level + 4) * 4)#>{
<#+
				if(member.IsFlattened)
				{
					ProcessFlattenedMap(level,variableName,member);
				}
				else
				{
					ProcessMap(level, variableName, member);
				}
#>
<#=new string(' ', (level + 4) * 4)#>}
<#+
			}
			// we're processing members of a structure as a map's value
			else if(insideMap)
			{
#>
<#=new string(' ', level * 4)#>				if(<#=variableName#>.IsSet<#=member.PropertyName#>())
<#=new string(' ', level * 4)#>					xmlWriter.WriteElementString("<#=member.ModeledName#>", <#=member.PrimitiveMarshaller#>(<#=variableName#>.<#=member.PropertyName#><#=(member.UseNullable ? ".Value" : string.Empty)#>));				 
<#+
			}
			else
			{
#>
<#=new string(' ', level * 4)#>				if(<#=variableName#>.IsSet<#=member.PropertyName#>())
<#=new string(' ', level * 4)#>					xmlWriter.WriteElementString("<#=member.MarshallName#>", <#=member.PrimitiveMarshaller#>(<#=variableName#>.<#=member.PropertyName#><#=(member.UseNullable ? ".Value" : string.Empty)#>));				 

<#+
			}
		}
	}

	void ProcessStructure(int level, string variableName, Shape shape)
	{
			// Use shape's ListMarshallName if the structure is a list.
			var marshallName = shape.IsList ? shape.ListMarshallName ?? "member" : shape.MarshallName;
#>				
<#=new string(' ', level * 4)#>				if (<#=variableName#> != null) 
<#=new string(' ', level * 4)#>				{
<#+
			if(string.IsNullOrEmpty(shape.XmlNamespace))
			{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=marshallName#>");
<#+			
			}
			else
			{
				if(string.IsNullOrEmpty(shape.XmlNamespacePrefix))
				{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=marshallName#>", "<#=shape.XmlNamespace#>");
<#+
				}
				else
				{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=marshallName#>");
<#=new string(' ', level * 4)#>					xmlWriter.WriteAttributeString("xmlns", "<#=marshallName#>",<#=shape.XmlNamespace#>, null );
<#+
				}
			}
			ProcessMembers(level + 1, variableName, shape.Members);			
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteEndElement();
<#=new string(' ', level * 4)#>				}
<#+		
	}
// Only namespaces at the top level Shape matter for a structure, so there is no logic for namespaces here.
	void ProcessStructure(int level, string variableName, Member member)
	{
			var shape = member.Shape.IsList ?  member.Shape.ListShape : member.Shape ;
			variableName = member.Shape.IsList ? variableName : variableName + "." + member.PropertyName;

			// Use shape's ListMarshallName if the structure is a list.
			var marshallName = member.Shape.IsList ? member.Shape.ListMarshallName ?? "member" : member.MarshallName;
			if(member.IsFlattened)
				marshallName =  member.LocationName ?? member.ModeledName;
#>
<#=new string(' ', level * 4)#>				if (<#=variableName#> != null)
<#=new string(' ', level * 4)#>				{
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=marshallName#>");
<#+
#>
<#+
			ProcessMembers(level + 1, variableName, shape.Members);
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteEndElement();
<#=new string(' ', level * 4)#>				}
<#+		
	}
	void ProcessList(int level, string variableName, Member member)
	{
				var listVariable = (variableName + member.PropertyName).Replace(".",string.Empty);
				var listItemVariable = (variableName + member.PropertyName).Replace(".",string.Empty) + "Value";
#>
<#=new string(' ', level * 4)#>				var <#=listVariable#> = <#=variableName#>.<#=member.PropertyName#>;
<#=new string(' ', level * 4)#>				if (<#=listVariable#> != null && (<#=listVariable#>.Count > 0 || !AWSConfigs.InitializeCollections)) 
<#=new string(' ', level * 4)#>				{
<#+
				if (!member.IsFlattened)
				{
					if (string.IsNullOrEmpty(member.XmlNamespace))
					{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=member.MarshallName#>");
<#+
					}
					else
					{
						if (string.IsNullOrEmpty(member.XmlNamespacePrefix))
						{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=member.MarshallName#>", "<#=member.XmlNamespace#>");
<#+
						}
						else
						{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=member.MarshallName#>");
<#=new string(' ', level * 4)#>					xmlWriter.WriteAttributeString("xmlns","<#=member.XmlNamespacePrefix#>",null,"<#=member.XmlNamespace#>");
<#+
						}
					}
				}
#>
<#=new string(' ', level * 4)#>					foreach (var <#=listItemVariable#> in <#=listVariable#>) 
<#=new string(' ', level * 4)#>					{
<#+			
			if(member.Shape.ListShape.IsStructure)
			{
					ProcessStructure(level + 1, listItemVariable, member);	
			}
			else
			{
				var listMarshallName = member.Shape.ListMarshallName ?? "member";
				// see https://smithy.io/2.0/spec/protocol-traits.html#xmlflattened-trait
				if(member.IsFlattened)
					listMarshallName = member.LocationName ?? member.ModeledName;
				if(member.Shape.ListShape.IsDateTime)
				{
					// Use shape's ListMarshallName as it's a list structure.
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=listMarshallName#>");
<#=new string(' ', level * 4)#>						xmlWriter.WriteValue(<#=member.Shape.ListShape.PrimitiveMarshaller(MarshallLocation.Body)#>(<#=listItemVariable#>));
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#+				

				}
				else
				{
					var listNode = member.Shape.data;
					var listMemberNode = listNode[Shape.MemberKey];
					Member innerShape = null;
					if(this.Structure != null)
						innerShape = new Member(this.Structure.model, member.Shape, listMemberNode["shape"].ToString(), listMarshallName, listMemberNode, null);
					
					// Use shape's ListMarshallName as it's a list structure.
					if(listMemberNode == null || listMemberNode[ServiceModel.XmlNamespaceKey] == null || string.IsNullOrEmpty((string)listMemberNode[ServiceModel.XmlNamespaceKey]))
					{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=listMarshallName#>");
<#+
					}
					else
					{
						JsonData listMemberXmlNamespaceNode = listMemberNode[ServiceModel.XmlNamespaceKey];
						// if it's a string, it has no prefix
						if(listMemberXmlNamespaceNode.IsString)
						{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=listMarshallName#>", "<#=listMemberXmlNamespaceNode#>");

<#+
						}
						else
						{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=listMarshallName#>");
<#=new string(' ', level * 4)#>						xmlWriter.WriteAttributeString("xmlns","<#=listMemberXmlNamespaceNode[ServiceModel.XmlNamespacePrefixKey]#>",null,"<#=listMemberXmlNamespaceNode[ServiceModel.XmlNamespaceUriKey]#>");
<#+
						}
					}
					if (innerShape != null && innerShape.Shape.IsList)
					{
						ProcessNestedList(level + 1, variableName, innerShape, member);
					}
#>
<#+
					if (innerShape == null || (innerShape != null && !innerShape.Shape.IsList))
					{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteValue(<#=listItemVariable#>);
<#+
					}
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#+				
				}
			}			
#>
<#=new string(' ', level * 4)#>					}			
<#+
			if (!member.IsFlattened)
			{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteEndElement();			
<#+
			}
#>
<#=new string(' ', level * 4)#>				}
<#+				
	}

	void ProcessMap(int level, string variableName, Member member)
	{
		if(string.IsNullOrEmpty(member.XmlNamespace))
		{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=member.MarshallName#>");
<#+
		}
		else
		{
			if(string.IsNullOrEmpty(member.XmlNamespacePrefix))
			{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=member.MarshallName#>","<#=member.XmlNamespace#>");

<#+
			}
			else
			{
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("<#=member.MarshallName#>");
<#=new string(' ', level * 4)#>					xmlWriter.WriteAttributeString("xmlns","<#=member.XmlNamespacePrefix#>",null,"<#=member.XmlNamespace#>");
<#+
			}
		}
#>
<#=new string(' ', level * 4)#>					foreach (var kvp in <#=variableName#>.<#=member.PropertyName#>)
<#=new string(' ', level * 4)#>					{
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("entry");
<#+
		if(string.IsNullOrEmpty(member.Shape.KeyShapeXmlNamespace))
		{
#>

<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.KeyMarshallName#>", kvp.Key);
<#+
		}
		else
		{
			var keyNode = member.Shape.data[Shape.KeyKey];
			if(keyNode[ServiceModel.XmlNamespaceKey].IsString)
			{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.KeyMarshallName#>","<#=member.Shape.KeyShapeXmlNamespace#>",kvp.Key);
<#+
			}
			else
			{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=keyNode[ServiceModel.XmlNamespaceKey][ServiceModel.XmlNamespacePrefixKey]#>","<#=member.Shape.KeyMarshallName#>","<#=member.Shape.KeyShapeXmlNamespace#>",kvp.Key);

<#+
			}
		}
		if(member.Shape.ValueShape.IsMap)
		{
			ProcessSubMap(level + 1, member.Shape.ValueShape, "kvp");
		}
		else if(member.Shape.ValueShape.IsStructure)
		{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=member.Shape.ValueMarshallName#>");
<#+
			ProcessStructureAsMapValue(level + 2, "kvp.Value", member.Shape.ValueShape);
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#+
		}
		else
		{
			if(string.IsNullOrEmpty(member.Shape.ValueShapeXmlNamespace))
			{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.ValueMarshallName#>", kvp.Value<#=member.Shape.ValueShape.IsString ? "" : ".ToString()"#>);
<#+
			}
			else
			{
				var valueNode = member.Shape.data[Shape.ValueKey];
				if(valueNode[ServiceModel.XmlNamespaceKey].IsString)
				{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.ValueMarshallName#>", "<#=member.Shape.ValueShapeXmlNamespace#>",kvp.Value<#=member.Shape.ValueShape.IsString ? "" : ".ToString()"#>);
<#+				}
				else
				{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=valueNode[ServiceModel.XmlNamespaceKey][ServiceModel.XmlNamespacePrefixKey]#>","<#=member.Shape.ValueMarshallName#>", "<#=member.Shape.ValueShapeXmlNamespace#>",kvp.Value<#=member.Shape.ValueShape.IsString ? "" : ".ToString()"#>);
<#+
				}
			}
		}
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#=new string(' ', level * 4)#>					}
<#=new string(' ', level * 4)#>					xmlWriter.WriteEndElement();
<#+		
	}
#>
<#+
	// Separating the processing of a flattened map and a regular map for maintability
	void ProcessFlattenedMap(int level, string variableName, Member member)
	{	
#>
<#=new string(' ', level * 4)#>					foreach (var kvp in <#=variableName#>.<#=member.PropertyName#>)
<#=new string(' ', level * 4)#>					{
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=member.MarshallName#>");
<#+
		if(string.IsNullOrEmpty(member.Shape.KeyShapeXmlNamespace))
		{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.KeyMarshallName#>", kvp.Key);
<#+
		}
		else
		{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.KeyMarshallName#>","<#=member.Shape.KeyShapeXmlNamespace#>", kvp.Key);
<#+
		}
		if(member.Shape.ValueShape.IsMap)
		{
			ProcessSubMap(level + 1, member.Shape.ValueShape, "kvp");
		}
		else if(member.Shape.ValueShape.IsStructure)
		{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("<#=member.Shape.ValueMarshallName#>");
<#+
			ProcessStructureAsMapValue(level + 2, "kvp.Value", member.Shape.ValueShape);
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#+
		}
		else
		{
			if(string.IsNullOrEmpty(member.Shape.ValueShapeXmlNamespace))
			{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.ValueMarshallName#>", kvp.Value<#=member.Shape.ValueShape.IsString ? "" : ".ToString()"#>);
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#+
			}
			else
			{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=member.Shape.ValueMarshallName#>", "<#=member.Shape.ValueShapeXmlNamespace#>", kvp.Value<#=member.Shape.ValueShape.IsString ? "" : ".ToString()"#>);
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#+
			}
		}
#>
<#=new string(' ', level * 4)#>					}	
<#+
	}
#>
<#+
	void ProcessSubMap(int level, Shape shape, string parentVariableName)
	{				
#>
<#=new string(' ', level * 4)#>					xmlWriter.WriteStartElement("value");
<#=new string(' ', level * 4)#>					foreach (var kvp<#=level#> in <#=parentVariableName#>.Value) 
<#=new string(' ', level * 4)#>					{
<#=new string(' ', level * 4)#>						xmlWriter.WriteStartElement("entry");
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=shape.KeyMarshallName#>", kvp<#=level#>.Key);
<#+
		if(shape.ValueShape.IsMap)
		{
			ProcessSubMap(level + 1, shape.ValueShape, $"kvp{level}");
		}
		else
		{
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteElementString("<#=shape.ValueMarshallName#>", kvp<#=level#>.Value);
<#+
		}
#>
<#=new string(' ', level * 4)#>						xmlWriter.WriteEndElement();
<#=new string(' ', level * 4)#>					}			
<#=new string(' ', level * 4)#>					xmlWriter.WriteEndElement();				
<#+				
	}
#>
<#+
	protected void ProcessNonStructurePayload(Member payload, int level)
	{
		if(payload.Shape.IsString)
		{
#>
<#=new string(' ', level * 4)#>request.Content = Encoding.UTF8.GetBytes(<#=this.Operation.RequestPayloadMember.PrimitiveMarshaller#>(publicRequest.<#=this.Operation.RequestPayloadMember.PropertyName#>));
<#=new string(' ', level * 4)#>request.Headers["Content-Type"] = "text/plain";
<#+
		}
		else if(payload.Shape.IsMemoryStream)
		{
#>
<#=new string(' ', level * 4)#>request.ContentStream = publicRequest.<#=this.Operation.RequestPayloadMember.PropertyName#>;
<#=new string(' ', level * 4)#>request.Headers["Content-Type"] = "application/octet-stream";
<#+
		}
	}
#>
<#+
	protected void ProcessStructureAsMapValue(int level, string variableName, Shape shape)
	{
		// Use shape's ListMarshallName if the structure is a list.
#>
<#=new string(' ', level * 4)#>				if (<#=variableName#> != null) 
<#=new string(' ', level * 4)#>				{
<#+
			ProcessMembers(level + 1, variableName, shape.Members, insideMap: true);
#>
<#=new string(' ', level * 4)#>				}
<#+
	}
#>
<#+
	protected void ProcessNestedList(int level, string variableName, Member innerMember, Member owningMember)
	{
		// ListItemVariable corresponds to the innerList, which is named via the owningMember. 
		// The innerMember is only used if the list has another layer of nesting
		var listVariable = (variableName + owningMember.PropertyName).Replace(".",string.Empty);
		var listItemVariable = (variableName + owningMember.PropertyName).Replace(".",string.Empty) + "Value";
		var listMarshallName = innerMember.Shape.ListMarshallName ?? "member";
		var innerListItemVariable = listItemVariable + "InnerValue";
		var listNode = innerMember.Shape.data;
		var listMemberNode = listNode[Shape.MemberKey];
		var innerShape = new Member(this.Structure.model, innerMember.Shape, listMemberNode["shape"].ToString(), listMarshallName, listMemberNode, null);
		

#>
<#=new string(' ', (level) * 4)#>					foreach (var <#=innerListItemVariable#> in <#=listItemVariable#>)
<#=new string(' ', (level) * 4)#>					{
<#=new string(' ', (level) * 4)#>						xmlWriter.WriteStartElement("<#=listMarshallName#>");
<#=new string(' ', (level) * 4)#>						xmlWriter.WriteValue(<#=innerListItemVariable#>);
<#=new string(' ', (level) * 4)#>						xmlWriter.WriteEndElement();
<#+
		if (innerShape != null && innerShape.Shape.IsList)
		{
			ProcessNestedList(level + 1, variableName, innerShape, innerMember);
		}
#>
<#=new string(' ', (level) * 4)#>					}
<#+
	}
#>