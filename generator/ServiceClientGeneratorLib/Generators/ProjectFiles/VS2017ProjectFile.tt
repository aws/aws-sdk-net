<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ServiceClientGenerator" #>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework><#=this.Session["TargetFramework"]#></TargetFramework>
    <DefineConstants>$(DefineConstants);<#=this.Session["DefineConstants"]#></DefineConstants>
    <DebugType>portable</DebugType>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AssemblyName><#=this.Session["AssemblyName"]#></AssemblyName>
    <PackageId><#=this.Session["AssemblyName"]#></PackageId>

    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>
    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
    <GenerateAssemblyCopyrightAttribute>false</GenerateAssemblyCopyrightAttribute>
    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>
    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>
    <GenerateAssemblyDescriptionAttribute>false</GenerateAssemblyDescriptionAttribute>

<#
    if(this.Session.ContainsKey("FrameworkPathOverride") && !string.IsNullOrEmpty((string)Session["FrameworkPathOverride"]))
    {
#>
    <!-- workaround per https://github.com/Microsoft/msbuild/issues/1333 -->
    <FrameworkPathOverride><#=this.Session["FrameworkPathOverride"].ToString()#></FrameworkPathOverride>
<#
    }
    
    if(this.Session.ContainsKey("ReferencePath") && !string.IsNullOrEmpty((string)Session["ReferencePath"]))
    {
#>
    <ReferencePath><#=this.Session["ReferencePath"].ToString()#></ReferencePath>
<#
    }

    if(this.Session.ContainsKey("NoWarn") && !string.IsNullOrEmpty((string)Session["NoWarn"]))
    {
#>
    <NoWarn><#=this.Session["NoWarn"].ToString()#></NoWarn>
<#
    }

    if(this.Session.ContainsKey("OutputPathOverride") && !string.IsNullOrEmpty((string)Session["OutputPathOverride"]))
    {
#>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <OutputPath><#=this.Session["OutputPathOverride"].ToString()#></OutputPath>
<#
    }
#>
<#
    if (string.Compare(this.Session["TargetFramework"].ToString(), "netstandard1.3") == 0)
    {
#>
    <NetStandardImplicitPackageVersion>1.6.0</NetStandardImplicitPackageVersion>
<#
    }
#>
  </PropertyGroup>

<#
    if (this.Session.ContainsKey("SignBinaries") && (bool)Session["SignBinaries"])
    {
#>
  <Choose>
    <When Condition=" '$(AWSKeyFile)' == '' ">
      <PropertyGroup>
        <AssemblyOriginatorKeyFile>..\..\..\awssdk.dll.snk</AssemblyOriginatorKeyFile>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <AssemblyOriginatorKeyFile>$(AWSKeyFile)</AssemblyOriginatorKeyFile>
      </PropertyGroup>
    </Otherwise>
  </Choose>

<#
    }

    if(this.Session.ContainsKey("ExternalFilesInclude"))
    {
#>
  <ItemGroup>
    <Compile Include="<#=this.Session["ExternalFilesInclude"]#>"/>
  </ItemGroup>
<#
    }

    if(this.Session.ContainsKey("CompileRemoveList") && this.Session["CompileRemoveList"] != null)
    {
#>
  <ItemGroup>
<#
        IList<string> compileRemoveList = this.Session["CompileRemoveList"] as IList<string>;
        foreach(var compileRemoveEntry in compileRemoveList)
        {
		  if(compileRemoveEntry.ToString()=="bin"||compileRemoveEntry.ToString()=="obj")
		  {
#>
    <Compile Remove="**/<#=compileRemoveEntry.ToString()#>/**"/>
	<None Remove="**/<#=compileRemoveEntry.ToString()#>/**" />
<#
			continue;
		  }
#>
    <Compile Remove="**/<#=compileRemoveEntry.ToString()#>/**"/>
<#
        }
#>
  </ItemGroup>

<#
    }
#>
<#
    if(this.Session.ContainsKey("ProjectReferenceList") && this.Session["ProjectReferenceList"] != null)
    {
#>
  <ItemGroup>
<#
        var projectReferenceList = this.Session["ProjectReferenceList"] as IList<ProjectFileCreator.ProjectReference>;
        foreach(var projectReference in projectReferenceList)
        {
#>
    <ProjectReference Include="<#=projectReference.IncludePath#>"/>
<#
        }
#>
  </ItemGroup>

<#
    }
#>
<#
    if(this.Session.ContainsKey("PackageReferenceList") && this.Session["PackageReferenceList"] != null)
    {
#>
  <ItemGroup>
<#
        var packageReferenceList = this.Session["PackageReferenceList"] as IList<ProjectFileCreator.PackageReference>;
        foreach(var package in packageReferenceList)
        {
#>
    <PackageReference Include="<#=package.Include#>" Version="<#=package.Version#>"/>
<#
        }
#>
  </ItemGroup>

<#
    }
#>
<#
    if(this.Session.ContainsKey("ServiceDllReferences") && this.Session["ServiceDllReferences"] != null)
    {
#>
  <ItemGroup>
<#
        var dllReferenceList = this.Session["ServiceDllReferences"] as IList<ProjectFileCreator.Reference>;
        foreach(var reference in dllReferenceList)
        {
#>
    <Reference Include="<#=reference.Name#>">
      <HintPath><#=reference.HintPath#></HintPath>
    </Reference>
<#
        }
#>
  </ItemGroup>

<#
    }
#>
<#
    if(this.Session.ContainsKey("FrameworkReferences") && this.Session["FrameworkReferences"] != null)
    {
#>
  <ItemGroup>
<#
        var references = this.Session["FrameworkReferences"] as IEnumerable<ProjectFileCreator.FrameworkReference>;
        foreach(var reference in references)
        {
            if (string.IsNullOrEmpty(reference.HintPath))
            {
#>
    <Reference Include="<#=reference.Name#>"/>
<#
            }
            else
            {
#>
    <Reference Include="<#=reference.Name#>">
        <HintPath><#=reference.HintPath#></HintPath>
    </Reference>
<#
            }
        }
#>
  </ItemGroup>

<#
    }
    if(this.Session.ContainsKey("EmbeddedResources") && this.Session["EmbeddedResources"] != null)
    {
#>
  <ItemGroup>
<#
        var resourceList = this.Session["EmbeddedResources"] as IEnumerable<string>;
        foreach(var resource in resourceList)
        {
#>
    <EmbeddedResource Include="<#=resource#>"/>
<#
        }
#>
  </ItemGroup>
<#
    }

    if(this.Session.ContainsKey("Services") && this.Session["Services"] != null)
    {
#>
  <ItemGroup>
<#
        var serviceList = this.Session["EmbeddedResources"] as IEnumerable<string>;
        foreach(var service in serviceList)
        {
#>
    <Service Include="<#=service#>"/>
<#
        }
#>
  </ItemGroup>
<#
    }
#>
</Project>