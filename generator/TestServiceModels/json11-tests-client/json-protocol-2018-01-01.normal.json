{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2018-01-01",
    "endpointPrefix":"jsonprotocol",
    "jsonVersion":"1.1",
    "protocol":"json",
    "serviceFullName":"Sample Json 1.1 Protocol Service",
    "serviceId":"Json Protocol",
    "signatureVersion":"v4",
    "signingName":"jsonprotocol",
    "targetPrefix":"JsonProtocol",
    "uid":"json-protocol-2018-01-01"
  },
  "operations":{
    "DatetimeOffsets":{
      "name":"DatetimeOffsets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{"shape":"DatetimeOffsetsOutput"}
    },
    "EmptyOperation":{
      "name":"EmptyOperation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      }
    },
    "EndpointOperation":{
      "name":"EndpointOperation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "endpoint":{"hostPrefix":"foo."}
    },
    "EndpointWithHostLabelOperation":{
      "name":"EndpointWithHostLabelOperation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"HostLabelInput"},
      "endpoint":{
        "hostPrefix":"foo.{label}."
      }
    },
    "FractionalSeconds":{
      "name":"FractionalSeconds",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{"shape":"FractionalSecondsOutput"}
    },
    "GreetingWithErrors":{
      "name":"GreetingWithErrors",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{"shape":"GreetingWithErrorsOutput"},
      "errors":[
        {"shape":"InvalidGreeting"},
        {"shape":"FooError"},
        {"shape":"ComplexError"}
      ],
      "documentation":"<p>This operation has three possible return values:</p> <ol> <li>A successful response in the form of GreetingWithErrorsOutput</li> <li>An InvalidGreeting error.</li> <li>A ComplexError error.</li> </ol> <p>Implementations must be able to successfully take a response and properly deserialize successful and error responses.</p>",
      "idempotent":true
    },
    "HostWithPathOperation":{
      "name":"HostWithPathOperation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      }
    },
    "JsonEnums":{
      "name":"JsonEnums",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"JsonEnumsInputOutput"},
      "output":{"shape":"JsonEnumsInputOutput"},
      "documentation":"<p>This example serializes enums as top level properties, in lists, sets, and maps.</p>",
      "idempotent":true
    },
    "JsonUnions":{
      "name":"JsonUnions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnionInputOutput"},
      "output":{"shape":"UnionInputOutput"},
      "documentation":"<p>This operation uses unions for inputs and outputs.</p>",
      "idempotent":true
    },
    "KitchenSinkOperation":{
      "name":"KitchenSinkOperation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"KitchenSink"},
      "output":{"shape":"KitchenSink"},
      "errors":[
        {"shape":"ErrorWithMembers"},
        {"shape":"ErrorWithoutMembers"}
      ]
    },
    "NullOperation":{
      "name":"NullOperation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"NullOperationInputOutput"},
      "output":{"shape":"NullOperationInputOutput"}
    },
    "OperationWithOptionalInputOutput":{
      "name":"OperationWithOptionalInputOutput",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"OperationWithOptionalInputOutputInput"},
      "output":{"shape":"OperationWithOptionalInputOutputOutput"}
    },
    "PutAndGetInlineDocuments":{
      "name":"PutAndGetInlineDocuments",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutAndGetInlineDocumentsInputOutput"},
      "output":{"shape":"PutAndGetInlineDocumentsInputOutput"},
      "documentation":"<p>This example serializes an inline document as part of the payload.</p>"
    },
    "PutWithContentEncoding":{
      "name":"PutWithContentEncoding",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutWithContentEncodingInput"},
      "requestcompression":{"encodings":["gzip"]}
    },
    "SimpleScalarProperties":{
      "name":"SimpleScalarProperties",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SimpleScalarPropertiesInputOutput"},
      "output":{"shape":"SimpleScalarPropertiesInputOutput"}
    }
  },
  "shapes":{
    "Blob":{"type":"blob"},
    "Boolean":{
      "type":"boolean",
      "box":true
    },
    "ComplexError":{
      "type":"structure",
      "members":{
        "TopLevel":{"shape":"String"},
        "Nested":{"shape":"ComplexNestedErrorData"}
      },
      "documentation":"<p>This error is thrown when a request is invalid.</p>",
      "exception":true
    },
    "ComplexNestedErrorData":{
      "type":"structure",
      "members":{
        "Foo":{"shape":"String"}
      }
    },
    "DateTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "DatetimeOffsetsOutput":{
      "type":"structure",
      "members":{
        "datetime":{"shape":"DateTime"}
      }
    },
    "Document":{
      "type":"structure",
      "members":{
      },
      "document":true
    },
    "Double":{
      "type":"double",
      "box":true
    },
    "EmptyStruct":{
      "type":"structure",
      "members":{
      }
    },
    "ErrorWithMembers":{
      "type":"structure",
      "members":{
        "Code":{"shape":"String"},
        "ComplexData":{"shape":"KitchenSink"},
        "IntegerField":{"shape":"Integer"},
        "ListField":{"shape":"ListOfStrings"},
        "MapField":{"shape":"MapOfStrings"},
        "Message":{"shape":"String"},
        "StringField":{
          "shape":"String",
          "documentation":"<p>abc</p>"
        }
      },
      "exception":true
    },
    "ErrorWithoutMembers":{
      "type":"structure",
      "members":{
      },
      "exception":true,
      "fault":true
    },
    "Float":{
      "type":"float",
      "box":true
    },
    "FooEnum":{
      "type":"string",
      "enum":[
        "Foo",
        "Baz",
        "Bar",
        "1",
        "0"
      ]
    },
    "FooEnumList":{
      "type":"list",
      "member":{"shape":"FooEnum"}
    },
    "FooEnumMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"FooEnum"}
    },
    "FooEnumSet":{
      "type":"list",
      "member":{"shape":"FooEnum"}
    },
    "FooError":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>This error has test cases that test some of the dark corners of Amazon service framework history. It should only be implemented by clients.</p>",
      "exception":true,
      "fault":true
    },
    "FractionalSecondsOutput":{
      "type":"structure",
      "members":{
        "datetime":{"shape":"DateTime"}
      }
    },
    "GreetingStruct":{
      "type":"structure",
      "members":{
        "hi":{"shape":"String"}
      }
    },
    "GreetingWithErrorsOutput":{
      "type":"structure",
      "members":{
        "greeting":{"shape":"String"}
      }
    },
    "HostLabelInput":{
      "type":"structure",
      "required":["label"],
      "members":{
        "label":{
          "shape":"String",
          "hostLabel":true
        }
      }
    },
    "Integer":{
      "type":"integer",
      "box":true
    },
    "InvalidGreeting":{
      "type":"structure",
      "members":{
        "Message":{"shape":"String"}
      },
      "documentation":"<p>This error is thrown when an invalid greeting value is provided.</p>",
      "exception":true
    },
    "JsonEnumsInputOutput":{
      "type":"structure",
      "members":{
        "fooEnum1":{"shape":"FooEnum"},
        "fooEnum2":{"shape":"FooEnum"},
        "fooEnum3":{"shape":"FooEnum"},
        "fooEnumList":{"shape":"FooEnumList"},
        "fooEnumSet":{"shape":"FooEnumSet"},
        "fooEnumMap":{"shape":"FooEnumMap"}
      }
    },
    "JsonValue":{"type":"string"},
    "KitchenSink":{
      "type":"structure",
      "members":{
        "Blob":{"shape":"Blob"},
        "Boolean":{"shape":"Boolean"},
        "Double":{"shape":"Double"},
        "EmptyStruct":{"shape":"EmptyStruct"},
        "Float":{"shape":"Float"},
        "HttpdateTimestamp":{"shape":"SyntheticTimestamp_http_date"},
        "Integer":{"shape":"Integer"},
        "Iso8601Timestamp":{"shape":"SyntheticTimestamp_date_time"},
        "JsonValue":{
          "shape":"JsonValue",
          "jsonvalue":true
        },
        "ListOfLists":{"shape":"ListOfListOfStrings"},
        "ListOfMapsOfStrings":{"shape":"ListOfMapsOfStrings"},
        "ListOfStrings":{"shape":"ListOfStrings"},
        "ListOfStructs":{"shape":"ListOfStructs"},
        "Long":{"shape":"Long"},
        "MapOfListsOfStrings":{"shape":"MapOfListsOfStrings"},
        "MapOfMaps":{"shape":"MapOfMapOfStrings"},
        "MapOfStrings":{"shape":"MapOfStrings"},
        "MapOfStructs":{"shape":"MapOfStructs"},
        "RecursiveList":{"shape":"ListOfKitchenSinks"},
        "RecursiveMap":{"shape":"MapOfKitchenSinks"},
        "RecursiveStruct":{"shape":"KitchenSink"},
        "SimpleStruct":{"shape":"SimpleStruct"},
        "String":{"shape":"String"},
        "StructWithJsonName":{"shape":"StructWithJsonName"},
        "Timestamp":{"shape":"Timestamp"},
        "UnixTimestamp":{"shape":"SyntheticTimestamp_epoch_seconds"}
      }
    },
    "ListOfKitchenSinks":{
      "type":"list",
      "member":{"shape":"KitchenSink"}
    },
    "ListOfListOfStrings":{
      "type":"list",
      "member":{"shape":"ListOfStrings"}
    },
    "ListOfMapsOfStrings":{
      "type":"list",
      "member":{"shape":"MapOfStrings"}
    },
    "ListOfStrings":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "ListOfStructs":{
      "type":"list",
      "member":{"shape":"SimpleStruct"}
    },
    "Long":{
      "type":"long",
      "box":true
    },
    "MapOfKitchenSinks":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"KitchenSink"}
    },
    "MapOfListsOfStrings":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"ListOfStrings"}
    },
    "MapOfMapOfStrings":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"MapOfStrings"}
    },
    "MapOfStrings":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "MapOfStructs":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"SimpleStruct"}
    },
    "MyUnion":{
      "type":"structure",
      "members":{
        "stringValue":{"shape":"String"},
        "booleanValue":{"shape":"Boolean"},
        "numberValue":{"shape":"Integer"},
        "blobValue":{"shape":"Blob"},
        "timestampValue":{"shape":"Timestamp"},
        "enumValue":{"shape":"FooEnum"},
        "listValue":{"shape":"StringList"},
        "mapValue":{"shape":"StringMap"},
        "structureValue":{"shape":"GreetingStruct"}
      },
      "documentation":"<p>A union with a representative set of types for members.</p>",
      "union":true
    },
    "NullOperationInputOutput":{
      "type":"structure",
      "members":{
        "string":{"shape":"String"}
      }
    },
    "OperationWithOptionalInputOutputInput":{
      "type":"structure",
      "members":{
        "Value":{"shape":"String"}
      }
    },
    "OperationWithOptionalInputOutputOutput":{
      "type":"structure",
      "members":{
        "Value":{"shape":"String"}
      }
    },
    "PutAndGetInlineDocumentsInputOutput":{
      "type":"structure",
      "members":{
        "inlineDocument":{"shape":"Document"}
      }
    },
    "PutWithContentEncodingInput":{
      "type":"structure",
      "members":{
        "encoding":{"shape":"String"},
        "data":{"shape":"String"}
      }
    },
    "SimpleScalarPropertiesInputOutput":{
      "type":"structure",
      "members":{
        "floatValue":{"shape":"Float"},
        "doubleValue":{"shape":"Double"}
      }
    },
    "SimpleStruct":{
      "type":"structure",
      "members":{
        "Value":{"shape":"String"}
      }
    },
    "String":{"type":"string"},
    "StringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "StringMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "StructWithJsonName":{
      "type":"structure",
      "members":{
        "Value":{"shape":"String"}
      }
    },
    "SyntheticTimestamp_date_time":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "SyntheticTimestamp_epoch_seconds":{
      "type":"timestamp",
      "timestampFormat":"unixTimestamp"
    },
    "SyntheticTimestamp_http_date":{
      "type":"timestamp",
      "timestampFormat":"rfc822"
    },
    "Timestamp":{"type":"timestamp"},
    "UnionInputOutput":{
      "type":"structure",
      "members":{
        "contents":{"shape":"MyUnion"}
      },
      "documentation":"<p>A shared structure that contains a single union member.</p>"
    }
  }
}
