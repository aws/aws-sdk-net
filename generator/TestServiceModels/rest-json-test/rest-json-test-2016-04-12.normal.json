{
    "version":"2.0",
    "metadata":{
      "apiVersion":"2021-05-13",
      "endpointPrefix":"rest-test",
      "jsonVersion":"1.1",
      "protocol":"rest-json",
      "serviceAbbreviation":"Rest-Json-Test",
      "serviceFullName":"Rest Json Test",
      "serviceId":"Rest-Json-Test",
      "signatureVersion":"v4",
      "signingName":"Rest-Json-Test",
      "uid":"test-2021-05-13"
    },
    "operations":{
      "TestBody":{
        "name":"TestBody",
        "http":{
          "method":"POST",
          "requestUri":"/body"
        },
        "input":{"shape":"TestBodyRequest"},
        "output":{"shape":"TestBodyResult"},
        "errors":[],
        "documentation":"<p> Post a test body request. </p>"
      },
      "NoPayload":{
        "name":"NoPayload",
        "http":{
          "method":"GET",
          "requestUri":"/no-payload"
        },
        "input":{"shape":"NoPayloadRequest"},
        "output":{"shape":"NoPayloadResult"},
        "errors":[],
        "documentation":"<p> Request without a body </p>"
      },
      "NoPayloadPost":{
        "name":"NoPayloadPost",
        "http":{
          "method":"POST",
          "requestUri":"/no-payload"
        },
        "input":{"shape":"NoPayloadRequest"},
        "output":{"shape":"NoPayloadResult"},
        "errors":[],
        "documentation":"<p> A POST request without a body, for verifying that we don't set a Content-Type even though a POST could have a body </p>"
      },
      "TestPayload":{
        "name":"TestPayload",
        "http":{
          "method":"POST",
          "requestUri":"/payload"
        },
        "input":{"shape":"TestPayloadRequest"},
        "output":{"shape":"TestPayloadResult"},
        "errors":[],
        "documentation":"<p> Post a test payload request. </p>"
      },
      "TestBlobPayload":{
          "name":"TestBlobPayload",
          "http":{
            "method":"POST",
            "requestUri":"/blob_payload"
          },
          "input":{"shape":"TestBlobPayloadRequest"},
          "output":{"shape":"TestBlobPayloadResult"},
          "errors":[],
          "documentation":"<p> Post a test blob payload request. </p>"
      },
      "StaticOp": {
        "name": "StaticOp",
        "input": {
          "shape": "StaticInputShape"
        },
        "http": {
          "method": "POST",
          "requestUri": "/path"
        },
        "endpoint":{
          "hostPrefix": "data-"
        }
      },
      "MemberRefOp": {
        "name": "MemberRefOp",
        "input": {
          "shape": "MemberRefInputShape"
        },
        "http": {
          "method": "POST",
          "requestUri": "/path"
        },
        "endpoint":{
          "hostPrefix": "foo-{Name}."
        }
      },
      "QueryStringEscaping":{
        "name":"QueryStringEscaping",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryStringEscapingRequest"},
        "output":{"shape":"QueryStringEscapingResult"},
        "errors":[],
        "documentation":"<p>Handles query string escaping</p>"
      },
      "QueryStringList":{
        "name":"QueryStringList",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryStringListRequest"},
        "output":{"shape":"QueryStringListResult"},
        "errors":[],
        "documentation":"<p>Handles query string lists of string</p>"
      },
      "QueryIntegerList":{
        "name":"QueryIntegerList",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryIntegerListRequest"},
        "output":{"shape":"QueryIntegerListResult"},
        "errors":[],
        "documentation":"<p>Handles query string lists of integer</p>"
      },
      "QueryTimestampList":{
        "name":"QueryTimestampList",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryTimestampListRequest"},
        "output":{"shape":"QueryTimestampListResult"},
        "errors":[],
        "documentation":"<p>Handles query string lists of timestamp</p>"
      },
      "QueryBooleanList":{
        "name":"QueryBooleanList",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryBooleanListRequest"},
        "output":{"shape":"QueryBooleanListResult"},
        "errors":[],
        "documentation":"<p>Handles query string lists of boolean</p>"
      },
      "QueryStringListMap":{
        "name":"QueryStringListMap",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryStringListMapRequest"},
        "output":{"shape":"QueryStringListMapResult"},
        "errors":[],
        "documentation":"<p>Handles query string maps of lists of string</p>"
      },
      "QueryIntegerListMap":{
        "name":"QueryIntegerListMap",
        "http":{
          "method":"GET",
          "requestUri":"/path"
        },
        "input":{"shape":"QueryIntegerListMapRequest"},
        "output":{"shape":"QueryIntegerListMapResult"},
        "errors":[],
        "documentation":"<p>Handles query string maps of lists of integers</p>"
      }
    },
    "shapes":{
      "Integer":{
        "type":"integer"
      },
      "String":{"type":"string"},
      "Timestamp":{
        "type":"timestamp",
        "timestampFormat":"iso8601"
      },
      "Boolean":{
        "type":"boolean"
      },
      "Blob":{"type":"blob"},
      "StringList":{
        "type":"list",
        "member":{"shape":"String"}
      },
      "IntegerList":{
        "type":"list",
        "member":{"shape":"Integer"}
      },
      "TimestampList":{
        "type":"list",
        "member":{"shape":"Timestamp"}
      },
      "BooleanList":{
        "type":"list",
        "member":{"shape":"Boolean"}
      },
      "NoPayloadRequest":{
        "type":"structure",
        "required":[],
        "members":{
          "testId":{
            "shape":"TestId",
            "documentation":"<p> The unique ID for a test. </p>",
            "location":"header",
            "locationName":"x-amz-test-id"
          }
        },
        "documentation":"<p> The request structure for a no payload request. </p>"
      },
      "NoPayloadResult":{
        "type":"structure",
        "required":["testId"],
        "members":{
          "testId":{
            "shape":"TestId",
            "documentation":"<p> Optional test identifer. </p>"
          }
        },
        "documentation":"<p> The result structure for the no payload operation. </p>"
      },
      "TestId":{
        "type":"string",
        "max":8,
        "min":3,
        "pattern":"t-[a-z0-9-]+"
      },
      "TestConfig":{
        "type":"structure",
        "required":[],
        "members":{
          "timeout":{
            "shape":"Integer",
            "documentation":"<p> Timeout in seconds </p>"
          }
        }
      },
      "PayloadConfig":{
        "type":"structure",
        "required":[],
        "members":{
          "data":{
            "shape":"Integer",
            "documentation":"<p> Numerical data </p>"
          }
        }
      },
      "TestBodyRequest":{
        "type":"structure",
        "required":[],
        "members":{
          "testConfig":{
            "shape":"TestConfig",
            "documentation":"<p> Content to post </p>"
          },
          "testId":{
            "shape":"TestId",
            "documentation":"<p> Optional test identifier </p>",
            "location":"header",
            "locationName":"x-amz-test-id"
          }
        },
        "documentation":"<p> The request structure for a test body request. </p>"
      },
      "TestBodyResult":{
        "type":"structure",
        "required":[],
        "members":{
          "testId":{"shape":"TestId"}
        },
        "documentation":"<p> The response structure for a test body request. </p>"
      },
      "TestPayloadRequest":{
        "type":"structure",
        "required":[],
        "members":{
          "payloadConfig":{
            "shape":"PayloadConfig",
            "documentation":"<p> Payload to post </p>"
          },
          "testId":{
            "shape":"TestId",
            "documentation":"<p> Optional test identifier </p>",
            "location":"header",
            "locationName":"x-amz-test-id"
          }
        },
        "documentation":"<p> The request structure for a payload request. </p>",
        "payload":"payloadConfig"
      },
      "TestPayloadResult":{
        "type":"structure",
        "required":[],
        "members":{
          "testId":{"shape":"TestId"}
        },
        "documentation":"<p> The response structure for a payload request. </p>"
      },
      "TestBlobPayloadRequest":{
        "type":"structure",
        "required":[],
        "members":{
          "data":{
            "shape":"Blob",
            "documentation":"<p> Blob payload to post </p>"
          },
          "contentType":{
            "shape":"String",
            "documentation":"<p> Optional content-type header </p>",
            "location":"header",
            "locationName":"Content-Type"
          }
        },
        "documentation":"<p> The request structure for a blob payload request. </p>",
        "payload":"data"
      },
      "TestBlobPayloadResult":{
        "type":"structure",
        "required":[],
        "members":{
        },
        "documentation":"<p> The response structure for a blob payload request. </p>"
      },
      "StaticInputShape": {
        "type": "structure",
        "members": {
          "Name": {
            "shape": "String"
          }
        }
      },
      "MemberRefInputShape": {
        "type": "structure",
        "members": {
          "Name": {
            "shape": "String",
            "hostLabel": true
          }
        }
      },
      "QueryStringEscapingRequest":{
        "type":"structure",
        "members":{
          "queryString":{
            "shape":"String",
            "location":"querystring",
            "locationName": "String"
          }
        }
      },
      "QueryStringEscapingResult":{
        "type":"structure",        
        "members":{}        
      },
      "QueryStringListRequest":{
        "type":"structure",
        "members":{
          "queryStringList":{
            "shape":"StringList",
            "location":"querystring",
            "locationName": "item"
          }
        }
      },
      "QueryStringListResult":{
        "type":"structure",        
        "members":{}        
      },
      "QueryIntegerListRequest":{
        "type":"structure",
        "members":{
          "queryIntegerList":{
            "shape":"IntegerList",
            "location":"querystring",
            "locationName": "item"
          }
        }
      },
      "QueryIntegerListResult":{
        "type":"structure",        
        "members":{}        
      },
      "QueryTimestampListRequest":{
        "type":"structure",
        "members":{
          "queryTimestampList":{
            "shape":"TimestampList",
            "location":"querystring",
            "locationName": "item"
          }
        }
      },
      "QueryTimestampListResult":{
        "type":"structure",        
        "members":{}        
      },
      "QueryBooleanListRequest":{
        "type":"structure",
        "members":{
          "queryBooleanList":{
            "shape":"BooleanList",
            "location":"querystring",
            "locationName": "item"
          }
        }
      },
      "QueryBooleanListResult":{
        "type":"structure",        
        "members":{}        
      },
      "QueryStringListMapRequest":{
        "type":"structure",
        "members":{
          "queryParamsMapOfStringList":{
            "shape":"MapOfStringsList",
            "location":"querystring"
          }
        }
      },
      "QueryStringListMapResult":{
        "type":"structure",        
        "members":{}        
      },
      "MapOfStringsList":{
        "type":"map",
        "key":{"shape":"String"},
        "value":{"shape":"StringList"}
      },
      "QueryIntegerListMapRequest":{
        "type":"structure",
        "members":{
          "queryParamsMapOfIntegerList":{
            "shape":"MapOfIntegersList",
            "location":"querystring"
          }
        }
      },
      "QueryIntegerListMapResult":{
        "type":"structure",        
        "members":{}        
      },
      "MapOfIntegersList":{
        "type":"map",
        "key":{"shape":"String"},
        "value":{"shape":"IntegerList"}
      }
    }
  }