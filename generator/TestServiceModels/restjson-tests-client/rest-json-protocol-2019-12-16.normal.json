{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2019-12-16",
    "endpointPrefix":"restjson",
    "jsonVersion":"1.1",
    "protocol":"rest-json",
    "serviceFullName":"Sample Rest Json Protocol Service",
    "serviceId":"Rest Json Protocol",
    "signatureVersion":"v4",
    "signingName":"restjson",
    "uid":"rest-json-protocol-2019-12-16"
  },
  "operations":{
    "AllQueryStringTypes":{
      "name":"AllQueryStringTypes",
      "http":{
        "method":"GET",
        "requestUri":"/AllQueryStringTypesInput",
        "responseCode":200
      },
      "input":{"shape":"AllQueryStringTypesInput"},
      "documentation":"<p>This example uses all query string types.</p>"
    },
    "ConstantAndVariableQueryString":{
      "name":"ConstantAndVariableQueryString",
      "http":{
        "method":"GET",
        "requestUri":"/ConstantAndVariableQueryString?foo=bar",
        "responseCode":200
      },
      "input":{"shape":"ConstantAndVariableQueryStringInput"},
      "documentation":"<p>This example uses fixed query string params and variable query string params. The fixed query string parameters and variable parameters must both be serialized (implementations may need to merge them together).</p>"
    },
    "ConstantQueryString":{
      "name":"ConstantQueryString",
      "http":{
        "method":"GET",
        "requestUri":"/ConstantQueryString/{hello}?foo=bar&hello",
        "responseCode":200
      },
      "input":{"shape":"ConstantQueryStringInput"},
      "documentation":"<p>This example uses a constant query string parameters and a label. This simply tests that labels and query string parameters are compatible. The fixed query string parameter named &quot;hello&quot; should in no way conflict with the label, <code>{hello}</code>.</p>"
    },
    "DatetimeOffsets":{
      "name":"DatetimeOffsets",
      "http":{
        "method":"POST",
        "requestUri":"/DatetimeOffsets",
        "responseCode":200
      },
      "output":{"shape":"DatetimeOffsetsOutput"}
    },
    "DocumentType":{
      "name":"DocumentType",
      "http":{
        "method":"PUT",
        "requestUri":"/DocumentType",
        "responseCode":200
      },
      "input":{"shape":"DocumentTypeInputOutput"},
      "output":{"shape":"DocumentTypeInputOutput"},
      "documentation":"<p>This example serializes a document as part of the payload.</p>",
      "idempotent":true
    },
    "DocumentTypeAsMapValue":{
      "name":"DocumentTypeAsMapValue",
      "http":{
        "method":"PUT",
        "requestUri":"/DocumentTypeAsMapValue",
        "responseCode":200
      },
      "input":{"shape":"DocumentTypeAsMapValueInputOutput"},
      "output":{"shape":"DocumentTypeAsMapValueInputOutput"},
      "documentation":"<p>This example serializes documents as the value of maps.</p>",
      "idempotent":true
    },
    "DocumentTypeAsPayload":{
      "name":"DocumentTypeAsPayload",
      "http":{
        "method":"PUT",
        "requestUri":"/DocumentTypeAsPayload",
        "responseCode":200
      },
      "input":{"shape":"DocumentTypeAsPayloadInputOutput"},
      "output":{"shape":"DocumentTypeAsPayloadInputOutput"},
      "documentation":"<p>This example serializes a document as the entire HTTP payload.</p>",
      "idempotent":true
    },
    "EmptyInputAndEmptyOutput":{
      "name":"EmptyInputAndEmptyOutput",
      "http":{
        "method":"POST",
        "requestUri":"/EmptyInputAndEmptyOutput",
        "responseCode":200
      },
      "input":{"shape":"EmptyInputAndEmptyOutputInput"},
      "output":{"shape":"EmptyInputAndEmptyOutputOutput"},
      "documentation":"<p>The example tests how requests and responses are serialized when there's no request or response payload because the operation has an empty input and empty output structure that reuses the same shape. While this should be rare, code generators must support this.</p>"
    },
    "EndpointOperation":{
      "name":"EndpointOperation",
      "http":{
        "method":"POST",
        "requestUri":"/EndpointOperation",
        "responseCode":200
      },
      "endpoint":{"hostPrefix":"foo."}
    },
    "EndpointWithHostLabelOperation":{
      "name":"EndpointWithHostLabelOperation",
      "http":{
        "method":"POST",
        "requestUri":"/EndpointWithHostLabelOperation",
        "responseCode":200
      },
      "input":{"shape":"HostLabelInput"},
      "endpoint":{
        "hostPrefix":"foo.{label}."
      }
    },
    "FractionalSeconds":{
      "name":"FractionalSeconds",
      "http":{
        "method":"POST",
        "requestUri":"/FractionalSeconds",
        "responseCode":200
      },
      "output":{"shape":"FractionalSecondsOutput"}
    },
    "GreetingWithErrors":{
      "name":"GreetingWithErrors",
      "http":{
        "method":"PUT",
        "requestUri":"/GreetingWithErrors",
        "responseCode":200
      },
      "output":{"shape":"GreetingWithErrorsOutput"},
      "errors":[
        {"shape":"InvalidGreeting"},
        {"shape":"ComplexError"},
        {"shape":"FooError"}
      ],
      "documentation":"<p>This operation has four possible return values:</p> <ol> <li>A successful response in the form of GreetingWithErrorsOutput</li> <li>An InvalidGreeting error.</li> <li>A BadRequest error.</li> <li>A FooError.</li> </ol> <p>Implementations must be able to successfully take a response and properly (de)serialize successful and error responses based on the the presence of the</p>",
      "idempotent":true
    },
    "HostWithPathOperation":{
      "name":"HostWithPathOperation",
      "http":{
        "method":"GET",
        "requestUri":"/HostWithPathOperation",
        "responseCode":200
      }
    },
    "HttpChecksumRequired":{
      "name":"HttpChecksumRequired",
      "http":{
        "method":"POST",
        "requestUri":"/HttpChecksumRequired",
        "responseCode":200
      },
      "input":{"shape":"HttpChecksumRequiredInputOutput"},
      "output":{"shape":"HttpChecksumRequiredInputOutput"},
      "documentation":"<p>This example tests httpChecksumRequired trait</p>",
      "httpChecksumRequired":true
    },
    "HttpEnumPayload":{
      "name":"HttpEnumPayload",
      "http":{
        "method":"POST",
        "requestUri":"/EnumPayload",
        "responseCode":200
      },
      "input":{"shape":"EnumPayloadInput"},
      "output":{"shape":"EnumPayloadInput"}
    },
    "HttpPayloadTraits":{
      "name":"HttpPayloadTraits",
      "http":{
        "method":"POST",
        "requestUri":"/HttpPayloadTraits",
        "responseCode":200
      },
      "input":{"shape":"HttpPayloadTraitsInputOutput"},
      "output":{"shape":"HttpPayloadTraitsInputOutput"},
      "documentation":"<p>This example serializes a blob shape in the payload.</p> <p>In this example, no JSON document is synthesized because the payload is not a structure or a union type.</p>"
    },
    "HttpPayloadWithStructure":{
      "name":"HttpPayloadWithStructure",
      "http":{
        "method":"PUT",
        "requestUri":"/HttpPayloadWithStructure",
        "responseCode":200
      },
      "input":{"shape":"HttpPayloadWithStructureInputOutput"},
      "output":{"shape":"HttpPayloadWithStructureInputOutput"},
      "documentation":"<p>This example serializes a structure in the payload.</p> <p>Note that serializing a structure changes the wrapper element name to match the targeted structure.</p>",
      "idempotent":true
    },
    "HttpPayloadWithUnion":{
      "name":"HttpPayloadWithUnion",
      "http":{
        "method":"PUT",
        "requestUri":"/HttpPayloadWithUnion",
        "responseCode":200
      },
      "input":{"shape":"HttpPayloadWithUnionInputOutput"},
      "output":{"shape":"HttpPayloadWithUnionInputOutput"},
      "documentation":"<p>This example serializes a union in the payload.</p>",
      "idempotent":true
    },
    "HttpPrefixHeaders":{
      "name":"HttpPrefixHeaders",
      "http":{
        "method":"GET",
        "requestUri":"/HttpPrefixHeaders",
        "responseCode":200
      },
      "input":{"shape":"HttpPrefixHeadersInput"},
      "output":{"shape":"HttpPrefixHeadersOutput"},
      "documentation":"<p>This examples adds headers to the input of a request and response by prefix.</p>"
    },
    "HttpPrefixHeadersInResponse":{
      "name":"HttpPrefixHeadersInResponse",
      "http":{
        "method":"GET",
        "requestUri":"/HttpPrefixHeadersResponse",
        "responseCode":200
      },
      "input":{"shape":"HttpPrefixHeadersInResponseInput"},
      "output":{"shape":"HttpPrefixHeadersInResponseOutput"},
      "documentation":"<p>Clients that perform this test extract all headers from the response.</p>"
    },
    "HttpRequestWithFloatLabels":{
      "name":"HttpRequestWithFloatLabels",
      "http":{
        "method":"GET",
        "requestUri":"/FloatHttpLabels/{float}/{double}",
        "responseCode":200
      },
      "input":{"shape":"HttpRequestWithFloatLabelsInput"}
    },
    "HttpRequestWithGreedyLabelInPath":{
      "name":"HttpRequestWithGreedyLabelInPath",
      "http":{
        "method":"GET",
        "requestUri":"/HttpRequestWithGreedyLabelInPath/foo/{foo}/baz/{baz+}",
        "responseCode":200
      },
      "input":{"shape":"HttpRequestWithGreedyLabelInPathInput"}
    },
    "HttpRequestWithLabels":{
      "name":"HttpRequestWithLabels",
      "http":{
        "method":"GET",
        "requestUri":"/HttpRequestWithLabels/{string}/{short}/{integer}/{long}/{float}/{double}/{boolean}/{timestamp}",
        "responseCode":200
      },
      "input":{"shape":"HttpRequestWithLabelsInput"},
      "documentation":"<p>The example tests how requests are serialized when there's no input payload but there are HTTP labels.</p>"
    },
    "HttpRequestWithLabelsAndTimestampFormat":{
      "name":"HttpRequestWithLabelsAndTimestampFormat",
      "http":{
        "method":"GET",
        "requestUri":"/HttpRequestWithLabelsAndTimestampFormat/{memberEpochSeconds}/{memberHttpDate}/{memberDateTime}/{defaultFormat}/{targetEpochSeconds}/{targetHttpDate}/{targetDateTime}",
        "responseCode":200
      },
      "input":{"shape":"HttpRequestWithLabelsAndTimestampFormatInput"},
      "documentation":"<p>The example tests how requests serialize different timestamp formats in the URI path.</p>"
    },
    "HttpRequestWithRegexLiteral":{
      "name":"HttpRequestWithRegexLiteral",
      "http":{
        "method":"GET",
        "requestUri":"/ReDosLiteral/{str}/(a+)+",
        "responseCode":200
      },
      "input":{"shape":"HttpRequestWithRegexLiteralInput"}
    },
    "HttpResponseCode":{
      "name":"HttpResponseCode",
      "http":{
        "method":"PUT",
        "requestUri":"/HttpResponseCode",
        "responseCode":200
      },
      "output":{"shape":"HttpResponseCodeOutput"},
      "idempotent":true
    },
    "HttpStringPayload":{
      "name":"HttpStringPayload",
      "http":{
        "method":"POST",
        "requestUri":"/StringPayload",
        "responseCode":200
      },
      "input":{"shape":"StringPayloadInput"},
      "output":{"shape":"StringPayloadInput"}
    },
    "IgnoreQueryParamsInResponse":{
      "name":"IgnoreQueryParamsInResponse",
      "http":{
        "method":"GET",
        "requestUri":"/IgnoreQueryParamsInResponse",
        "responseCode":200
      },
      "output":{"shape":"IgnoreQueryParamsInResponseOutput"},
      "documentation":"<p>This example ensures that query string bound request parameters are serialized in the body of responses if the structure is used in both the request and response.</p>"
    },
    "InputAndOutputWithHeaders":{
      "name":"InputAndOutputWithHeaders",
      "http":{
        "method":"POST",
        "requestUri":"/InputAndOutputWithHeaders",
        "responseCode":200
      },
      "input":{"shape":"InputAndOutputWithHeadersIO"},
      "output":{"shape":"InputAndOutputWithHeadersIO"},
      "documentation":"<p>The example tests how requests and responses are serialized when there is no input or output payload but there are HTTP header bindings.</p>"
    },
    "JsonBlobs":{
      "name":"JsonBlobs",
      "http":{
        "method":"POST",
        "requestUri":"/JsonBlobs",
        "responseCode":200
      },
      "input":{"shape":"JsonBlobsInputOutput"},
      "output":{"shape":"JsonBlobsInputOutput"},
      "documentation":"<p>Blobs are base64 encoded</p>"
    },
    "JsonEnums":{
      "name":"JsonEnums",
      "http":{
        "method":"PUT",
        "requestUri":"/JsonEnums",
        "responseCode":200
      },
      "input":{"shape":"JsonEnumsInputOutput"},
      "output":{"shape":"JsonEnumsInputOutput"},
      "documentation":"<p>This example serializes enums as top level properties, in lists, sets, and maps.</p>",
      "idempotent":true
    },
    "JsonIntEnums":{
      "name":"JsonIntEnums",
      "http":{
        "method":"PUT",
        "requestUri":"/JsonIntEnums",
        "responseCode":200
      },
      "input":{"shape":"JsonIntEnumsInputOutput"},
      "output":{"shape":"JsonIntEnumsInputOutput"},
      "documentation":"<p>This example serializes intEnums as top level properties, in lists, sets, and maps.</p>",
      "idempotent":true
    },
    "JsonLists":{
      "name":"JsonLists",
      "http":{
        "method":"PUT",
        "requestUri":"/JsonLists",
        "responseCode":200
      },
      "input":{"shape":"JsonListsInputOutput"},
      "output":{"shape":"JsonListsInputOutput"},
      "documentation":"<p>This test case serializes JSON lists for the following cases for both input and output:</p> <ol> <li>Normal JSON lists.</li> <li>Normal JSON sets.</li> <li>JSON lists of lists.</li> <li>Lists of structures.</li> </ol>",
      "idempotent":true
    },
    "JsonMaps":{
      "name":"JsonMaps",
      "http":{
        "method":"POST",
        "requestUri":"/JsonMaps",
        "responseCode":200
      },
      "input":{"shape":"JsonMapsInputOutput"},
      "output":{"shape":"JsonMapsInputOutput"},
      "documentation":"<p>The example tests basic map serialization.</p>"
    },
    "JsonTimestamps":{
      "name":"JsonTimestamps",
      "http":{
        "method":"POST",
        "requestUri":"/JsonTimestamps",
        "responseCode":200
      },
      "input":{"shape":"JsonTimestampsInputOutput"},
      "output":{"shape":"JsonTimestampsInputOutput"},
      "documentation":"<p>This tests how timestamps are serialized, including using the default format of date-time and various @timestampFormat trait values.</p>"
    },
    "JsonUnions":{
      "name":"JsonUnions",
      "http":{
        "method":"PUT",
        "requestUri":"/JsonUnions",
        "responseCode":200
      },
      "input":{"shape":"UnionInputOutput"},
      "output":{"shape":"UnionInputOutput"},
      "documentation":"<p>This operation uses unions for inputs and outputs.</p>",
      "idempotent":true
    },
    "MediaTypeHeader":{
      "name":"MediaTypeHeader",
      "http":{
        "method":"GET",
        "requestUri":"/MediaTypeHeader",
        "responseCode":200
      },
      "input":{"shape":"MediaTypeHeaderInput"},
      "output":{"shape":"MediaTypeHeaderOutput"},
      "documentation":"<p>This example ensures that mediaType strings are base64 encoded in headers.</p>"
    },
    "NoInputAndNoOutput":{
      "name":"NoInputAndNoOutput",
      "http":{
        "method":"POST",
        "requestUri":"/NoInputAndNoOutput",
        "responseCode":200
      },
      "documentation":"<p>The example tests how requests and responses are serialized when there's no request or response payload because the operation has no input or output. While this should be rare, code generators must support this.</p>"
    },
    "NoInputAndOutput":{
      "name":"NoInputAndOutput",
      "http":{
        "method":"POST",
        "requestUri":"/NoInputAndOutputOutput",
        "responseCode":200
      },
      "output":{"shape":"NoInputAndOutputOutput"},
      "documentation":"<p>The example tests how requests and responses are serialized when there's no request or response payload because the operation has no input and the output is empty. While this should be rare, code generators must support this.</p>"
    },
    "NullAndEmptyHeadersClient":{
      "name":"NullAndEmptyHeadersClient",
      "http":{
        "method":"GET",
        "requestUri":"/NullAndEmptyHeadersClient",
        "responseCode":200
      },
      "input":{"shape":"NullAndEmptyHeadersIO"},
      "output":{"shape":"NullAndEmptyHeadersIO"},
      "documentation":"<p>Null and empty headers are not sent over the wire.</p>"
    },
    "NullAndEmptyHeadersServer":{
      "name":"NullAndEmptyHeadersServer",
      "http":{
        "method":"GET",
        "requestUri":"/NullAndEmptyHeadersServer",
        "responseCode":200
      },
      "input":{"shape":"NullAndEmptyHeadersIO"},
      "output":{"shape":"NullAndEmptyHeadersIO"},
      "documentation":"<p>Null and empty headers are not sent over the wire.</p>"
    },
    "OmitsNullSerializesEmptyString":{
      "name":"OmitsNullSerializesEmptyString",
      "http":{
        "method":"GET",
        "requestUri":"/OmitsNullSerializesEmptyString",
        "responseCode":200
      },
      "input":{"shape":"OmitsNullSerializesEmptyStringInput"},
      "documentation":"<p>Omits null, but serializes empty string value.</p>"
    },
    "OmitsSerializingEmptyLists":{
      "name":"OmitsSerializingEmptyLists",
      "http":{
        "method":"POST",
        "requestUri":"/OmitsSerializingEmptyLists",
        "responseCode":200
      },
      "input":{"shape":"OmitsSerializingEmptyListsInput"},
      "documentation":"<p>Omits serializing empty lists. Because empty strings are serilized as <code>Foo=</code>, empty lists cannot also be serialized as <code>Foo=</code> and instead must be omitted.</p>"
    },
    "PostUnionWithJsonName":{
      "name":"PostUnionWithJsonName",
      "http":{
        "method":"POST",
        "requestUri":"/PostUnionWithJsonName",
        "responseCode":200
      },
      "input":{"shape":"PostUnionWithJsonNameInput"},
      "output":{"shape":"PostUnionWithJsonNameOutput"},
      "documentation":"<p>This operation defines a union that uses jsonName on some members.</p>"
    },
    "PutWithContentEncoding":{
      "name":"PutWithContentEncoding",
      "http":{
        "method":"POST",
        "requestUri":"/requestcompression/putcontentwithencoding",
        "responseCode":200
      },
      "input":{"shape":"PutWithContentEncodingInput"},
      "requestcompression":{"encodings":["gzip"]}
    },
    "QueryIdempotencyTokenAutoFill":{
      "name":"QueryIdempotencyTokenAutoFill",
      "http":{
        "method":"POST",
        "requestUri":"/QueryIdempotencyTokenAutoFill",
        "responseCode":200
      },
      "input":{"shape":"QueryIdempotencyTokenAutoFillInput"},
      "documentation":"<p>Automatically adds idempotency tokens.</p>"
    },
    "QueryParamsAsStringListMap":{
      "name":"QueryParamsAsStringListMap",
      "http":{
        "method":"POST",
        "requestUri":"/StringListMap",
        "responseCode":200
      },
      "input":{"shape":"QueryParamsAsStringListMapInput"}
    },
    "QueryPrecedence":{
      "name":"QueryPrecedence",
      "http":{
        "method":"POST",
        "requestUri":"/Precedence",
        "responseCode":200
      },
      "input":{"shape":"QueryPrecedenceInput"}
    },
    "RecursiveShapes":{
      "name":"RecursiveShapes",
      "http":{
        "method":"PUT",
        "requestUri":"/RecursiveShapes",
        "responseCode":200
      },
      "input":{"shape":"RecursiveShapesInputOutput"},
      "output":{"shape":"RecursiveShapesInputOutput"},
      "documentation":"<p>Recursive shapes</p>",
      "idempotent":true
    },
    "SimpleScalarProperties":{
      "name":"SimpleScalarProperties",
      "http":{
        "method":"PUT",
        "requestUri":"/SimpleScalarProperties",
        "responseCode":200
      },
      "input":{"shape":"SimpleScalarPropertiesInputOutput"},
      "output":{"shape":"SimpleScalarPropertiesInputOutput"},
      "idempotent":true
    },
    "TestBodyStructure":{
      "name":"TestBodyStructure",
      "http":{
        "method":"POST",
        "requestUri":"/body",
        "responseCode":200
      },
      "input":{"shape":"TestBodyStructureInputOutput"},
      "output":{"shape":"TestBodyStructureInputOutput"},
      "documentation":"<p>This example operation serializes a structure in the HTTP body.</p> <p>It should ensure Content-Type: application/json is used in all requests and that an &quot;empty&quot; body is an empty JSON document ({}).</p>",
      "idempotent":true
    },
    "TestNoPayload":{
      "name":"TestNoPayload",
      "http":{
        "method":"GET",
        "requestUri":"/no_payload",
        "responseCode":200
      },
      "input":{"shape":"TestNoPayloadInputOutput"},
      "output":{"shape":"TestNoPayloadInputOutput"},
      "documentation":"<p>This example operation serializes a request without an HTTP body.</p> <p>These tests are to ensure we do not attach a body or related headers (Content-Length, Content-Type) to operations that semantically cannot produce an HTTP body.</p>"
    },
    "TestPayloadBlob":{
      "name":"TestPayloadBlob",
      "http":{
        "method":"POST",
        "requestUri":"/blob_payload",
        "responseCode":200
      },
      "input":{"shape":"TestPayloadBlobInputOutput"},
      "output":{"shape":"TestPayloadBlobInputOutput"},
      "documentation":"<p>This example operation serializes a payload targeting a blob.</p> <p>The Blob shape is not structured content and we cannot make assumptions about what data will be sent. This test ensures only a generic &quot;Content-Type: application/octet-stream&quot; header is used, and that we are not treating an empty body as an empty JSON document.</p>",
      "idempotent":true
    },
    "TestPayloadStructure":{
      "name":"TestPayloadStructure",
      "http":{
        "method":"POST",
        "requestUri":"/payload",
        "responseCode":200
      },
      "input":{"shape":"TestPayloadStructureInputOutput"},
      "output":{"shape":"TestPayloadStructureInputOutput"},
      "documentation":"<p>This example operation serializes a payload targeting a structure.</p> <p>This enforces the same requirements as TestBodyStructure but with the body specified by the @httpPayload trait.</p>",
      "idempotent":true
    },
    "TimestampFormatHeaders":{
      "name":"TimestampFormatHeaders",
      "http":{
        "method":"POST",
        "requestUri":"/TimestampFormatHeaders",
        "responseCode":200
      },
      "input":{"shape":"TimestampFormatHeadersIO"},
      "output":{"shape":"TimestampFormatHeadersIO"},
      "documentation":"<p>This example tests how timestamp request and response headers are serialized.</p>"
    },
    "UnitInputAndOutput":{
      "name":"UnitInputAndOutput",
      "http":{
        "method":"POST",
        "requestUri":"/UnitInputAndOutput",
        "responseCode":200
      },
      "documentation":"<p>This test is similar to NoInputAndNoOutput, but uses explicit Unit types.</p>"
    }
  },
  "shapes":{
    "AllQueryStringTypesInput":{
      "type":"structure",
      "members":{
        "queryString":{
          "shape":"String",
          "location":"querystring",
          "locationName":"String"
        },
        "queryStringList":{
          "shape":"StringList",
          "location":"querystring",
          "locationName":"StringList"
        },
        "queryStringSet":{
          "shape":"StringSet",
          "location":"querystring",
          "locationName":"StringSet"
        },
        "queryByte":{
          "shape":"Integer",
          "location":"querystring",
          "locationName":"Byte"
        },
        "queryShort":{
          "shape":"Integer",
          "location":"querystring",
          "locationName":"Short"
        },
        "queryInteger":{
          "shape":"Integer",
          "location":"querystring",
          "locationName":"Integer"
        },
        "queryIntegerList":{
          "shape":"IntegerList",
          "location":"querystring",
          "locationName":"IntegerList"
        },
        "queryIntegerSet":{
          "shape":"IntegerSet",
          "location":"querystring",
          "locationName":"IntegerSet"
        },
        "queryLong":{
          "shape":"Long",
          "location":"querystring",
          "locationName":"Long"
        },
        "queryFloat":{
          "shape":"Float",
          "location":"querystring",
          "locationName":"Float"
        },
        "queryDouble":{
          "shape":"Double",
          "location":"querystring",
          "locationName":"Double"
        },
        "queryDoubleList":{
          "shape":"DoubleList",
          "location":"querystring",
          "locationName":"DoubleList"
        },
        "queryBoolean":{
          "shape":"Boolean",
          "location":"querystring",
          "locationName":"Boolean"
        },
        "queryBooleanList":{
          "shape":"BooleanList",
          "location":"querystring",
          "locationName":"BooleanList"
        },
        "queryTimestamp":{
          "shape":"Timestamp",
          "location":"querystring",
          "locationName":"Timestamp"
        },
        "queryTimestampList":{
          "shape":"TimestampList",
          "location":"querystring",
          "locationName":"TimestampList"
        },
        "queryEnum":{
          "shape":"FooEnum",
          "location":"querystring",
          "locationName":"Enum"
        },
        "queryEnumList":{
          "shape":"FooEnumList",
          "location":"querystring",
          "locationName":"EnumList"
        },
        "queryIntegerEnum":{
          "shape":"IntegerEnum",
          "location":"querystring",
          "locationName":"IntegerEnum"
        },
        "queryIntegerEnumList":{
          "shape":"IntegerEnumList",
          "location":"querystring",
          "locationName":"IntegerEnumList"
        },
        "queryParamsMapOfStringList":{
          "shape":"StringListMap",
          "location":"querystring"
        }
      }
    },
    "Blob":{"type":"blob"},
    "Boolean":{
      "type":"boolean",
      "box":true
    },
    "BooleanList":{
      "type":"list",
      "member":{"shape":"Boolean"}
    },
    "ComplexError":{
      "type":"structure",
      "members":{
        "Header":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Header"
        },
        "TopLevel":{"shape":"String"},
        "Nested":{"shape":"ComplexNestedErrorData"}
      },
      "documentation":"<p>This error is thrown when a request is invalid.</p>",
      "error":{
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "ComplexNestedErrorData":{
      "type":"structure",
      "members":{
        "Foo":{
          "shape":"String",
          "locationName":"Fooooo"
        }
      }
    },
    "ConstantAndVariableQueryStringInput":{
      "type":"structure",
      "members":{
        "baz":{
          "shape":"String",
          "location":"querystring",
          "locationName":"baz"
        },
        "maybeSet":{
          "shape":"String",
          "location":"querystring",
          "locationName":"maybeSet"
        }
      }
    },
    "ConstantQueryStringInput":{
      "type":"structure",
      "required":["hello"],
      "members":{
        "hello":{
          "shape":"String",
          "location":"uri",
          "locationName":"hello"
        }
      }
    },
    "DateTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "DatetimeOffsetsOutput":{
      "type":"structure",
      "members":{
        "datetime":{"shape":"DateTime"}
      }
    },
    "DenseBooleanMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"Boolean"}
    },
    "DenseNumberMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"Integer"}
    },
    "DenseSetMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"StringSet"}
    },
    "DenseStringMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "DenseStructMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"GreetingStruct"}
    },
    "Document":{
      "type":"structure",
      "members":{
      },
      "document":true
    },
    "DocumentTypeAsMapValueInputOutput":{
      "type":"structure",
      "members":{
        "docValuedMap":{"shape":"DocumentValuedMap"}
      }
    },
    "DocumentTypeAsPayloadInputOutput":{
      "type":"structure",
      "members":{
        "documentValue":{"shape":"Document"}
      },
      "payload":"documentValue"
    },
    "DocumentTypeInputOutput":{
      "type":"structure",
      "members":{
        "stringValue":{"shape":"String"},
        "documentValue":{"shape":"Document"}
      }
    },
    "DocumentValuedMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"Document"}
    },
    "Double":{
      "type":"double",
      "box":true
    },
    "DoubleList":{
      "type":"list",
      "member":{"shape":"Double"}
    },
    "EmptyInputAndEmptyOutputInput":{
      "type":"structure",
      "members":{
      }
    },
    "EmptyInputAndEmptyOutputOutput":{
      "type":"structure",
      "members":{
      }
    },
    "EnumPayloadInput":{
      "type":"structure",
      "members":{
        "payload":{"shape":"StringEnum"}
      },
      "payload":"payload"
    },
    "EpochSeconds":{
      "type":"timestamp",
      "timestampFormat":"unixTimestamp"
    },
    "Float":{
      "type":"float",
      "box":true
    },
    "FooEnum":{
      "type":"string",
      "enum":[
        "Foo",
        "Baz",
        "Bar",
        "1",
        "0"
      ]
    },
    "FooEnumList":{
      "type":"list",
      "member":{"shape":"FooEnum"}
    },
    "FooEnumMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"FooEnum"}
    },
    "FooEnumSet":{
      "type":"list",
      "member":{"shape":"FooEnum"}
    },
    "FooError":{
      "type":"structure",
      "members":{
      },
      "documentation":"<p>This error has test cases that test some of the dark corners of Amazon service framework history. It should only be implemented by clients.</p>",
      "error":{"httpStatusCode":500},
      "exception":true,
      "fault":true
    },
    "FractionalSecondsOutput":{
      "type":"structure",
      "members":{
        "datetime":{"shape":"DateTime"}
      }
    },
    "GreetingStruct":{
      "type":"structure",
      "members":{
        "hi":{"shape":"String"}
      }
    },
    "GreetingWithErrorsOutput":{
      "type":"structure",
      "members":{
        "greeting":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Greeting"
        }
      }
    },
    "HostLabelInput":{
      "type":"structure",
      "required":["label"],
      "members":{
        "label":{
          "shape":"String",
          "hostLabel":true
        }
      }
    },
    "HttpChecksumRequiredInputOutput":{
      "type":"structure",
      "members":{
        "foo":{"shape":"String"}
      }
    },
    "HttpDate":{
      "type":"timestamp",
      "timestampFormat":"rfc822"
    },
    "HttpPayloadTraitsInputOutput":{
      "type":"structure",
      "members":{
        "foo":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Foo"
        },
        "blob":{"shape":"Blob"}
      },
      "payload":"blob"
    },
    "HttpPayloadWithStructureInputOutput":{
      "type":"structure",
      "members":{
        "nested":{"shape":"NestedPayload"}
      },
      "payload":"nested"
    },
    "HttpPayloadWithUnionInputOutput":{
      "type":"structure",
      "members":{
        "nested":{"shape":"UnionPayload"}
      },
      "payload":"nested"
    },
    "HttpPrefixHeadersInResponseInput":{
      "type":"structure",
      "members":{
      }
    },
    "HttpPrefixHeadersInResponseOutput":{
      "type":"structure",
      "members":{
        "prefixHeaders":{
          "shape":"StringMap",
          "location":"headers",
          "locationName":""
        }
      }
    },
    "HttpPrefixHeadersInput":{
      "type":"structure",
      "members":{
        "foo":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Foo"
        },
        "fooMap":{
          "shape":"StringMap",
          "location":"headers",
          "locationName":"X-Foo-"
        }
      }
    },
    "HttpPrefixHeadersOutput":{
      "type":"structure",
      "members":{
        "foo":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Foo"
        },
        "fooMap":{
          "shape":"StringMap",
          "location":"headers",
          "locationName":"X-Foo-"
        }
      }
    },
    "HttpRequestWithFloatLabelsInput":{
      "type":"structure",
      "required":[
        "float",
        "double"
      ],
      "members":{
        "float":{
          "shape":"Float",
          "location":"uri",
          "locationName":"float"
        },
        "double":{
          "shape":"Double",
          "location":"uri",
          "locationName":"double"
        }
      }
    },
    "HttpRequestWithGreedyLabelInPathInput":{
      "type":"structure",
      "required":[
        "foo",
        "baz"
      ],
      "members":{
        "foo":{
          "shape":"String",
          "location":"uri",
          "locationName":"foo"
        },
        "baz":{
          "shape":"String",
          "location":"uri",
          "locationName":"baz"
        }
      }
    },
    "HttpRequestWithLabelsAndTimestampFormatInput":{
      "type":"structure",
      "required":[
        "memberEpochSeconds",
        "memberHttpDate",
        "memberDateTime",
        "defaultFormat",
        "targetEpochSeconds",
        "targetHttpDate",
        "targetDateTime"
      ],
      "members":{
        "memberEpochSeconds":{
          "shape":"SyntheticTimestamp_epoch_seconds",
          "location":"uri",
          "locationName":"memberEpochSeconds"
        },
        "memberHttpDate":{
          "shape":"SyntheticTimestamp_http_date",
          "location":"uri",
          "locationName":"memberHttpDate"
        },
        "memberDateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "location":"uri",
          "locationName":"memberDateTime"
        },
        "defaultFormat":{
          "shape":"Timestamp",
          "location":"uri",
          "locationName":"defaultFormat"
        },
        "targetEpochSeconds":{
          "shape":"EpochSeconds",
          "location":"uri",
          "locationName":"targetEpochSeconds"
        },
        "targetHttpDate":{
          "shape":"HttpDate",
          "location":"uri",
          "locationName":"targetHttpDate"
        },
        "targetDateTime":{
          "shape":"DateTime",
          "location":"uri",
          "locationName":"targetDateTime"
        }
      }
    },
    "HttpRequestWithLabelsInput":{
      "type":"structure",
      "required":[
        "string",
        "short",
        "integer",
        "long",
        "float",
        "double",
        "boolean",
        "timestamp"
      ],
      "members":{
        "string":{
          "shape":"String",
          "location":"uri",
          "locationName":"string"
        },
        "short":{
          "shape":"Integer",
          "location":"uri",
          "locationName":"short"
        },
        "integer":{
          "shape":"Integer",
          "location":"uri",
          "locationName":"integer"
        },
        "long":{
          "shape":"Long",
          "location":"uri",
          "locationName":"long"
        },
        "float":{
          "shape":"Float",
          "location":"uri",
          "locationName":"float"
        },
        "double":{
          "shape":"Double",
          "location":"uri",
          "locationName":"double"
        },
        "boolean":{
          "shape":"Boolean",
          "documentation":"<p>Serialized in the path as true or false.</p>",
          "location":"uri",
          "locationName":"boolean"
        },
        "timestamp":{
          "shape":"Timestamp",
          "documentation":"<p>Note that this member has no format, so it's serialized as an RFC 3399 date-time.</p>",
          "location":"uri",
          "locationName":"timestamp"
        }
      }
    },
    "HttpRequestWithRegexLiteralInput":{
      "type":"structure",
      "required":["str"],
      "members":{
        "str":{
          "shape":"String",
          "location":"uri",
          "locationName":"str"
        }
      }
    },
    "HttpResponseCodeOutput":{
      "type":"structure",
      "members":{
        "Status":{
          "shape":"Integer",
          "location":"statusCode"
        }
      }
    },
    "IgnoreQueryParamsInResponseOutput":{
      "type":"structure",
      "members":{
        "baz":{
          "shape":"String",
          "location":"uri",
          "locationName":"baz"
        }
      }
    },
    "InputAndOutputWithHeadersIO":{
      "type":"structure",
      "members":{
        "headerString":{
          "shape":"String",
          "location":"header",
          "locationName":"X-String"
        },
        "headerByte":{
          "shape":"Integer",
          "location":"header",
          "locationName":"X-Byte"
        },
        "headerShort":{
          "shape":"Integer",
          "location":"header",
          "locationName":"X-Short"
        },
        "headerInteger":{
          "shape":"Integer",
          "location":"header",
          "locationName":"X-Integer"
        },
        "headerLong":{
          "shape":"Long",
          "location":"header",
          "locationName":"X-Long"
        },
        "headerFloat":{
          "shape":"Float",
          "location":"header",
          "locationName":"X-Float"
        },
        "headerDouble":{
          "shape":"Double",
          "location":"header",
          "locationName":"X-Double"
        },
        "headerTrueBool":{
          "shape":"Boolean",
          "location":"header",
          "locationName":"X-Boolean1"
        },
        "headerFalseBool":{
          "shape":"Boolean",
          "location":"header",
          "locationName":"X-Boolean2"
        },
        "headerStringList":{
          "shape":"StringList",
          "location":"header",
          "locationName":"X-StringList"
        },
        "headerStringSet":{
          "shape":"StringSet",
          "location":"header",
          "locationName":"X-StringSet"
        },
        "headerIntegerList":{
          "shape":"IntegerList",
          "location":"header",
          "locationName":"X-IntegerList"
        },
        "headerBooleanList":{
          "shape":"BooleanList",
          "location":"header",
          "locationName":"X-BooleanList"
        },
        "headerTimestampList":{
          "shape":"TimestampList",
          "location":"header",
          "locationName":"X-TimestampList"
        },
        "headerEnum":{
          "shape":"FooEnum",
          "location":"header",
          "locationName":"X-Enum"
        },
        "headerEnumList":{
          "shape":"FooEnumList",
          "location":"header",
          "locationName":"X-EnumList"
        },
        "headerIntegerEnum":{
          "shape":"IntegerEnum",
          "location":"header",
          "locationName":"X-IntegerEnum"
        },
        "headerIntegerEnumList":{
          "shape":"IntegerEnumList",
          "location":"header",
          "locationName":"X-IntegerEnumList"
        }
      }
    },
    "Integer":{
      "type":"integer",
      "box":true
    },
    "IntegerEnum":{
      "type":"integer",
      "box":true
    },
    "IntegerEnumList":{
      "type":"list",
      "member":{"shape":"IntegerEnum"}
    },
    "IntegerEnumMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"IntegerEnum"}
    },
    "IntegerEnumSet":{
      "type":"list",
      "member":{"shape":"IntegerEnum"}
    },
    "IntegerList":{
      "type":"list",
      "member":{"shape":"Integer"}
    },
    "IntegerSet":{
      "type":"list",
      "member":{"shape":"Integer"}
    },
    "InvalidGreeting":{
      "type":"structure",
      "members":{
        "Message":{"shape":"String"}
      },
      "documentation":"<p>This error is thrown when an invalid greeting value is provided.</p>",
      "error":{
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "JsonBlobsInputOutput":{
      "type":"structure",
      "members":{
        "data":{"shape":"Blob"}
      }
    },
    "JsonEnumsInputOutput":{
      "type":"structure",
      "members":{
        "fooEnum1":{"shape":"FooEnum"},
        "fooEnum2":{"shape":"FooEnum"},
        "fooEnum3":{"shape":"FooEnum"},
        "fooEnumList":{"shape":"FooEnumList"},
        "fooEnumSet":{"shape":"FooEnumSet"},
        "fooEnumMap":{"shape":"FooEnumMap"}
      }
    },
    "JsonIntEnumsInputOutput":{
      "type":"structure",
      "members":{
        "integerEnum1":{"shape":"IntegerEnum"},
        "integerEnum2":{"shape":"IntegerEnum"},
        "integerEnum3":{"shape":"IntegerEnum"},
        "integerEnumList":{"shape":"IntegerEnumList"},
        "integerEnumSet":{"shape":"IntegerEnumSet"},
        "integerEnumMap":{"shape":"IntegerEnumMap"}
      }
    },
    "JsonListsInputOutput":{
      "type":"structure",
      "members":{
        "stringList":{"shape":"StringList"},
        "stringSet":{"shape":"StringSet"},
        "integerList":{"shape":"IntegerList"},
        "booleanList":{"shape":"BooleanList"},
        "timestampList":{"shape":"TimestampList"},
        "enumList":{"shape":"FooEnumList"},
        "intEnumList":{"shape":"IntegerEnumList"},
        "nestedStringList":{"shape":"NestedStringList"},
        "structureList":{
          "shape":"StructureList",
          "locationName":"myStructureList"
        }
      }
    },
    "JsonMapsInputOutput":{
      "type":"structure",
      "members":{
        "denseStructMap":{"shape":"DenseStructMap"},
        "denseNumberMap":{"shape":"DenseNumberMap"},
        "denseBooleanMap":{"shape":"DenseBooleanMap"},
        "denseStringMap":{"shape":"DenseStringMap"},
        "denseSetMap":{"shape":"DenseSetMap"}
      }
    },
    "JsonTimestampsInputOutput":{
      "type":"structure",
      "members":{
        "normal":{"shape":"Timestamp"},
        "dateTime":{"shape":"SyntheticTimestamp_date_time"},
        "dateTimeOnTarget":{"shape":"DateTime"},
        "epochSeconds":{"shape":"SyntheticTimestamp_epoch_seconds"},
        "epochSecondsOnTarget":{"shape":"EpochSeconds"},
        "httpDate":{"shape":"SyntheticTimestamp_http_date"},
        "httpDateOnTarget":{"shape":"HttpDate"}
      }
    },
    "JsonValue":{"type":"string"},
    "Long":{
      "type":"long",
      "box":true
    },
    "MediaTypeHeaderInput":{
      "type":"structure",
      "members":{
        "json":{
          "shape":"JsonValue",
          "jsonvalue":true,
          "location":"header",
          "locationName":"X-Json"
        }
      }
    },
    "MediaTypeHeaderOutput":{
      "type":"structure",
      "members":{
        "json":{
          "shape":"JsonValue",
          "jsonvalue":true,
          "location":"header",
          "locationName":"X-Json"
        }
      }
    },
    "MyUnion":{
      "type":"structure",
      "members":{
        "stringValue":{"shape":"String"},
        "booleanValue":{"shape":"Boolean"},
        "numberValue":{"shape":"Integer"},
        "blobValue":{"shape":"Blob"},
        "timestampValue":{"shape":"Timestamp"},
        "enumValue":{"shape":"FooEnum"},
        "listValue":{"shape":"StringList"},
        "mapValue":{"shape":"StringMap"},
        "structureValue":{"shape":"GreetingStruct"},
        "renamedStructureValue":{"shape":"RenamedGreeting"}
      },
      "documentation":"<p>A union with a representative set of types for members.</p>",
      "union":true
    },
    "NestedPayload":{
      "type":"structure",
      "members":{
        "greeting":{"shape":"String"},
        "name":{"shape":"String"}
      }
    },
    "NestedStringList":{
      "type":"list",
      "member":{"shape":"StringList"},
      "documentation":"<p>A list of lists of strings.</p>"
    },
    "NoInputAndOutputOutput":{
      "type":"structure",
      "members":{
      }
    },
    "NullAndEmptyHeadersIO":{
      "type":"structure",
      "members":{
        "a":{
          "shape":"String",
          "location":"header",
          "locationName":"X-A"
        },
        "b":{
          "shape":"String",
          "location":"header",
          "locationName":"X-B"
        },
        "c":{
          "shape":"StringList",
          "location":"header",
          "locationName":"X-C"
        }
      }
    },
    "OmitsNullSerializesEmptyStringInput":{
      "type":"structure",
      "members":{
        "nullValue":{
          "shape":"String",
          "location":"querystring",
          "locationName":"Null"
        },
        "emptyString":{
          "shape":"String",
          "location":"querystring",
          "locationName":"Empty"
        }
      }
    },
    "OmitsSerializingEmptyListsInput":{
      "type":"structure",
      "members":{
        "queryStringList":{
          "shape":"StringList",
          "location":"querystring",
          "locationName":"StringList"
        },
        "queryIntegerList":{
          "shape":"IntegerList",
          "location":"querystring",
          "locationName":"IntegerList"
        },
        "queryDoubleList":{
          "shape":"DoubleList",
          "location":"querystring",
          "locationName":"DoubleList"
        },
        "queryBooleanList":{
          "shape":"BooleanList",
          "location":"querystring",
          "locationName":"BooleanList"
        },
        "queryTimestampList":{
          "shape":"TimestampList",
          "location":"querystring",
          "locationName":"TimestampList"
        },
        "queryEnumList":{
          "shape":"FooEnumList",
          "location":"querystring",
          "locationName":"EnumList"
        },
        "queryIntegerEnumList":{
          "shape":"IntegerEnumList",
          "location":"querystring",
          "locationName":"IntegerEnumList"
        }
      }
    },
    "PayloadConfig":{
      "type":"structure",
      "members":{
        "data":{"shape":"Integer"}
      }
    },
    "PostUnionWithJsonNameInput":{
      "type":"structure",
      "members":{
        "value":{"shape":"UnionWithJsonName"}
      }
    },
    "PostUnionWithJsonNameOutput":{
      "type":"structure",
      "required":["value"],
      "members":{
        "value":{"shape":"UnionWithJsonName"}
      }
    },
    "PutWithContentEncodingInput":{
      "type":"structure",
      "members":{
        "encoding":{
          "shape":"String",
          "location":"header",
          "locationName":"Content-Encoding"
        },
        "data":{"shape":"String"}
      }
    },
    "QueryIdempotencyTokenAutoFillInput":{
      "type":"structure",
      "members":{
        "token":{
          "shape":"String",
          "idempotencyToken":true,
          "location":"querystring",
          "locationName":"token"
        }
      }
    },
    "QueryParamsAsStringListMapInput":{
      "type":"structure",
      "members":{
        "qux":{
          "shape":"String",
          "location":"querystring",
          "locationName":"corge"
        },
        "foo":{
          "shape":"StringListMap",
          "location":"querystring"
        }
      }
    },
    "QueryPrecedenceInput":{
      "type":"structure",
      "members":{
        "foo":{
          "shape":"String",
          "location":"querystring",
          "locationName":"bar"
        },
        "baz":{
          "shape":"StringMap",
          "location":"querystring"
        }
      }
    },
    "RecursiveShapesInputOutput":{
      "type":"structure",
      "members":{
        "nested":{"shape":"RecursiveShapesInputOutputNested1"}
      }
    },
    "RecursiveShapesInputOutputNested1":{
      "type":"structure",
      "members":{
        "foo":{"shape":"String"},
        "nested":{"shape":"RecursiveShapesInputOutputNested2"}
      }
    },
    "RecursiveShapesInputOutputNested2":{
      "type":"structure",
      "members":{
        "bar":{"shape":"String"},
        "recursiveMember":{"shape":"RecursiveShapesInputOutputNested1"}
      }
    },
    "RenamedGreeting":{
      "type":"structure",
      "members":{
        "salutation":{"shape":"String"}
      }
    },
    "SimpleScalarPropertiesInputOutput":{
      "type":"structure",
      "members":{
        "foo":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Foo"
        },
        "stringValue":{"shape":"String"},
        "trueBooleanValue":{"shape":"Boolean"},
        "falseBooleanValue":{"shape":"Boolean"},
        "byteValue":{"shape":"Integer"},
        "shortValue":{"shape":"Integer"},
        "integerValue":{"shape":"Integer"},
        "longValue":{"shape":"Long"},
        "floatValue":{"shape":"Float"},
        "doubleValue":{
          "shape":"Double",
          "locationName":"DoubleDribble"
        }
      }
    },
    "String":{"type":"string"},
    "StringEnum":{
      "type":"string",
      "enum":["enumvalue"]
    },
    "StringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "StringListMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"StringList"}
    },
    "StringMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "StringPayloadInput":{
      "type":"structure",
      "members":{
        "payload":{"shape":"String"}
      },
      "payload":"payload"
    },
    "StringSet":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "StructureList":{
      "type":"list",
      "member":{"shape":"StructureListMember"}
    },
    "StructureListMember":{
      "type":"structure",
      "members":{
        "a":{
          "shape":"String",
          "locationName":"value"
        },
        "b":{
          "shape":"String",
          "locationName":"other"
        }
      }
    },
    "SyntheticTimestamp_date_time":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "SyntheticTimestamp_epoch_seconds":{
      "type":"timestamp",
      "timestampFormat":"unixTimestamp"
    },
    "SyntheticTimestamp_http_date":{
      "type":"timestamp",
      "timestampFormat":"rfc822"
    },
    "TestBodyStructureInputOutput":{
      "type":"structure",
      "members":{
        "testId":{
          "shape":"String",
          "location":"header",
          "locationName":"x-amz-test-id"
        },
        "testConfig":{"shape":"TestConfig"}
      }
    },
    "TestConfig":{
      "type":"structure",
      "members":{
        "timeout":{"shape":"Integer"}
      }
    },
    "TestNoPayloadInputOutput":{
      "type":"structure",
      "members":{
        "testId":{
          "shape":"String",
          "location":"header",
          "locationName":"X-Amz-Test-Id"
        }
      }
    },
    "TestPayloadBlobInputOutput":{
      "type":"structure",
      "members":{
        "contentType":{
          "shape":"String",
          "location":"header",
          "locationName":"Content-Type"
        },
        "data":{"shape":"Blob"}
      },
      "payload":"data"
    },
    "TestPayloadStructureInputOutput":{
      "type":"structure",
      "members":{
        "testId":{
          "shape":"String",
          "location":"header",
          "locationName":"x-amz-test-id"
        },
        "payloadConfig":{"shape":"PayloadConfig"}
      },
      "payload":"payloadConfig"
    },
    "Timestamp":{"type":"timestamp"},
    "TimestampFormatHeadersIO":{
      "type":"structure",
      "members":{
        "memberEpochSeconds":{
          "shape":"SyntheticTimestamp_epoch_seconds",
          "location":"header",
          "locationName":"X-memberEpochSeconds"
        },
        "memberHttpDate":{
          "shape":"SyntheticTimestamp_http_date",
          "location":"header",
          "locationName":"X-memberHttpDate"
        },
        "memberDateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "location":"header",
          "locationName":"X-memberDateTime"
        },
        "defaultFormat":{
          "shape":"Timestamp",
          "location":"header",
          "locationName":"X-defaultFormat"
        },
        "targetEpochSeconds":{
          "shape":"EpochSeconds",
          "location":"header",
          "locationName":"X-targetEpochSeconds"
        },
        "targetHttpDate":{
          "shape":"HttpDate",
          "location":"header",
          "locationName":"X-targetHttpDate"
        },
        "targetDateTime":{
          "shape":"DateTime",
          "location":"header",
          "locationName":"X-targetDateTime"
        }
      }
    },
    "TimestampList":{
      "type":"list",
      "member":{"shape":"Timestamp"}
    },
    "UnionInputOutput":{
      "type":"structure",
      "members":{
        "contents":{"shape":"MyUnion"}
      },
      "documentation":"<p>A shared structure that contains a single union member.</p>"
    },
    "UnionPayload":{
      "type":"structure",
      "members":{
        "greeting":{"shape":"String"}
      },
      "union":true
    },
    "UnionWithJsonName":{
      "type":"structure",
      "members":{
        "foo":{
          "shape":"String",
          "locationName":"FOO"
        },
        "bar":{"shape":"String"},
        "baz":{
          "shape":"String",
          "locationName":"_baz"
        }
      },
      "union":true
    }
  },
  "documentation":"<p>A REST JSON service that sends JSON requests and responses.</p>"
}
