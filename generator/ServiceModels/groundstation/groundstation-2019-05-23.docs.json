{
  "version": "2.0",
  "service": "<p>Welcome to the AWS Ground Station API Reference. AWS Ground Station is a fully managed service that enables you to control satellite communications, downlink and process satellite data, and scale your satellite operations efficiently and cost-effectively without having to build or manage your own ground station infrastructure.</p>",
  "operations": {
    "CancelContact": "<p>Cancels a contact with a specified contact ID.</p>",
    "CreateConfig": "<p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p> <p>Only one type of <code>configData</code> can be specified.</p>",
    "CreateDataflowEndpointGroup": "<p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p> <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code> to specify which endpoints to use during a contact.</p> <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code> must match a <code>DataflowEndpoint</code> in the same group.</p>",
    "CreateEphemeris": "<p>Create an ephemeris with your specified <a>EphemerisData</a>.</p>",
    "CreateMissionProfile": "<p>Creates a mission profile.</p> <p> <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>",
    "DeleteConfig": "<p>Deletes a <code>Config</code>.</p>",
    "DeleteDataflowEndpointGroup": "<p>Deletes a dataflow endpoint group.</p>",
    "DeleteEphemeris": "<p>Delete an ephemeris.</p>",
    "DeleteMissionProfile": "<p>Deletes a mission profile.</p>",
    "DescribeContact": "<p>Describes an existing contact.</p>",
    "DescribeEphemeris": "<p>Retrieve information about an existing ephemeris.</p>",
    "GetAgentConfiguration": "<p><note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p>Gets the latest configuration information for a registered agent.</p></p>",
    "GetConfig": "<p>Returns <code>Config</code> information.</p> <p>Only one <code>Config</code> response can be returned.</p>",
    "GetDataflowEndpointGroup": "<p>Returns the dataflow endpoint group.</p>",
    "GetMinuteUsage": "<p>Returns the number of reserved minutes used by account.</p>",
    "GetMissionProfile": "<p>Returns a mission profile.</p>",
    "GetSatellite": "<p>Returns a satellite.</p>",
    "ListConfigs": "<p>Returns a list of <code>Config</code> objects.</p>",
    "ListContacts": "<p>Returns a list of contacts.</p> <p>If <code>statusList</code> contains AVAILABLE, the request must include <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>. </p>",
    "ListDataflowEndpointGroups": "<p>Returns a list of <code>DataflowEndpoint</code> groups.</p>",
    "ListEphemerides": "<p>List your existing ephemerides.</p>",
    "ListGroundStations": "<p>Returns a list of ground stations. </p>",
    "ListMissionProfiles": "<p>Returns a list of mission profiles.</p>",
    "ListSatellites": "<p>Returns a list of satellites.</p>",
    "ListTagsForResource": "<p>Returns a list of tags for a specified resource.</p>",
    "RegisterAgent": "<p><note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p> Registers a new agent with AWS Ground Station. </p></p>",
    "ReserveContact": "<p>Reserves a contact using specified parameters.</p>",
    "TagResource": "<p>Assigns a tag to a resource.</p>",
    "UntagResource": "<p>Deassigns a resource tag.</p>",
    "UpdateAgentStatus": "<p><note> <p> For use by AWS Ground Station Agent and shouldn't be called directly.</p> </note> <p>Update the status of the agent.</p></p>",
    "UpdateConfig": "<p>Updates the <code>Config</code> used when scheduling contacts.</p> <p>Updating a <code>Config</code> will not update the execution parameters for existing future contacts scheduled with this <code>Config</code>.</p>",
    "UpdateEphemeris": "<p>Update an existing ephemeris.</p>",
    "UpdateMissionProfile": "<p>Updates a mission profile.</p> <p>Updating a mission profile will not update the execution parameters for existing future contacts.</p>"
  },
  "shapes": {
    "AWSRegion": {
      "base": null,
      "refs": {
        "GetMissionProfileResponse$region": "<p>Region of a mission profile.</p>",
        "GroundStationData$region": "<p>Ground station Region.</p>",
        "MissionProfileListItem$region": "<p>Region of a mission profile.</p>"
      }
    },
    "AgentCpuCoresList": {
      "base": null,
      "refs": {
        "AgentDetails$reservedCpuCores": "<p><note> <p>This field should not be used. Use agentCpuCores instead.</p> </note> <p>List of CPU cores reserved for processes other than the agent running on the EC2 instance.</p></p>",
        "AgentDetails$agentCpuCores": "<p>List of CPU cores reserved for the agent.</p>"
      }
    },
    "AgentDetails": {
      "base": "<p>Detailed information about the agent.</p>",
      "refs": {
        "RegisterAgentRequest$agentDetails": "<p>Detailed information about the agent being registered.</p>"
      }
    },
    "AgentStatus": {
      "base": null,
      "refs": {
        "AggregateStatus$status": "<p>Aggregate status.</p>",
        "AwsGroundStationAgentEndpoint$agentStatus": "<p>The status of AgentEndpoint.</p>",
        "ComponentStatusData$status": "<p>Component status.</p>"
      }
    },
    "AggregateStatus": {
      "base": "<p>Aggregate status of Agent components.</p>",
      "refs": {
        "UpdateAgentStatusRequest$aggregateStatus": "<p>Aggregate status for agent.</p>"
      }
    },
    "AngleUnits": {
      "base": null,
      "refs": {
        "AzElSegments$angleUnit": "<p>The unit of measure for azimuth and elevation angles. All angles in all segments must use the same unit.</p>",
        "Elevation$unit": "<p>Elevation angle units.</p>"
      }
    },
    "AntennaDemodDecodeDetails": {
      "base": "<p>Details about an antenna demod decode <code>Config</code> used in a contact.</p>",
      "refs": {
        "ConfigDetails$antennaDemodDecodeDetails": "<p>Details for antenna demod decode <code>Config</code> in a contact.</p>"
      }
    },
    "AntennaDownlinkConfig": {
      "base": "<p>Information about how AWS Ground Station should configure an antenna for downlink during a contact.</p>",
      "refs": {
        "ConfigTypeData$antennaDownlinkConfig": "<p>Information about how AWS Ground Station should configure an antenna for downlink during a contact.</p>"
      }
    },
    "AntennaDownlinkDemodDecodeConfig": {
      "base": "<p>Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.</p>",
      "refs": {
        "ConfigTypeData$antennaDownlinkDemodDecodeConfig": "<p>Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.</p>"
      }
    },
    "AntennaUplinkConfig": {
      "base": "<p>Information about the uplink <code>Config</code> of an antenna.</p>",
      "refs": {
        "ConfigTypeData$antennaUplinkConfig": "<p>Information about how AWS Ground Station should conﬁgure an antenna for uplink during a contact.</p>"
      }
    },
    "AnyArn": {
      "base": null,
      "refs": {
        "ListTagsForResourceRequest$resourceArn": "<p>ARN of a resource.</p>",
        "TagResourceRequest$resourceArn": "<p>ARN of a resource tag.</p>",
        "UntagResourceRequest$resourceArn": "<p>ARN of a resource.</p>"
      }
    },
    "AuditResults": {
      "base": null,
      "refs": {
        "AwsGroundStationAgentEndpoint$auditResults": "<p>The results of the audit.</p>"
      }
    },
    "AwsGroundStationAgentEndpoint": {
      "base": "<p>Information about AwsGroundStationAgentEndpoint.</p>",
      "refs": {
        "EndpointDetails$awsGroundStationAgentEndpoint": "<p>An agent endpoint.</p>"
      }
    },
    "AzElEphemeris": {
      "base": "<p>Azimuth elevation ephemeris data.</p> <p> Use this ephemeris type to provide pointing angles directly, rather than satellite orbital elements. Use this when you need precise antenna pointing but have imprecise or unknown satellite trajectory information. </p> <p> The azimuth elevation data specifies the antenna pointing direction at specific times relative to a ground station location. AWS Ground Station uses 4th order Lagrange interpolation to compute pointing angles between the provided data points. </p> <p> AWS Ground Station automatically filters interpolated pointing angles, including only those that are above the site mask elevation of the specified ground station. </p> <p> For more detail about providing azimuth elevation ephemerides to AWS Ground Station, see the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/providing-azimuth-elevation-ephemeris-data.html\">azimuth elevation ephemeris section</a> of the AWS Ground Station User Guide. </p>",
      "refs": {
        "EphemerisData$azEl": null
      }
    },
    "AzElEphemerisFilter": {
      "base": "<p>Filter for selecting contacts that use a specific <a>AzElEphemeris</a>.</p>",
      "refs": {
        "EphemerisFilter$azEl": "<p>Filter for <a>AzElEphemeris</a>.</p>"
      }
    },
    "AzElProgramTrackSettings": {
      "base": "<p>Program track settings for <a>AzElEphemeris</a>.</p>",
      "refs": {
        "ProgramTrackSettings$azEl": "<p>Program track settings for <a>AzElEphemeris</a>.</p>"
      }
    },
    "AzElSegment": {
      "base": "<p>A time segment containing azimuth elevation pointing data.</p> <p> Each segment defines a continuous time period with pointing angle data points. AWS Ground Station uses 4th order Lagrange interpolation between the provided points, so each segment must contain at least five data points. </p>",
      "refs": {
        "AzElSegmentList$member": null
      }
    },
    "AzElSegmentList": {
      "base": null,
      "refs": {
        "AzElSegments$azElSegmentList": "<p>List of azimuth elevation segments.</p> <p>Must contain between 1 and 100 segments. Segments must be in chronological order with no overlaps.</p>"
      }
    },
    "AzElSegments": {
      "base": "<p>Azimuth elevation segment collection.</p> <p>Contains five or more time-ordered segments that define antenna pointing angles over the ephemeris validity period.</p>",
      "refs": {
        "AzElSegmentsData$azElData": "<p>Azimuth elevation segment data provided directly in the request.</p> <p>Use this option for smaller datasets or when Amazon S3 access is not available.</p>"
      }
    },
    "AzElSegmentsData": {
      "base": "<p>Container for azimuth elevation segment data.</p> <p>Specify either <a>AzElSegmentsData$s3Object</a> to reference data in Amazon S3, or <a>AzElSegmentsData$azElData</a> to provide data inline.</p>",
      "refs": {
        "AzElEphemeris$data": "<p>Azimuth elevation segment data.</p> <p>You can provide data inline in the request or through an Amazon S3 object reference.</p>"
      }
    },
    "BandwidthUnits": {
      "base": null,
      "refs": {
        "FrequencyBandwidth$units": "<p>Frequency bandwidth units.</p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "AntennaUplinkConfig$transmitDisabled": "<p>Whether or not uplink transmit is disabled.</p>",
        "CreateEphemerisRequest$enabled": "<p>Set to <code>true</code> to enable the ephemeris after validation. Set to <code>false</code> to keep it disabled.</p>",
        "DescribeEphemerisResponse$enabled": "<p>Whether or not the ephemeris is enabled.</p>",
        "EphemerisItem$enabled": "<p>Whether or not the ephemeris is enabled.</p>",
        "GetMinuteUsageResponse$isReservedMinutesCustomer": "<p>Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.</p>",
        "SignatureMap$value": null,
        "UpdateEphemerisRequest$enabled": "<p>Enable or disable the ephemeris. Changing this value doesn't require re-validation.</p>",
        "UplinkEchoConfig$enabled": "<p>Whether or not an uplink <code>Config</code> is enabled.</p>"
      }
    },
    "BucketArn": {
      "base": null,
      "refs": {
        "S3RecordingConfig$bucketArn": "<p>ARN of the bucket to record to.</p>",
        "S3RecordingDetails$bucketArn": "<p>ARN of the bucket used.</p>"
      }
    },
    "CancelContactRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "CapabilityArn": {
      "base": null,
      "refs": {
        "CapabilityArnList$member": null,
        "ComponentStatusData$capabilityArn": "<p>Capability ARN of the component.</p>"
      }
    },
    "CapabilityArnList": {
      "base": null,
      "refs": {
        "DiscoveryData$capabilityArns": "<p>List of capabilities to associate with agent.</p>"
      }
    },
    "CapabilityHealth": {
      "base": null,
      "refs": {
        "EndpointDetails$healthStatus": "<p>A dataflow endpoint health status. This field is ignored when calling <code>CreateDataflowEndpointGroup</code>.</p>"
      }
    },
    "CapabilityHealthReason": {
      "base": null,
      "refs": {
        "CapabilityHealthReasonList$member": null
      }
    },
    "CapabilityHealthReasonList": {
      "base": null,
      "refs": {
        "EndpointDetails$healthReasons": "<p>Health reasons for a dataflow endpoint. This field is ignored when calling <code>CreateDataflowEndpointGroup</code>.</p>"
      }
    },
    "ComponentStatusData": {
      "base": "<p>Data on the status of agent components.</p>",
      "refs": {
        "ComponentStatusList$member": null
      }
    },
    "ComponentStatusList": {
      "base": null,
      "refs": {
        "UpdateAgentStatusRequest$componentStatuses": "<p>List of component statuses for agent.</p>"
      }
    },
    "ComponentTypeString": {
      "base": null,
      "refs": {
        "ComponentStatusData$componentType": "<p>The Component type.</p>",
        "ComponentVersion$componentType": "<p>Component type.</p>"
      }
    },
    "ComponentVersion": {
      "base": "<p>Version information for agent components.</p>",
      "refs": {
        "ComponentVersionList$member": null
      }
    },
    "ComponentVersionList": {
      "base": null,
      "refs": {
        "AgentDetails$componentVersions": "<p>List of versions being used by agent components.</p>"
      }
    },
    "ConfigArn": {
      "base": null,
      "refs": {
        "ConfigIdResponse$configArn": "<p>ARN of a <code>Config</code>.</p>",
        "ConfigListItem$configArn": "<p>ARN of a <code>Config</code>.</p>",
        "CreateMissionProfileRequest$trackingConfigArn": "<p>ARN of a tracking <code>Config</code>.</p>",
        "DataflowEdge$member": null,
        "GetConfigResponse$configArn": "<p>ARN of a <code>Config</code> </p>",
        "GetMissionProfileResponse$trackingConfigArn": "<p>ARN of a tracking <code>Config</code>.</p>",
        "UpdateMissionProfileRequest$trackingConfigArn": "<p>ARN of a tracking <code>Config</code>.</p>",
        "UplinkEchoConfig$antennaUplinkConfigArn": "<p>ARN of an uplink <code>Config</code>.</p>"
      }
    },
    "ConfigCapabilityType": {
      "base": null,
      "refs": {
        "ConfigIdResponse$configType": "<p>Type of a <code>Config</code>.</p>",
        "ConfigListItem$configType": "<p>Type of a <code>Config</code>.</p>",
        "DeleteConfigRequest$configType": "<p>Type of a <code>Config</code>.</p>",
        "Destination$configType": "<p>Type of a <code>Config</code>.</p>",
        "GetConfigRequest$configType": "<p>Type of a <code>Config</code>.</p>",
        "GetConfigResponse$configType": "<p>Type of a <code>Config</code>.</p>",
        "Source$configType": "<p>Type of a <code>Config</code>.</p>",
        "UpdateConfigRequest$configType": "<p>Type of a <code>Config</code>.</p>"
      }
    },
    "ConfigDetails": {
      "base": "<p>Details for certain <code>Config</code> object types in a contact.</p>",
      "refs": {
        "Destination$configDetails": "<p>Additional details for a <code>Config</code>, if type is dataflow endpoint or antenna demod decode.</p>",
        "Source$configDetails": "<p>Additional details for a <code>Config</code>, if type is <code>dataflow-endpoint</code> or <code>antenna-downlink-demod-decode</code> </p>"
      }
    },
    "ConfigIdResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ConfigList": {
      "base": null,
      "refs": {
        "ListConfigsResponse$configList": "<p>List of <code>Config</code> items.</p>"
      }
    },
    "ConfigListItem": {
      "base": "<p>An item in a list of <code>Config</code> objects.</p>",
      "refs": {
        "ConfigList$member": null
      }
    },
    "ConfigTypeData": {
      "base": "<p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>",
      "refs": {
        "CreateConfigRequest$configData": "<p>Parameters of a <code>Config</code>.</p>",
        "GetConfigResponse$configData": "<p>Data elements in a <code>Config</code>.</p>",
        "UpdateConfigRequest$configData": "<p>Parameters of a <code>Config</code>.</p>"
      }
    },
    "ConnectionDetails": {
      "base": "<p>Egress address of AgentEndpoint with an optional mtu.</p>",
      "refs": {
        "AwsGroundStationAgentEndpoint$egressAddress": "<p>The egress address of AgentEndpoint.</p>"
      }
    },
    "ContactData": {
      "base": "<p>Data describing a contact.</p>",
      "refs": {
        "ContactList$member": null
      }
    },
    "ContactIdResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ContactList": {
      "base": null,
      "refs": {
        "ListContactsResponse$contactList": "<p>List of contacts.</p>"
      }
    },
    "ContactStatus": {
      "base": null,
      "refs": {
        "ContactData$contactStatus": "<p>Status of a contact.</p>",
        "DescribeContactResponse$contactStatus": "<p>Status of a contact.</p>",
        "StatusList$member": null
      }
    },
    "CreateConfigRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "CreateDataflowEndpointGroupRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "CreateEphemerisRequest": {
      "base": null,
      "refs": {}
    },
    "CreateMissionProfileRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "Criticality": {
      "base": null,
      "refs": {
        "TrackingConfig$autotrack": "<p>Current setting for autotrack.</p>"
      }
    },
    "CustomerEphemerisPriority": {
      "base": null,
      "refs": {
        "CreateEphemerisRequest$priority": "<p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p> <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>"
      }
    },
    "DataflowDetail": {
      "base": "<p>Information about a dataflow edge used in a contact.</p>",
      "refs": {
        "DataflowList$member": null
      }
    },
    "DataflowEdge": {
      "base": null,
      "refs": {
        "DataflowEdgeList$member": null
      }
    },
    "DataflowEdgeList": {
      "base": null,
      "refs": {
        "CreateMissionProfileRequest$dataflowEdges": "<p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>",
        "GetMissionProfileResponse$dataflowEdges": "<p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>",
        "UpdateMissionProfileRequest$dataflowEdges": "<p>A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.</p>"
      }
    },
    "DataflowEndpoint": {
      "base": "<p>Information about a dataflow endpoint.</p>",
      "refs": {
        "EndpointDetails$endpoint": "<p>A dataflow endpoint.</p>"
      }
    },
    "DataflowEndpointConfig": {
      "base": "<p>Information about the dataflow endpoint <code>Config</code>.</p>",
      "refs": {
        "ConfigTypeData$dataflowEndpointConfig": "<p>Information about the dataflow endpoint <code>Config</code>.</p>"
      }
    },
    "DataflowEndpointGroupArn": {
      "base": null,
      "refs": {
        "DataflowEndpointListItem$dataflowEndpointGroupArn": "<p>ARN of a dataflow endpoint group.</p>",
        "GetDataflowEndpointGroupResponse$dataflowEndpointGroupArn": "<p>ARN of a dataflow endpoint group.</p>"
      }
    },
    "DataflowEndpointGroupDurationInSeconds": {
      "base": null,
      "refs": {
        "CreateDataflowEndpointGroupRequest$contactPrePassDurationSeconds": "<p>Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code> state.</p>",
        "CreateDataflowEndpointGroupRequest$contactPostPassDurationSeconds": "<p>Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code> state.</p>",
        "GetDataflowEndpointGroupResponse$contactPrePassDurationSeconds": "<p>Amount of time, in seconds, before a contact starts that the Ground Station Dataflow Endpoint Group will be in a <code>PREPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>PREPASS</code> state.</p>",
        "GetDataflowEndpointGroupResponse$contactPostPassDurationSeconds": "<p>Amount of time, in seconds, after a contact ends that the Ground Station Dataflow Endpoint Group will be in a <code>POSTPASS</code> state. A Ground Station Dataflow Endpoint Group State Change event will be emitted when the Dataflow Endpoint Group enters and exits the <code>POSTPASS</code> state.</p>"
      }
    },
    "DataflowEndpointGroupIdResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "DataflowEndpointGroupList": {
      "base": null,
      "refs": {
        "ListDataflowEndpointGroupsResponse$dataflowEndpointGroupList": "<p>A list of dataflow endpoint groups.</p>"
      }
    },
    "DataflowEndpointListItem": {
      "base": "<p>Item in a list of <code>DataflowEndpoint</code> groups.</p>",
      "refs": {
        "DataflowEndpointGroupList$member": null
      }
    },
    "DataflowEndpointMtuInteger": {
      "base": null,
      "refs": {
        "DataflowEndpoint$mtu": "<p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>"
      }
    },
    "DataflowList": {
      "base": null,
      "refs": {
        "DescribeContactResponse$dataflowList": "<p>List describing source and destination details for each dataflow edge.</p>"
      }
    },
    "DecodeConfig": {
      "base": "<p>Information about the decode <code>Config</code>.</p>",
      "refs": {
        "AntennaDownlinkDemodDecodeConfig$decodeConfig": "<p>Information about the decode <code>Config</code>.</p>"
      }
    },
    "DeleteConfigRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "DeleteDataflowEndpointGroupRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "DeleteEphemerisRequest": {
      "base": null,
      "refs": {}
    },
    "DeleteMissionProfileRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "DemodulationConfig": {
      "base": "<p>Information about the demodulation <code>Config</code>.</p>",
      "refs": {
        "AntennaDownlinkDemodDecodeConfig$demodulationConfig": "<p>Information about the demodulation <code>Config</code>.</p>"
      }
    },
    "DependencyException": {
      "base": "<p>Dependency encountered an error.</p>",
      "refs": {}
    },
    "DescribeContactRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "DescribeContactResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "DescribeEphemerisRequest": {
      "base": null,
      "refs": {}
    },
    "DescribeEphemerisResponse": {
      "base": null,
      "refs": {}
    },
    "Destination": {
      "base": "<p>Dataflow details for the destination side.</p>",
      "refs": {
        "DataflowDetail$destination": null
      }
    },
    "DiscoveryData": {
      "base": "<p>Data for agent discovery.</p>",
      "refs": {
        "RegisterAgentRequest$discoveryData": "<p>Data for associating an agent with the capabilities it is managing.</p>"
      }
    },
    "Double": {
      "base": null,
      "refs": {
        "Eirp$value": "<p>Value of an EIRP. Valid values are between 20.0 to 50.0 dBW.</p>",
        "Elevation$value": "<p>Elevation angle value.</p>",
        "Frequency$value": "<p>Frequency value. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.</p>",
        "FrequencyBandwidth$value": "<p>Frequency bandwidth value. AWS Ground Station currently has the following bandwidth limitations:</p> <ul> <li> <p>For <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between 125 kHz to 650 MHz.</p> </li> <li> <p>For <code>AntennaDownlinkconfig</code>, valid values are between 10 kHz to 54 MHz.</p> </li> <li> <p>For <code>AntennaUplinkConfig</code>, valid values are between 10 kHz to 54 MHz.</p> </li> </ul>",
        "TimeAzEl$dt": "<p>Time offset in atomic seconds from the segment's reference epoch.</p> <p>All <code>dt</code> values within a segment must be in ascending order with no duplicates.</p> <p> <code>dt</code> values may be:</p> <ul> <li> <p>negative</p> </li> <li> <p>expressed as fractions of a second</p> </li> <li> <p>expressed in scientific notation</p> </li> </ul>",
        "TimeAzEl$az": "<p>Azimuth angle at the specified time.</p> <p>Valid ranges by unit:</p> <ul> <li> <p> <code>DEGREE_ANGLE</code>: -180 to 360 degrees, measured clockwise from true north</p> </li> <li> <p> <code>RADIAN</code>: -π to 2π radians, measured clockwise from true north</p> </li> </ul>",
        "TimeAzEl$el": "<p>Elevation angle at the specified time.</p> <p>Valid ranges by unit:</p> <ul> <li> <p> <code>DEGREE_ANGLE</code>: -90 to 90 degrees, where 0 is the horizon, 90 is zenith, and negative values are below the horizon </p> </li> <li> <p> <code>RADIAN</code>: -π/2 to π/2 radians, where 0 is the horizon, π/2 is zenith, and negative values are below the horizon </p> </li> </ul>"
      }
    },
    "DurationInSeconds": {
      "base": null,
      "refs": {
        "CreateMissionProfileRequest$contactPrePassDurationSeconds": "<p>Amount of time prior to contact start you’d like to receive a Ground Station Contact State Change event indicating an upcoming pass.</p>",
        "CreateMissionProfileRequest$contactPostPassDurationSeconds": "<p>Amount of time after a contact ends that you’d like to receive a Ground Station Contact State Change event indicating the pass has finished.</p>",
        "GetMissionProfileResponse$contactPrePassDurationSeconds": "<p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>",
        "GetMissionProfileResponse$contactPostPassDurationSeconds": "<p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>",
        "UpdateMissionProfileRequest$contactPrePassDurationSeconds": "<p>Amount of time after a contact ends that you’d like to receive a Ground Station Contact State Change event indicating the pass has finished.</p>",
        "UpdateMissionProfileRequest$contactPostPassDurationSeconds": "<p>Amount of time after a contact ends that you’d like to receive a Ground Station Contact State Change event indicating the pass has finished.</p>"
      }
    },
    "Eirp": {
      "base": "<p>Object that represents EIRP.</p>",
      "refs": {
        "AntennaUplinkConfig$targetEirp": "<p>EIRP of the target.</p>"
      }
    },
    "EirpUnits": {
      "base": null,
      "refs": {
        "Eirp$units": "<p>Units of an EIRP.</p>"
      }
    },
    "Elevation": {
      "base": "<p>Elevation angle of the satellite in the sky during a contact.</p>",
      "refs": {
        "ContactData$maximumElevation": "<p>Maximum elevation angle of a contact.</p>",
        "DescribeContactResponse$maximumElevation": "<p>Maximum elevation angle of a contact.</p>"
      }
    },
    "EndpointDetails": {
      "base": "<p>Information about the endpoint details.</p>",
      "refs": {
        "ConfigDetails$endpointDetails": null,
        "EndpointDetailsList$member": null
      }
    },
    "EndpointDetailsList": {
      "base": null,
      "refs": {
        "CreateDataflowEndpointGroupRequest$endpointDetails": "<p>Endpoint details of each endpoint in the dataflow endpoint group. All dataflow endpoints within a single dataflow endpoint group must be of the same type. You cannot mix <a href=\"https://docs.aws.amazon.com/ground-station/latest/APIReference/API_AwsGroundStationAgentEndpoint.html\"> AWS Ground Station Agent endpoints</a> with <a href=\"https://docs.aws.amazon.com/ground-station/latest/APIReference/API_DataflowEndpoint.html\">Dataflow endpoints</a> in the same group. If your use case requires both types of endpoints, you must create separate dataflow endpoint groups for each type. </p>",
        "GetDataflowEndpointGroupResponse$endpointsDetails": "<p>Details of a dataflow endpoint.</p>"
      }
    },
    "EndpointStatus": {
      "base": null,
      "refs": {
        "DataflowEndpoint$status": "<p>Status of a dataflow endpoint.</p>"
      }
    },
    "EphemeridesList": {
      "base": null,
      "refs": {
        "ListEphemeridesResponse$ephemerides": "<p>List of ephemerides.</p>"
      }
    },
    "EphemerisData": {
      "base": "<p>Ephemeris data.</p>",
      "refs": {
        "CreateEphemerisRequest$ephemeris": "<p>Ephemeris data.</p>"
      }
    },
    "EphemerisDescription": {
      "base": "<p>Description of ephemeris.</p>",
      "refs": {
        "EphemerisTypeDescription$tle": null,
        "EphemerisTypeDescription$oem": null,
        "EphemerisTypeDescription$azEl": null
      }
    },
    "EphemerisErrorCode": {
      "base": null,
      "refs": {
        "EphemerisErrorReason$errorCode": "<p>The error code identifying the type of validation failure.</p> <p>See the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/troubleshooting-invalid-ephemerides.html\">Troubleshooting Invalid Ephemerides guide</a> for error code details.</p>"
      }
    },
    "EphemerisErrorReason": {
      "base": "<p>Detailed error information for ephemeris validation failures.</p> <p>Provides an error code and descriptive message to help diagnose and resolve validation issues.</p>",
      "refs": {
        "EphemerisErrorReasonList$member": null
      }
    },
    "EphemerisErrorReasonList": {
      "base": null,
      "refs": {
        "DescribeEphemerisResponse$errorReasons": "<p>Detailed error information for ephemerides with <code>INVALID</code> status.</p> <p>Provides specific error codes and messages to help diagnose validation failures.</p>"
      }
    },
    "EphemerisFilter": {
      "base": "<p>Filter for selecting contacts that use a specific ephemeris\".</p>",
      "refs": {
        "ListContactsRequest$ephemeris": "<p>Filter for selecting contacts that use a specific ephemeris\".</p>"
      }
    },
    "EphemerisIdResponse": {
      "base": null,
      "refs": {}
    },
    "EphemerisInvalidReason": {
      "base": null,
      "refs": {
        "DescribeEphemerisResponse$invalidReason": "<p>Reason that an ephemeris failed validation. Appears only when the status is <code>INVALID</code>.</p>"
      }
    },
    "EphemerisItem": {
      "base": "<p>Ephemeris item.</p>",
      "refs": {
        "EphemeridesList$member": null
      }
    },
    "EphemerisMetaData": {
      "base": "<p>Metadata describing a particular ephemeris.</p>",
      "refs": {
        "GetSatelliteResponse$currentEphemeris": "<p>The current ephemeris being used to compute the trajectory of the satellite.</p>",
        "SatelliteListItem$currentEphemeris": "<p>The current ephemeris being used to compute the trajectory of the satellite.</p>"
      }
    },
    "EphemerisPriority": {
      "base": null,
      "refs": {
        "DescribeEphemerisResponse$priority": "<p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p> <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>",
        "EphemerisItem$priority": "<p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p> <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>",
        "UpdateEphemerisRequest$priority": "<p>A priority score that determines which ephemeris to use when multiple ephemerides overlap.</p> <p>Higher numbers take precedence. The default is 1. Must be 1 or greater.</p>"
      }
    },
    "EphemerisResponseData": {
      "base": "<p>Ephemeris data for a contact.</p>",
      "refs": {
        "ContactData$ephemeris": "<p>The ephemeris that determines antenna pointing for the contact.</p>",
        "DescribeContactResponse$ephemeris": "<p>The ephemeris that determines antenna pointing directions for the contact.</p>"
      }
    },
    "EphemerisSource": {
      "base": null,
      "refs": {
        "EphemerisMetaData$source": "<p>The <code>EphemerisSource</code> that generated a given ephemeris.</p>"
      }
    },
    "EphemerisStatus": {
      "base": null,
      "refs": {
        "DescribeEphemerisResponse$status": "<p>The status of the ephemeris.</p>",
        "EphemerisItem$status": "<p>The status of the ephemeris.</p>",
        "EphemerisStatusList$member": null
      }
    },
    "EphemerisStatusList": {
      "base": null,
      "refs": {
        "ListEphemeridesRequest$statusList": "<p>The list of ephemeris status to return.</p>"
      }
    },
    "EphemerisType": {
      "base": null,
      "refs": {
        "EphemerisItem$ephemerisType": "<p>The type of ephemeris.</p>",
        "EphemerisResponseData$ephemerisType": "<p>Type of ephemeris.</p>",
        "ListEphemeridesRequest$ephemerisType": "<p>Filter ephemerides by type. If not specified, all ephemeris types will be returned.</p>"
      }
    },
    "EphemerisTypeDescription": {
      "base": "<p/>",
      "refs": {
        "DescribeEphemerisResponse$suppliedData": "<p>Supplied ephemeris data.</p>"
      }
    },
    "ErrorString": {
      "base": null,
      "refs": {
        "EphemerisErrorReason$errorMessage": "<p>A human-readable message describing the validation failure.</p> <p>Provides specific details about what failed and may include suggestions for remediation.</p>"
      }
    },
    "Frequency": {
      "base": "<p>Object that describes the frequency.</p>",
      "refs": {
        "SpectrumConfig$centerFrequency": "<p>Center frequency of a spectral <code>Config</code>. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.</p>",
        "UplinkSpectrumConfig$centerFrequency": "<p>Center frequency of an uplink spectral <code>Config</code>. Valid values are between 2025 to 2120 MHz.</p>"
      }
    },
    "FrequencyBandwidth": {
      "base": "<p>Object that describes the frequency bandwidth. </p>",
      "refs": {
        "SpectrumConfig$bandwidth": "<p>Bandwidth of a spectral <code>Config</code>. AWS Ground Station currently has the following bandwidth limitations:</p> <ul> <li> <p>For <code>AntennaDownlinkDemodDecodeconfig</code>, valid values are between 125 kHz to 650 MHz.</p> </li> <li> <p>For <code>AntennaDownlinkconfig</code> valid values are between 10 kHz to 54 MHz.</p> </li> <li> <p>For <code>AntennaUplinkConfig</code>, valid values are between 10 kHz to 54 MHz.</p> </li> </ul>"
      }
    },
    "FrequencyUnits": {
      "base": null,
      "refs": {
        "Frequency$units": "<p>Frequency units.</p>"
      }
    },
    "GetAgentConfigurationRequest": {
      "base": null,
      "refs": {}
    },
    "GetAgentConfigurationResponse": {
      "base": null,
      "refs": {}
    },
    "GetConfigRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "GetConfigResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "GetDataflowEndpointGroupRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "GetDataflowEndpointGroupResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "GetMinuteUsageRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "GetMinuteUsageResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "GetMissionProfileRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "GetMissionProfileResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "GetSatelliteRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "GetSatelliteResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "GroundStationData": {
      "base": "<p>Information about the ground station data.</p>",
      "refs": {
        "GroundStationList$member": null
      }
    },
    "GroundStationIdList": {
      "base": null,
      "refs": {
        "GetSatelliteResponse$groundStations": "<p>A list of ground stations to which the satellite is on-boarded.</p>",
        "SatelliteListItem$groundStations": "<p>A list of ground stations to which the satellite is on-boarded.</p>"
      }
    },
    "GroundStationList": {
      "base": null,
      "refs": {
        "ListGroundStationsResponse$groundStationList": "<p>List of ground stations.</p>"
      }
    },
    "GroundStationName": {
      "base": null,
      "refs": {
        "AzElEphemeris$groundStation": "<p>The ground station name for which you're providing azimuth elevation data.</p> <p>This ephemeris is specific to this ground station and can't be used at other locations.</p>",
        "GroundStationData$groundStationId": "<p>UUID of a ground station.</p>",
        "GroundStationData$groundStationName": "<p>Name of a ground station.</p>",
        "GroundStationIdList$member": null,
        "ListContactsRequest$groundStation": "<p>Name of a ground station.</p>",
        "ReserveContactRequest$groundStation": "<p>Name of a ground station.</p>"
      }
    },
    "ISO8601TimeRange": {
      "base": "<p>Time range specified using ISO 8601 format timestamps.</p>",
      "refs": {
        "AzElSegment$validTimeRange": "<p>The valid time range for this segment.</p> <p> Specifies the start and end timestamps in ISO 8601 format in Coordinated Universal Time (UTC). The segment's pointing data must cover this entire time range. </p>"
      }
    },
    "InstanceId": {
      "base": null,
      "refs": {
        "AgentDetails$instanceId": "<p>ID of EC2 instance agent is running on.</p>"
      }
    },
    "InstanceType": {
      "base": null,
      "refs": {
        "AgentDetails$instanceType": "<p>Type of EC2 instance agent is running on.</p>"
      }
    },
    "Integer": {
      "base": null,
      "refs": {
        "AgentCpuCoresList$member": null,
        "ConnectionDetails$mtu": "<p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>",
        "GetMinuteUsageResponse$totalReservedMinuteAllocation": "<p>Total number of reserved minutes allocated, specific to the month being requested.</p>",
        "GetMinuteUsageResponse$upcomingMinutesScheduled": "<p>Upcoming minutes scheduled for an account, specific to the month being requested.</p>",
        "GetMinuteUsageResponse$totalScheduledMinutes": "<p>Total scheduled minutes for an account, specific to the month being requested.</p>",
        "GetMinuteUsageResponse$estimatedMinutesRemaining": "<p>Estimated number of minutes remaining for an account, specific to the month being requested.</p>",
        "IntegerRange$minimum": "<p>A minimum value.</p>",
        "IntegerRange$maximum": "<p>A maximum value.</p>",
        "SocketAddress$port": "<p>Port of a socket address.</p>"
      }
    },
    "IntegerRange": {
      "base": "<p>An integer range that has a minimum and maximum value.</p>",
      "refs": {
        "RangedSocketAddress$portRange": "<p>Port range of a socket address.</p>"
      }
    },
    "InvalidParameterException": {
      "base": "<p>One or more parameters are not valid.</p>",
      "refs": {}
    },
    "IpAddressList": {
      "base": null,
      "refs": {
        "DiscoveryData$publicIpAddresses": "<p>List of public IP addresses to associate with agent.</p>",
        "DiscoveryData$privateIpAddresses": "<p>List of private IP addresses to associate with agent.</p>"
      }
    },
    "IpV4Address": {
      "base": null,
      "refs": {
        "IpAddressList$member": null,
        "RangedSocketAddress$name": "<p>IPv4 socket address.</p>"
      }
    },
    "JsonString": {
      "base": null,
      "refs": {
        "DecodeConfig$unvalidatedJSON": "<p>Unvalidated JSON of a decode <code>Config</code>.</p>",
        "DemodulationConfig$unvalidatedJSON": "<p>Unvalidated JSON of a demodulation <code>Config</code>.</p>"
      }
    },
    "KeyAliasArn": {
      "base": null,
      "refs": {
        "KmsKey$kmsAliasArn": "<p>KMS Alias Arn.</p>"
      }
    },
    "KeyAliasName": {
      "base": null,
      "refs": {
        "KmsKey$kmsAliasName": "<p>KMS Alias Name.</p>"
      }
    },
    "KeyArn": {
      "base": null,
      "refs": {
        "CreateEphemerisRequest$kmsKeyArn": "<p>The ARN of the KMS key to use for encrypting the ephemeris.</p>",
        "KmsKey$kmsKeyArn": "<p>KMS Key Arn.</p>"
      }
    },
    "KmsKey": {
      "base": "<p>KMS key info.</p>",
      "refs": {
        "CreateMissionProfileRequest$streamsKmsKey": "<p>KMS key to use for encrypting streams.</p>",
        "GetMissionProfileResponse$streamsKmsKey": "<p>KMS key to use for encrypting streams.</p>",
        "UpdateMissionProfileRequest$streamsKmsKey": "<p>KMS key to use for encrypting streams.</p>"
      }
    },
    "ListConfigsRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListConfigsResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ListContactsRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListContactsResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ListDataflowEndpointGroupsRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListDataflowEndpointGroupsResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ListEphemeridesRequest": {
      "base": null,
      "refs": {}
    },
    "ListEphemeridesResponse": {
      "base": null,
      "refs": {}
    },
    "ListGroundStationsRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListGroundStationsResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ListMissionProfilesRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListMissionProfilesResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ListSatellitesRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListSatellitesResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "ListTagsForResourceRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ListTagsForResourceResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "Long": {
      "base": null,
      "refs": {
        "ComponentStatusData$bytesSent": "<p>Bytes sent by the component.</p>",
        "ComponentStatusData$bytesReceived": "<p>Bytes received by the component.</p>",
        "ComponentStatusData$packetsDropped": "<p>Packets dropped by component.</p>"
      }
    },
    "MissionProfileArn": {
      "base": null,
      "refs": {
        "ContactData$missionProfileArn": "<p>ARN of a mission profile.</p>",
        "DescribeContactResponse$missionProfileArn": "<p>ARN of a mission profile.</p>",
        "GetMissionProfileResponse$missionProfileArn": "<p>ARN of a mission profile.</p>",
        "ListContactsRequest$missionProfileArn": "<p>ARN of a mission profile.</p>",
        "MissionProfileListItem$missionProfileArn": "<p>ARN of a mission profile.</p>",
        "ReserveContactRequest$missionProfileArn": "<p>ARN of a mission profile.</p>"
      }
    },
    "MissionProfileIdResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "MissionProfileList": {
      "base": null,
      "refs": {
        "ListMissionProfilesResponse$missionProfileList": "<p>List of mission profiles.</p>"
      }
    },
    "MissionProfileListItem": {
      "base": "<p>Item in a list of mission profiles.</p>",
      "refs": {
        "MissionProfileList$member": null
      }
    },
    "Month": {
      "base": null,
      "refs": {
        "GetMinuteUsageRequest$month": "<p>The month being requested, with a value of 1-12.</p>"
      }
    },
    "OEMEphemeris": {
      "base": "<p>Ephemeris data in Orbit Ephemeris Message (OEM) format.</p> <p> AWS Ground Station processes OEM ephemerides according to the <a href=\"https://ccsds.org/wp-content/uploads/gravity_forms/5-448e85c647331d9cbaf66c096458bdd5/2025/01//502x0b3e1.pdf\">CCSDS standard</a> with some extra restrictions. OEM files should be in KVN format. For more detail about the OEM format that AWS Ground Station supports, see <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/providing-oem-ephemeris-data.html#oem-ephemeris-format\">OEM ephemeris format</a> in the AWS Ground Station user guide. </p>",
      "refs": {
        "EphemerisData$oem": null
      }
    },
    "PaginationMaxResults": {
      "base": null,
      "refs": {
        "ListConfigsRequest$maxResults": "<p>Maximum number of <code>Configs</code> returned.</p>",
        "ListContactsRequest$maxResults": "<p>Maximum number of contacts returned.</p>",
        "ListDataflowEndpointGroupsRequest$maxResults": "<p>Maximum number of dataflow endpoint groups returned.</p>",
        "ListEphemeridesRequest$maxResults": "<p>Maximum number of ephemerides to return.</p>",
        "ListGroundStationsRequest$maxResults": "<p>Maximum number of ground stations returned.</p>",
        "ListMissionProfilesRequest$maxResults": "<p>Maximum number of mission profiles returned.</p>",
        "ListSatellitesRequest$maxResults": "<p>Maximum number of satellites returned.</p>"
      }
    },
    "PaginationToken": {
      "base": null,
      "refs": {
        "ListConfigsRequest$nextToken": "<p>Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.</p>",
        "ListConfigsResponse$nextToken": "<p>Next token returned in the response of a previous <code>ListConfigs</code> call. Used to get the next page of results.</p>",
        "ListContactsRequest$nextToken": "<p>Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.</p>",
        "ListContactsResponse$nextToken": "<p>Next token returned in the response of a previous <code>ListContacts</code> call. Used to get the next page of results.</p>",
        "ListDataflowEndpointGroupsRequest$nextToken": "<p>Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</p>",
        "ListDataflowEndpointGroupsResponse$nextToken": "<p>Next token returned in the response of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</p>",
        "ListEphemeridesRequest$nextToken": "<p>Pagination token.</p>",
        "ListEphemeridesResponse$nextToken": "<p>Pagination token.</p>",
        "ListGroundStationsRequest$nextToken": "<p>Next token that can be supplied in the next call to get the next page of ground stations.</p>",
        "ListGroundStationsResponse$nextToken": "<p>Next token that can be supplied in the next call to get the next page of ground stations.</p>",
        "ListMissionProfilesRequest$nextToken": "<p>Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</p>",
        "ListMissionProfilesResponse$nextToken": "<p>Next token returned in the response of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</p>",
        "ListSatellitesRequest$nextToken": "<p>Next token that can be supplied in the next call to get the next page of satellites.</p>",
        "ListSatellitesResponse$nextToken": "<p>Next token that can be supplied in the next call to get the next page of satellites.</p>"
      }
    },
    "Polarization": {
      "base": null,
      "refs": {
        "SpectrumConfig$polarization": "<p>Polarization of a spectral <code>Config</code>. Capturing both <code>\"RIGHT_HAND\"</code> and <code>\"LEFT_HAND\"</code> polarization requires two separate configs.</p>",
        "UplinkSpectrumConfig$polarization": "<p>Polarization of an uplink spectral <code>Config</code>. Capturing both <code>\"RIGHT_HAND\"</code> and <code>\"LEFT_HAND\"</code> polarization requires two separate configs.</p>"
      }
    },
    "PositiveDurationInSeconds": {
      "base": null,
      "refs": {
        "CreateMissionProfileRequest$minimumViableContactDurationSeconds": "<p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>",
        "GetMissionProfileResponse$minimumViableContactDurationSeconds": "<p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>",
        "UpdateMissionProfileRequest$minimumViableContactDurationSeconds": "<p>Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.</p>"
      }
    },
    "ProgramTrackSettings": {
      "base": "<p>Program track settings for an antenna during a contact.</p>",
      "refs": {
        "TrackingOverrides$programTrackSettings": "<p>Program track settings to override for antenna tracking during the contact.</p>"
      }
    },
    "RangedConnectionDetails": {
      "base": "<p>Ingress address of AgentEndpoint with a port range and an optional mtu.</p>",
      "refs": {
        "AwsGroundStationAgentEndpoint$ingressAddress": "<p>The ingress address of AgentEndpoint.</p>"
      }
    },
    "RangedConnectionDetailsMtuInteger": {
      "base": null,
      "refs": {
        "RangedConnectionDetails$mtu": "<p>Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.</p>"
      }
    },
    "RangedSocketAddress": {
      "base": "<p>A socket address with a port range.</p>",
      "refs": {
        "RangedConnectionDetails$socketAddress": "<p>A ranged socket address.</p>"
      }
    },
    "RegisterAgentRequest": {
      "base": null,
      "refs": {}
    },
    "RegisterAgentResponse": {
      "base": null,
      "refs": {}
    },
    "ReserveContactRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "ResourceInUseException": {
      "base": "<p>The specified resource is in use by non-terminal state contacts and cannot be modified or deleted.</p>",
      "refs": {}
    },
    "ResourceLimitExceededException": {
      "base": "<p>Account limits for this resource have been exceeded.</p>",
      "refs": {}
    },
    "ResourceNotFoundException": {
      "base": "<p>Resource was not found.</p>",
      "refs": {}
    },
    "RoleArn": {
      "base": null,
      "refs": {
        "CreateMissionProfileRequest$streamsKmsRole": "<p>Role to use for encrypting streams with KMS key.</p>",
        "GetMissionProfileResponse$streamsKmsRole": "<p>Role to use for encrypting streams with KMS key.</p>",
        "S3RecordingConfig$roleArn": "<p>ARN of the role Ground Station assumes to write data to the bucket.</p>",
        "SecurityDetails$roleArn": "<p>ARN to a role needed for connecting streams to your instances. </p>",
        "UpdateMissionProfileRequest$streamsKmsRole": "<p>Role to use for encrypting streams with KMS key.</p>"
      }
    },
    "S3BucketName": {
      "base": null,
      "refs": {
        "S3Object$bucket": "<p>An Amazon S3 Bucket name.</p>"
      }
    },
    "S3KeyPrefix": {
      "base": null,
      "refs": {
        "S3RecordingConfig$prefix": "<p>S3 Key prefix to prefice data files.</p>"
      }
    },
    "S3Object": {
      "base": "<p>Object stored in Amazon S3 containing ephemeris data.</p>",
      "refs": {
        "AzElSegmentsData$s3Object": "<p>The Amazon S3 object containing azimuth elevation segment data.</p> <p>The Amazon S3 object must contain JSON-formatted azimuth elevation data matching the <a>AzElSegments</a> structure.</p>",
        "EphemerisDescription$sourceS3Object": "<p>Source Amazon S3 object used for the ephemeris.</p>",
        "EphemerisItem$sourceS3Object": "<p>Source Amazon S3 object used for the ephemeris.</p>",
        "OEMEphemeris$s3Object": "<p>The Amazon S3 object that contains the ephemeris data.</p>",
        "TLEEphemeris$s3Object": "<p>The Amazon S3 object that contains the ephemeris data.</p>"
      }
    },
    "S3ObjectKey": {
      "base": null,
      "refs": {
        "S3Object$key": "<p>An Amazon S3 key for the ephemeris.</p>"
      }
    },
    "S3RecordingConfig": {
      "base": "<p>Information about an S3 recording <code>Config</code>.</p>",
      "refs": {
        "ConfigTypeData$s3RecordingConfig": "<p>Information about an S3 recording <code>Config</code>.</p>"
      }
    },
    "S3RecordingDetails": {
      "base": "<p>Details about an S3 recording <code>Config</code> used in a contact.</p>",
      "refs": {
        "ConfigDetails$s3RecordingDetails": "<p>Details for an S3 recording <code>Config</code> in a contact.</p>"
      }
    },
    "S3VersionId": {
      "base": null,
      "refs": {
        "S3Object$version": "<p>For versioned Amazon S3 objects, the version to use for the ephemeris.</p>"
      }
    },
    "SafeName": {
      "base": null,
      "refs": {
        "AwsGroundStationAgentEndpoint$name": "<p>Name string associated with AgentEndpoint. Used as a human-readable identifier for AgentEndpoint.</p>",
        "CreateConfigRequest$name": "<p>Name of a <code>Config</code>.</p>",
        "CreateEphemerisRequest$name": "<p>A name that you can use to identify the ephemeris.</p>",
        "CreateMissionProfileRequest$name": "<p>Name of a mission profile.</p>",
        "DataflowEndpoint$name": "<p>Name of a dataflow endpoint.</p>",
        "DescribeEphemerisResponse$name": "<p>A name that you can use to identify the ephemeris.</p>",
        "EphemerisItem$name": "<p>A name that you can use to identify the ephemeris.</p>",
        "EphemerisMetaData$name": "<p>A name string associated with the ephemeris. Used as a human-readable identifier for the ephemeris.</p> <p>A name is only returned for customer-provider ephemerides that have a name associated.</p>",
        "GetMissionProfileResponse$name": "<p>Name of a mission profile.</p>",
        "MissionProfileListItem$name": "<p>Name of a mission profile.</p>",
        "UpdateConfigRequest$name": "<p>Name of a <code>Config</code>.</p>",
        "UpdateEphemerisRequest$name": "<p>A name that you can use to identify the ephemeris.</p>",
        "UpdateMissionProfileRequest$name": "<p>Name of a mission profile.</p>"
      }
    },
    "SatelliteList": {
      "base": null,
      "refs": {
        "ListSatellitesResponse$satellites": "<p>List of satellites.</p>"
      }
    },
    "SatelliteListItem": {
      "base": "<p>Item in a list of satellites.</p>",
      "refs": {
        "SatelliteList$member": null
      }
    },
    "SecurityDetails": {
      "base": "<p>Information about endpoints.</p>",
      "refs": {
        "EndpointDetails$securityDetails": "<p>Endpoint security details including a list of subnets, a list of security groups and a role to connect streams to instances.</p>"
      }
    },
    "SecurityGroupIdList": {
      "base": null,
      "refs": {
        "SecurityDetails$securityGroupIds": "<p>The security groups to attach to the elastic network interfaces.</p>"
      }
    },
    "SignatureMap": {
      "base": null,
      "refs": {
        "AggregateStatus$signatureMap": "<p>Sparse map of failure signatures.</p>"
      }
    },
    "SocketAddress": {
      "base": "<p>Information about the socket address.</p>",
      "refs": {
        "ConnectionDetails$socketAddress": "<p>A socket address.</p>",
        "DataflowEndpoint$address": "<p>Socket address of a dataflow endpoint.</p>"
      }
    },
    "Source": {
      "base": "<p>Dataflow details for the source side.</p>",
      "refs": {
        "DataflowDetail$source": null
      }
    },
    "SpectrumConfig": {
      "base": "<p>Object that describes a spectral <code>Config</code>.</p>",
      "refs": {
        "AntennaDownlinkConfig$spectrumConfig": "<p>Object that describes a spectral <code>Config</code>.</p>",
        "AntennaDownlinkDemodDecodeConfig$spectrumConfig": "<p>Information about the spectral <code>Config</code>.</p>"
      }
    },
    "StatusList": {
      "base": null,
      "refs": {
        "ListContactsRequest$statusList": "<p>Status of a contact reservation.</p>"
      }
    },
    "String": {
      "base": null,
      "refs": {
        "AntennaDemodDecodeDetails$outputNode": "<p>Name of an antenna demod decode output node used in a contact.</p>",
        "ConfigIdResponse$configId": "<p>UUID of a <code>Config</code>.</p>",
        "ConfigListItem$configId": "<p>UUID of a <code>Config</code>.</p>",
        "ConfigListItem$name": "<p>Name of a <code>Config</code>.</p>",
        "ContactData$groundStation": "<p>Name of a ground station.</p>",
        "ContactData$errorMessage": "<p>Error message of a contact.</p>",
        "ContactData$region": "<p>Region of a contact.</p>",
        "DataflowDetail$errorMessage": "<p>Error message for a dataflow.</p>",
        "DataflowEndpointConfig$dataflowEndpointName": "<p>Name of a dataflow endpoint.</p>",
        "DataflowEndpointConfig$dataflowEndpointRegion": "<p>Region of a dataflow endpoint.</p>",
        "DependencyException$message": null,
        "DependencyException$parameterName": "<p/>",
        "DescribeContactResponse$groundStation": "<p>Ground station for a contact.</p>",
        "DescribeContactResponse$errorMessage": "<p>Error message for a contact.</p>",
        "DescribeContactResponse$region": "<p>Region of a contact.</p>",
        "Destination$dataflowDestinationRegion": "<p>Region of a dataflow destination.</p>",
        "GetAgentConfigurationResponse$taskingDocument": "<p>Tasking document for agent.</p>",
        "GetConfigResponse$configId": "<p>UUID of a <code>Config</code>.</p>",
        "GetConfigResponse$name": "<p>Name of a <code>Config</code>.</p>",
        "InvalidParameterException$message": null,
        "InvalidParameterException$parameterName": "<p/>",
        "ResourceInUseException$message": null,
        "ResourceLimitExceededException$message": null,
        "ResourceLimitExceededException$parameterName": "<p/>",
        "ResourceNotFoundException$message": null,
        "S3RecordingDetails$keyTemplate": "<p>Key template used for the S3 Recording Configuration</p>",
        "SecurityGroupIdList$member": null,
        "SignatureMap$key": null,
        "SocketAddress$name": "<p>Name of a socket address.</p>",
        "Source$configId": "<p>UUID of a <code>Config</code>.</p>",
        "Source$dataflowSourceRegion": "<p>Region of a dataflow source.</p>",
        "SubnetList$member": null,
        "TagsMap$key": null,
        "TagsMap$value": null
      }
    },
    "SubnetList": {
      "base": null,
      "refs": {
        "SecurityDetails$subnetIds": "<p>A list of subnets where AWS Ground Station places elastic network interfaces to send streams to your instances.</p>"
      }
    },
    "SyntheticTimestamp_date_time": {
      "base": null,
      "refs": {
        "AzElSegment$referenceEpoch": "<p>The reference time for this segment in ISO 8601 format in Coordinated Universal Time (UTC).</p> <p>All time values within the segment's <a>AzElSegment$azElList</a> are specified as offsets in atomic seconds from this reference epoch.</p> <p>Example: <code>2024-01-15T12:00:00.000Z</code> </p>",
        "ISO8601TimeRange$startTime": "<p>Start time in ISO 8601 format in Coordinated Universal Time (UTC).</p> <p>Example: <code>2026-11-15T10:28:48.000Z</code> </p>",
        "ISO8601TimeRange$endTime": "<p>End time in ISO 8601 format in Coordinated Universal Time (UTC).</p> <p>Example: <code>2024-01-15T12:00:00.000Z</code> </p>"
      }
    },
    "TLEData": {
      "base": "<p>Two-line element set (TLE) data.</p>",
      "refs": {
        "TLEDataList$member": null
      }
    },
    "TLEDataList": {
      "base": null,
      "refs": {
        "TLEEphemeris$tleData": "<p>TLE data that you provide directly instead of using an Amazon S3 object.</p>"
      }
    },
    "TLEEphemeris": {
      "base": "<p>Two-line element set (TLE) ephemeris.</p> <p> For more detail about providing Two-line element sets to AWS Ground Station, see the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/providing-tle-ephemeris-data.html\">TLE section</a> of the AWS Ground Station user guide. </p>",
      "refs": {
        "EphemerisData$tle": null
      }
    },
    "TagKeys": {
      "base": null,
      "refs": {
        "UntagResourceRequest$tagKeys": "<p>Keys of a resource tag.</p>"
      }
    },
    "TagResourceRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "TagResourceResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "TagsMap": {
      "base": null,
      "refs": {
        "ContactData$tags": "<p>Tags assigned to a contact.</p>",
        "CreateConfigRequest$tags": "<p>Tags assigned to a <code>Config</code>.</p>",
        "CreateDataflowEndpointGroupRequest$tags": "<p>Tags of a dataflow endpoint group.</p>",
        "CreateEphemerisRequest$tags": "<p>Tags assigned to an ephemeris.</p>",
        "CreateMissionProfileRequest$tags": "<p>Tags assigned to a mission profile.</p>",
        "DescribeContactResponse$tags": "<p>Tags assigned to a contact.</p>",
        "DescribeEphemerisResponse$tags": "<p>Tags assigned to an ephemeris.</p>",
        "GetConfigResponse$tags": "<p>Tags assigned to a <code>Config</code>.</p>",
        "GetDataflowEndpointGroupResponse$tags": "<p>Tags assigned to a dataflow endpoint group.</p>",
        "GetMissionProfileResponse$tags": "<p>Tags assigned to a mission profile.</p>",
        "ListTagsForResourceResponse$tags": "<p>Tags assigned to a resource.</p>",
        "RegisterAgentRequest$tags": "<p>Tags assigned to an <code>Agent</code>.</p>",
        "ReserveContactRequest$tags": "<p>Tags assigned to a contact.</p>",
        "TagResourceRequest$tags": "<p>Tags assigned to a resource.</p>"
      }
    },
    "TimeAzEl": {
      "base": "<p>Time-tagged azimuth elevation pointing data.</p> <p>Specifies the antenna pointing direction at a specific time offset from the segment's reference epoch.</p>",
      "refs": {
        "TimeAzElList$member": null
      }
    },
    "TimeAzElList": {
      "base": null,
      "refs": {
        "AzElSegment$azElList": "<p>List of time-tagged azimuth elevation data points.</p> <p> Must contain at least five points to support 4th order Lagrange interpolation. Points must be in chronological order with no duplicates. </p>"
      }
    },
    "TimeRange": {
      "base": "<p>A time range with a start and end time.</p>",
      "refs": {
        "TLEData$validTimeRange": "<p>The valid time range for the TLE. Time ranges must be continuous without gaps or overlaps.</p>"
      }
    },
    "Timestamp": {
      "base": null,
      "refs": {
        "ContactData$startTime": "<p>Start time of a contact in UTC.</p>",
        "ContactData$endTime": "<p>End time of a contact in UTC.</p>",
        "ContactData$prePassStartTime": "<p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>",
        "ContactData$postPassEndTime": "<p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>",
        "ContactData$visibilityStartTime": "<p> Projected time in UTC your satellite will rise above the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/site-masks.html\">receive mask</a>. This time is based on the satellite's current active ephemeris for future contacts and the ephemeris that was active during contact execution for completed contacts. <i>This field is not present for contacts with a <code>SCHEDULING</code> or <code>SCHEDULED</code> status.</i> </p>",
        "ContactData$visibilityEndTime": "<p> Projected time in UTC your satellite will set below the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/site-masks.html\">receive mask</a>. This time is based on the satellite's current active ephemeris for future contacts and the ephemeris that was active during contact execution for completed contacts. <i>This field is not present for contacts with a <code>SCHEDULING</code> or <code>SCHEDULED</code> status.</i> </p>",
        "CreateEphemerisRequest$expirationTime": "<p>An overall expiration time for the ephemeris in UTC, after which it will become <code>EXPIRED</code>.</p>",
        "DescribeContactResponse$startTime": "<p>Start time of a contact in UTC.</p>",
        "DescribeContactResponse$endTime": "<p>End time of a contact in UTC.</p>",
        "DescribeContactResponse$prePassStartTime": "<p>Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.</p>",
        "DescribeContactResponse$postPassEndTime": "<p>Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.</p>",
        "DescribeContactResponse$visibilityStartTime": "<p> Projected time in UTC your satellite will rise above the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/site-masks.html\">receive mask</a>. This time is based on the satellite's current active ephemeris for future contacts and the ephemeris that was active during contact execution for completed contacts. </p>",
        "DescribeContactResponse$visibilityEndTime": "<p> Projected time in UTC your satellite will set below the <a href=\"https://docs.aws.amazon.com/ground-station/latest/ug/site-masks.html\">receive mask</a>. This time is based on the satellite's current active ephemeris for future contacts and the ephemeris that was active during contact execution for completed contacts. </p>",
        "DescribeEphemerisResponse$creationTime": "<p>The time the ephemeris was uploaded in UTC.</p>",
        "EphemerisItem$creationTime": "<p>The time the ephemeris was uploaded in UTC.</p>",
        "EphemerisMetaData$epoch": "<p>The epoch of a default, ephemeris from Space Track in UTC.</p> <p>This field is not populated for customer-provided ephemerides.</p>",
        "ListContactsRequest$startTime": "<p>Start time of a contact in UTC.</p>",
        "ListContactsRequest$endTime": "<p>End time of a contact in UTC.</p>",
        "ListEphemeridesRequest$startTime": "<p>The start time for the list operation in UTC. Returns ephemerides with expiration times within your specified time range.</p>",
        "ListEphemeridesRequest$endTime": "<p>The end time for the list operation in UTC. Returns ephemerides with expiration times within your specified time range.</p>",
        "ReserveContactRequest$startTime": "<p>Start time of a contact in UTC.</p>",
        "ReserveContactRequest$endTime": "<p>End time of a contact in UTC.</p>",
        "TimeRange$startTime": "<p>Unix epoch timestamp in UTC at which the time range starts.</p>",
        "TimeRange$endTime": "<p>Unix epoch timestamp in UTC at which the time range ends.</p>"
      }
    },
    "TleLineOne": {
      "base": null,
      "refs": {
        "TLEData$tleLine1": "<p>First line of two-line element set (TLE) data.</p>"
      }
    },
    "TleLineTwo": {
      "base": null,
      "refs": {
        "TLEData$tleLine2": "<p>Second line of two-line element set (TLE) data.</p>"
      }
    },
    "TrackingConfig": {
      "base": "<p>Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.</p>",
      "refs": {
        "ConfigTypeData$trackingConfig": "<p>Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile. </p>"
      }
    },
    "TrackingOverrides": {
      "base": "<p>Overrides the default tracking configuration on an antenna during a contact.</p>",
      "refs": {
        "DescribeContactResponse$trackingOverrides": "<p>Tracking configuration overrides specified when the contact was reserved.</p>",
        "ReserveContactRequest$trackingOverrides": "<p>Tracking configuration overrides for the contact.</p>"
      }
    },
    "UnboundedString": {
      "base": null,
      "refs": {
        "EphemerisDescription$ephemerisData": "<p>Supplied ephemeris data.</p>",
        "OEMEphemeris$oemData": "<p>OEM data that you provide directly instead of using an Amazon S3 object.</p>",
        "TagKeys$member": null
      }
    },
    "UntagResourceRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "UntagResourceResponse": {
      "base": "<p/>",
      "refs": {}
    },
    "UpdateAgentStatusRequest": {
      "base": null,
      "refs": {}
    },
    "UpdateAgentStatusResponse": {
      "base": null,
      "refs": {}
    },
    "UpdateConfigRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "UpdateEphemerisRequest": {
      "base": null,
      "refs": {}
    },
    "UpdateMissionProfileRequest": {
      "base": "<p/>",
      "refs": {}
    },
    "UplinkEchoConfig": {
      "base": "<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>",
      "refs": {
        "ConfigTypeData$uplinkEchoConfig": "<p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>"
      }
    },
    "UplinkSpectrumConfig": {
      "base": "<p>Information about the uplink spectral <code>Config</code>.</p>",
      "refs": {
        "AntennaUplinkConfig$spectrumConfig": "<p>Information about the uplink spectral <code>Config</code>.</p>"
      }
    },
    "Uuid": {
      "base": null,
      "refs": {
        "AzElEphemerisFilter$id": "<p>Unique identifier of the azimuth elevation ephemeris.</p>",
        "AzElProgramTrackSettings$ephemerisId": "<p>Unique identifier of the azimuth elevation ephemeris.</p>",
        "CancelContactRequest$contactId": "<p>UUID of a contact.</p>",
        "ComponentStatusData$dataflowId": "<p>Dataflow UUID associated with the component.</p>",
        "ContactData$contactId": "<p>UUID of a contact.</p>",
        "ContactIdResponse$contactId": "<p>UUID of a contact.</p>",
        "CreateEphemerisRequest$satelliteId": "<p>The satellite ID that associates this ephemeris with a satellite in AWS Ground Station.</p>",
        "DataflowEndpointGroupIdResponse$dataflowEndpointGroupId": "<p>UUID of a dataflow endpoint group.</p>",
        "DataflowEndpointListItem$dataflowEndpointGroupId": "<p>UUID of a dataflow endpoint group.</p>",
        "DeleteConfigRequest$configId": "<p>UUID of a <code>Config</code>.</p>",
        "DeleteDataflowEndpointGroupRequest$dataflowEndpointGroupId": "<p>UUID of a dataflow endpoint group.</p>",
        "DeleteEphemerisRequest$ephemerisId": "<p>The AWS Ground Station ephemeris ID.</p>",
        "DeleteMissionProfileRequest$missionProfileId": "<p>UUID of a mission profile.</p>",
        "DescribeContactRequest$contactId": "<p>UUID of a contact.</p>",
        "DescribeContactResponse$contactId": "<p>UUID of a contact.</p>",
        "DescribeEphemerisRequest$ephemerisId": "<p>The AWS Ground Station ephemeris ID.</p>",
        "DescribeEphemerisResponse$ephemerisId": "<p>The AWS Ground Station ephemeris ID.</p>",
        "DescribeEphemerisResponse$satelliteId": "<p>The AWS Ground Station satellite ID associated with ephemeris.</p>",
        "Destination$configId": "<p>UUID of a <code>Config</code>.</p>",
        "EphemerisIdResponse$ephemerisId": "<p>The AWS Ground Station ephemeris ID.</p>",
        "EphemerisItem$ephemerisId": "<p>The AWS Ground Station ephemeris ID.</p>",
        "EphemerisMetaData$ephemerisId": "<p>UUID of a customer-provided ephemeris.</p> <p>This field is not populated for default ephemerides from Space Track.</p>",
        "EphemerisResponseData$ephemerisId": "<p>Unique identifier of the ephemeris. Appears only for custom ephemerides.</p>",
        "GetAgentConfigurationRequest$agentId": "<p>UUID of agent to get configuration information for.</p>",
        "GetAgentConfigurationResponse$agentId": "<p>UUID of agent.</p>",
        "GetConfigRequest$configId": "<p>UUID of a <code>Config</code>.</p>",
        "GetDataflowEndpointGroupRequest$dataflowEndpointGroupId": "<p>UUID of a dataflow endpoint group.</p>",
        "GetDataflowEndpointGroupResponse$dataflowEndpointGroupId": "<p>UUID of a dataflow endpoint group.</p>",
        "GetMissionProfileRequest$missionProfileId": "<p>UUID of a mission profile.</p>",
        "GetMissionProfileResponse$missionProfileId": "<p>UUID of a mission profile.</p>",
        "GetSatelliteRequest$satelliteId": "<p>UUID of a satellite.</p>",
        "GetSatelliteResponse$satelliteId": "<p>UUID of a satellite.</p>",
        "ListEphemeridesRequest$satelliteId": "<p>The AWS Ground Station satellite ID to list ephemeris for.</p>",
        "ListGroundStationsRequest$satelliteId": "<p>Satellite ID to retrieve on-boarded ground stations.</p>",
        "MissionProfileIdResponse$missionProfileId": "<p>UUID of a mission profile.</p>",
        "MissionProfileListItem$missionProfileId": "<p>UUID of a mission profile.</p>",
        "RegisterAgentResponse$agentId": "<p>UUID of registered agent.</p>",
        "SatelliteListItem$satelliteId": "<p>UUID of a satellite.</p>",
        "UpdateAgentStatusRequest$agentId": "<p>UUID of agent to update.</p>",
        "UpdateAgentStatusRequest$taskId": "<p>GUID of agent task.</p>",
        "UpdateAgentStatusResponse$agentId": "<p>UUID of updated agent.</p>",
        "UpdateConfigRequest$configId": "<p>UUID of a <code>Config</code>.</p>",
        "UpdateEphemerisRequest$ephemerisId": "<p>The AWS Ground Station ephemeris ID.</p>",
        "UpdateMissionProfileRequest$missionProfileId": "<p>UUID of a mission profile.</p>"
      }
    },
    "VersionString": {
      "base": null,
      "refs": {
        "AgentDetails$agentVersion": "<p>Current agent version.</p>",
        "VersionStringList$member": null
      }
    },
    "VersionStringList": {
      "base": null,
      "refs": {
        "ComponentVersion$versions": "<p>List of versions.</p>"
      }
    },
    "Year": {
      "base": null,
      "refs": {
        "GetMinuteUsageRequest$year": "<p>The year being requested, in the format of YYYY.</p>"
      }
    },
    "noradSatelliteID": {
      "base": null,
      "refs": {
        "GetSatelliteResponse$noradSatelliteID": "<p>NORAD satellite ID number.</p>",
        "SatelliteListItem$noradSatelliteID": "<p>NORAD satellite ID number.</p>"
      }
    },
    "satelliteArn": {
      "base": null,
      "refs": {
        "ContactData$satelliteArn": "<p>ARN of a satellite.</p>",
        "DescribeContactResponse$satelliteArn": "<p>ARN of a satellite.</p>",
        "GetSatelliteResponse$satelliteArn": "<p>ARN of a satellite.</p>",
        "ListContactsRequest$satelliteArn": "<p>ARN of a satellite.</p>",
        "ReserveContactRequest$satelliteArn": "<p>ARN of a satellite</p>",
        "SatelliteListItem$satelliteArn": "<p>ARN of a satellite.</p>"
      }
    }
  }
}
