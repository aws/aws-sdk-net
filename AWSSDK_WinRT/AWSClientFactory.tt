<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#@ include file="SupportServicesList.tt"#>
/*******************************************************************************
 *  Copyright 2008-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *    __  _    _  ___
 *   (  )( \/\/ )/ __)
 *   /__\ \    / \__ \
 *  (_)(_) \/\/  (___/
 *
 *  AWS SDK for .NET
 *
 */
using System;
using Amazon.Runtime;

<#
foreach(var interfaceName in supportedFactoryInterfaces)
{
#>
using <#=interfaceName.Substring(0, interfaceName.LastIndexOf('.'))#>;
<#
}
#>

namespace Amazon
{
    /// <summary>
    /// The Amazon Web Services SDK provides devlopers with a coherent and unified interface to the
    /// suite of Amazon Web Services. The intent is to facilitate the rapid building of
    /// applications that leverage multiple Amazon Web Services.
    /// <para>
    /// To get started, request an instance of the AWSClientFactory via this class's static Instance
    /// member. Use the factory instance to create clients for all the Web Services needed by
    /// the application.</para>
    /// </summary>

    public static class AWSClientFactory
    {
<#
foreach(var interfaceFullName in supportedFactoryInterfaces)
{
	var interfaceName = interfaceFullName.Substring(interfaceFullName.LastIndexOf('.') + 1);
    var baseName = interfaceName.Substring(1);
    var clientName = baseName + "Client";
    var serviceName = baseName.Substring(0, "Amazon".Length) + " " + baseName.Substring("Amazon".Length);
#>
		#region <#=serviceName#>

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the default configuration
        /// </summary>
        /// <param name="awsAccessKey">The AWS Access Key associated with the account</param>
        /// <param name="awsSecretAccessKey">The AWS Secret Access Key associated with the account</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(
            string awsAccessKey,
            string awsSecretAccessKey
            )
        {
            return new <#=clientName#>(awsAccessKey, awsSecretAccessKey);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the specified configuration
        /// </summary>
        /// <param name="awsAccessKey">The AWS Access Key associated with the account</param>
        /// <param name="awsSecretAccessKey">The AWS Secret Access Key associated with the account</param>
        /// <param name="config">Configuration options for the service like HTTP Proxy, # of connections, etc
        /// </param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(
            string awsAccessKey,
            string awsSecretAccessKey, <#=baseName#>Config config
            )
        {
            return new <#=clientName#>(awsAccessKey, awsSecretAccessKey, config);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with the specified region
        /// </summary>
        /// <param name="awsAccessKey">The AWS Access Key associated with the account</param>
        /// <param name="awsSecretAccessKey">The AWS Secret Access Key associated with the account</param>
        /// <param name="region">The region to connect to.</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(
            string awsAccessKey,
            string awsSecretAccessKey, RegionEndpoint region
            )
        {
            return new <#=clientName#>(awsAccessKey, awsSecretAccessKey, region);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with AWSCredentials.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(AWSCredentials credentials)
        {
            return new <#=clientName#>(credentials);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with AWSCredentials and region.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <param name="region">The region to connect to.</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(AWSCredentials credentials, RegionEndpoint region)
        {
            return new <#=clientName#>(credentials, region);
        }

        /// <summary>
        /// Create a client for the <#=serviceName#> Service with AWSCredentials and an <#=baseName#> Configuration object.
        /// </summary>
        /// <param name="credentials">AWS Credentials</param>
        /// <param name="config">Configuration options for the service like HTTP Proxy, # of connections, etc</param>
        /// <returns>An <#=serviceName#> client</returns>
        /// <remarks>
        /// </remarks>
        public static <#=interfaceName#> Create<#=clientName#>(AWSCredentials credentials, <#=baseName#>Config config)
        {
            return new <#=clientName#>(credentials, config);
        }
		#endregion

<#
}
#>

	}
}